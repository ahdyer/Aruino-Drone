
FlightSoftware V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008764  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080088f0  080088f0  000188f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af0  08008af0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008af0  08008af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af8  08008af8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000008c  08008b8c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08008b8c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcca  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e57  00000000  00000000  0002fd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f322  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eaf  00000000  00000000  00052ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2003  00000000  00000000  00063b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125b94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  00125be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080088d4 	.word	0x080088d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	080088d4 	.word	0x080088d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e8c:	b0ac      	sub	sp, #176	; 0xb0
 8000e8e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f002 f8bc 	bl	800300c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 fc3e 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f000 feae 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9c:	f000 fe8c 	bl	8001bb8 <MX_DMA_Init>
  MX_I2C2_Init();
 8000ea0:	f000 fca2 	bl	80017e8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000ea4:	f000 fcce 	bl	8001844 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ea8:	f000 fe5c 	bl	8001b64 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000eac:	f000 fd66 	bl	800197c <MX_TIM4_Init>
  MX_TIM12_Init();
 8000eb0:	f000 fdfc 	bl	8001aac <MX_TIM12_Init>
  MX_TIM2_Init();
 8000eb4:	f000 fd16 	bl	80018e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  // ICM20689 variables
	const uint8_t icm20689_address = 0x68;
 8000eb8:	2368      	movs	r3, #104	; 0x68
 8000eba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	float acc_x, acc_y, acc_z;
	float temp;
	float gy_x, gy_y, gy_z;
	// Calibration variables
	float gy_cal_x = 0, gy_cal_y = 0, gy_cal_z = 0;
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
	float acc_cal_x = 0, acc_cal_y = 0, acc_cal_z = 0;
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
	// Angle Variables
	//X - Pitch | Y - Roll | Z - Yaw
	float pitch = 0, roll = 0, yaw = 0;
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
	float pitch_t = 0, roll_t = 0, yaw_t = 0;
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	677b      	str	r3, [r7, #116]	; 0x74
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	673b      	str	r3, [r7, #112]	; 0x70
	float gy_roll = 0, gy_pitch = 0, gy_yaw = 0;
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float acc_roll = 0, acc_pitch = 0, acc_yaw = 0;
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	667b      	str	r3, [r7, #100]	; 0x64
	float acc_tot_vect = 0;
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	663b      	str	r3, [r7, #96]	; 0x60

	// MS5611
	const uint8_t ms5611_address = 0x77;
 8000f3a:	2377      	movs	r3, #119	; 0x77
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint16_t looptimmer = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t error_counter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	uint8_t armed = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

	uint32_t loopcounter = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	//UART DMA variables
	uint8_t rx_buff[32] = {0};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]

	// Start DMA UART RX
	HAL_StatusTypeDef uart_status;
	uart_status = HAL_UART_Receive_DMA(&huart3, rx_buff, 32);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2220      	movs	r2, #32
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <main+0x104>)
 8000f78:	f005 fd93 	bl	8006aa2 <HAL_UART_Receive_DMA>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// Check for errors in starting the UART


  HAL_Delay(1000); // Wait for the icm20689 to initialise
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f002 f8b3 	bl	80030f0 <HAL_Delay>
  while(rx_buff[0] != 0x20){
 8000f8a:	e00a      	b.n	8000fa2 <main+0x11a>
 8000f8c:	2000019c 	.word	0x2000019c
	  HAL_GPIO_TogglePin(GPIOC, r_led_Pin);
 8000f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f94:	48dc      	ldr	r0, [pc, #880]	; (8001308 <main+0x480>)
 8000f96:	f002 ff06 	bl	8003da6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9e:	f002 f8a7 	bl	80030f0 <HAL_Delay>
  while(rx_buff[0] != 0x20){
 8000fa2:	793b      	ldrb	r3, [r7, #4]
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d1f3      	bne.n	8000f90 <main+0x108>
  }
  ICM20689_Config(icm20689_address, &gy_cal_x, &gy_cal_y, &gy_cal_z, &acc_cal_x, &acc_cal_y, &acc_cal_z); // configure ICM power register and calibrate the gyroscope
 8000fa8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000fb4:	f897 0083 	ldrb.w	r0, [r7, #131]	; 0x83
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	f001 f852 	bl	8002074 <ICM20689_Config>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	48ce      	ldr	r0, [pc, #824]	; (800130c <main+0x484>)
 8000fd4:	f004 fbdc 	bl	8005790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fd8:	2104      	movs	r1, #4
 8000fda:	48cc      	ldr	r0, [pc, #816]	; (800130c <main+0x484>)
 8000fdc:	f004 fbd8 	bl	8005790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	48ca      	ldr	r0, [pc, #808]	; (800130c <main+0x484>)
 8000fe4:	f004 fbd4 	bl	8005790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000fe8:	210c      	movs	r1, #12
 8000fea:	48c8      	ldr	r0, [pc, #800]	; (800130c <main+0x484>)
 8000fec:	f004 fbd0 	bl	8005790 <HAL_TIM_PWM_Start>

  // Reset both status lights
  HAL_GPIO_WritePin(GPIOC, o_led_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff6:	48c4      	ldr	r0, [pc, #784]	; (8001308 <main+0x480>)
 8000ff8:	f002 febc 	bl	8003d74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, r_led_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	48c1      	ldr	r0, [pc, #772]	; (8001308 <main+0x480>)
 8001004:	f002 feb6 	bl	8003d74 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Loop timer setup
    TIM1->CR1 |= 1<<0;
 8001008:	4bc1      	ldr	r3, [pc, #772]	; (8001310 <main+0x488>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4ac0      	ldr	r2, [pc, #768]	; (8001310 <main+0x488>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
    while (!(TIM1->SR & 1<<0));
 8001014:	bf00      	nop
 8001016:	4bbe      	ldr	r3, [pc, #760]	; (8001310 <main+0x488>)
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <main+0x18e>
    TIM1->CNT = 0;
 8001022:	4bbb      	ldr	r3, [pc, #748]	; (8001310 <main+0x488>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Increment loop counter
	  loopcounter ++;
 8001028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  ICM20689_Read(icm20689_address, &acc_x, &acc_y, &acc_z, &temp, &gy_x, &gy_y, &gy_z, gy_cal_x, gy_cal_y, gy_cal_z, acc_cal_x, acc_cal_y, acc_cal_z);
 8001032:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001036:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800103a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800103e:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8001042:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8001046:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 800104a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800104e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001052:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001056:	f897 0083 	ldrb.w	r0, [r7, #131]	; 0x83
 800105a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800105e:	9303      	str	r3, [sp, #12]
 8001060:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	eef0 2a45 	vmov.f32	s5, s10
 8001076:	eeb0 2a65 	vmov.f32	s4, s11
 800107a:	eef0 1a46 	vmov.f32	s3, s12
 800107e:	eeb0 1a66 	vmov.f32	s2, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	4623      	mov	r3, r4
 800108c:	f000 fe48 	bl	8001d20 <ICM20689_Read>

	  //Complementary filter applied to gyroscope values
	  pid_gy_roll = (pid_gy_roll*0.7) + (gy_y *0.3);
 8001090:	4ba0      	ldr	r3, [pc, #640]	; (8001314 <main+0x48c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9fb 	bl	8000490 <__aeabi_f2d>
 800109a:	a395      	add	r3, pc, #596	; (adr r3, 80012f0 <main+0x468>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa4e 	bl	8000540 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4614      	mov	r4, r2
 80010aa:	461d      	mov	r5, r3
 80010ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9ee 	bl	8000490 <__aeabi_f2d>
 80010b4:	a390      	add	r3, pc, #576	; (adr r3, 80012f8 <main+0x470>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa41 	bl	8000540 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f885 	bl	80001d4 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd0d 	bl	8000af0 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a8e      	ldr	r2, [pc, #568]	; (8001314 <main+0x48c>)
 80010da:	6013      	str	r3, [r2, #0]
	  pid_gy_pitch = (pid_gy_pitch*0.7) + (gy_x *0.3);
 80010dc:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <main+0x490>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f9d5 	bl	8000490 <__aeabi_f2d>
 80010e6:	a382      	add	r3, pc, #520	; (adr r3, 80012f0 <main+0x468>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa28 	bl	8000540 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4614      	mov	r4, r2
 80010f6:	461d      	mov	r5, r3
 80010f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9c8 	bl	8000490 <__aeabi_f2d>
 8001100:	a37d      	add	r3, pc, #500	; (adr r3, 80012f8 <main+0x470>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa1b 	bl	8000540 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f85f 	bl	80001d4 <__adddf3>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fce7 	bl	8000af0 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	4a7c      	ldr	r2, [pc, #496]	; (8001318 <main+0x490>)
 8001126:	6013      	str	r3, [r2, #0]
	  pid_gy_yaw = (pid_gy_yaw*0.7) + (gy_z *0.3);
 8001128:	4b7c      	ldr	r3, [pc, #496]	; (800131c <main+0x494>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f9af 	bl	8000490 <__aeabi_f2d>
 8001132:	a36f      	add	r3, pc, #444	; (adr r3, 80012f0 <main+0x468>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fa02 	bl	8000540 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9a2 	bl	8000490 <__aeabi_f2d>
 800114c:	a36a      	add	r3, pc, #424	; (adr r3, 80012f8 <main+0x470>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff f9f5 	bl	8000540 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff f839 	bl	80001d4 <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fcc1 	bl	8000af0 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	4a6a      	ldr	r2, [pc, #424]	; (800131c <main+0x494>)
 8001172:	6013      	str	r3, [r2, #0]

	  //Calculate the travelled angles from the gyroscope
	  //loop every 1 / 250hz = 0.004
      roll = roll + (gy_y / 250);
 8001174:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001178:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001320 <main+0x498>
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	  pitch = pitch + (gy_x / 250);
 800118c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001190:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001320 <main+0x498>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800119c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	  gy_yaw = gy_yaw + (gy_z / 250);
 80011a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011a8:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001320 <main+0x498>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	  //need to rotate pitch and roll by the sin of yaw
	  roll += (pitch * (sin(gy_z * 0.00006981)));
 80011bc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80011c0:	f7ff f966 	bl	8000490 <__aeabi_f2d>
 80011c4:	4604      	mov	r4, r0
 80011c6:	460d      	mov	r5, r1
 80011c8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80011cc:	f7ff f960 	bl	8000490 <__aeabi_f2d>
 80011d0:	4680      	mov	r8, r0
 80011d2:	4689      	mov	r9, r1
 80011d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f95a 	bl	8000490 <__aeabi_f2d>
 80011dc:	a348      	add	r3, pc, #288	; (adr r3, 8001300 <main+0x478>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff f9ad 	bl	8000540 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	ec43 2b17 	vmov	d7, r2, r3
 80011ee:	eeb0 0a47 	vmov.f32	s0, s14
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	f005 fff7 	bl	80071e8 <sin>
 80011fa:	ec53 2b10 	vmov	r2, r3, d0
 80011fe:	4640      	mov	r0, r8
 8001200:	4649      	mov	r1, r9
 8001202:	f7ff f99d 	bl	8000540 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7fe ffe1 	bl	80001d4 <__adddf3>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fc69 	bl	8000af0 <__aeabi_d2f>
 800121e:	4603      	mov	r3, r0
 8001220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  pitch -= roll * (sin(gy_z * 0.00006981));
 8001224:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001228:	f7ff f932 	bl	8000490 <__aeabi_f2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001234:	f7ff f92c 	bl	8000490 <__aeabi_f2d>
 8001238:	4680      	mov	r8, r0
 800123a:	4689      	mov	r9, r1
 800123c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f926 	bl	8000490 <__aeabi_f2d>
 8001244:	a32e      	add	r3, pc, #184	; (adr r3, 8001300 <main+0x478>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f979 	bl	8000540 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ec43 2b17 	vmov	d7, r2, r3
 8001256:	eeb0 0a47 	vmov.f32	s0, s14
 800125a:	eef0 0a67 	vmov.f32	s1, s15
 800125e:	f005 ffc3 	bl	80071e8 <sin>
 8001262:	ec53 2b10 	vmov	r2, r3, d0
 8001266:	4640      	mov	r0, r8
 8001268:	4649      	mov	r1, r9
 800126a:	f7ff f969 	bl	8000540 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7fe ffab 	bl	80001d0 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc35 	bl	8000af0 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	  // Calculate acceleration vectors
	  acc_tot_vect = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));
 800128c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001290:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001298:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800129c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80012ac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	ee17 0a90 	vmov	r0, s15
 80012bc:	f7ff f8e8 	bl	8000490 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b10 	vmov	d0, r2, r3
 80012c8:	f006 f81c 	bl	8007304 <sqrt>
 80012cc:	ec53 2b10 	vmov	r2, r3, d0
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc0c 	bl	8000af0 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	663b      	str	r3, [r7, #96]	; 0x60
	  if (ABS(acc_y) < acc_tot_vect){
 80012dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	f000 fd00 	bl	8001ce8 <ABS>
 80012e8:	eeb0 7a40 	vmov.f32	s14, s0
 80012ec:	e01a      	b.n	8001324 <main+0x49c>
 80012ee:	bf00      	nop
 80012f0:	66666666 	.word	0x66666666
 80012f4:	3fe66666 	.word	0x3fe66666
 80012f8:	33333333 	.word	0x33333333
 80012fc:	3fd33333 	.word	0x3fd33333
 8001300:	aaf0aeff 	.word	0xaaf0aeff
 8001304:	3f124cde 	.word	0x3f124cde
 8001308:	40020800 	.word	0x40020800
 800130c:	200000f4 	.word	0x200000f4
 8001310:	40010000 	.word	0x40010000
 8001314:	200000ac 	.word	0x200000ac
 8001318:	200000c4 	.word	0x200000c4
 800131c:	200000e0 	.word	0x200000e0
 8001320:	437a0000 	.word	0x437a0000
 8001324:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd1f      	ble.n	8001372 <main+0x4ea>
		  acc_pitch = asin(acc_y/acc_tot_vect) * 57.288;
 8001332:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001336:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800133a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800133e:	ee16 0a90 	vmov	r0, s13
 8001342:	f7ff f8a5 	bl	8000490 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	ec43 2b10 	vmov	d0, r2, r3
 800134e:	f005 ff9f 	bl	8007290 <asin>
 8001352:	ec51 0b10 	vmov	r0, r1, d0
 8001356:	a3e5      	add	r3, pc, #916	; (adr r3, 80016ec <main+0x864>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f8f0 	bl	8000540 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fbc2 	bl	8000af0 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  }
	  if (ABS(acc_x) < acc_tot_vect){
 8001372:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	f000 fcb5 	bl	8001ce8 <ABS>
 800137e:	eeb0 7a40 	vmov.f32	s14, s0
 8001382:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dd1f      	ble.n	80013d0 <main+0x548>
	  		  acc_roll = asin(acc_x/acc_tot_vect) * -57.288; // negative to ensure left wing up is +roll
 8001390:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001394:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001398:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800139c:	ee16 0a90 	vmov	r0, s13
 80013a0:	f7ff f876 	bl	8000490 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	ec43 2b10 	vmov	d0, r2, r3
 80013ac:	f005 ff70 	bl	8007290 <asin>
 80013b0:	ec51 0b10 	vmov	r0, r1, d0
 80013b4:	a3cf      	add	r3, pc, #828	; (adr r3, 80016f4 <main+0x86c>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f8c1 	bl	8000540 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb93 	bl	8000af0 <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  	  }

	  roll = (roll*0.9995) + (acc_roll*0.0005);
 80013d0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80013d4:	f7ff f85c 	bl	8000490 <__aeabi_f2d>
 80013d8:	a3c8      	add	r3, pc, #800	; (adr r3, 80016fc <main+0x874>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f8af 	bl	8000540 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4614      	mov	r4, r2
 80013e8:	461d      	mov	r5, r3
 80013ea:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80013ee:	f7ff f84f 	bl	8000490 <__aeabi_f2d>
 80013f2:	a3c4      	add	r3, pc, #784	; (adr r3, 8001704 <main+0x87c>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f8a2 	bl	8000540 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4620      	mov	r0, r4
 8001402:	4629      	mov	r1, r5
 8001404:	f7fe fee6 	bl	80001d4 <__adddf3>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fb6e 	bl	8000af0 <__aeabi_d2f>
 8001414:	4603      	mov	r3, r0
 8001416:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  pitch = (pitch*0.99955) + (acc_pitch*0.0005);
 800141a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800141e:	f7ff f837 	bl	8000490 <__aeabi_f2d>
 8001422:	a3ba      	add	r3, pc, #744	; (adr r3, 800170c <main+0x884>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f88a 	bl	8000540 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4614      	mov	r4, r2
 8001432:	461d      	mov	r5, r3
 8001434:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001438:	f7ff f82a 	bl	8000490 <__aeabi_f2d>
 800143c:	a3b1      	add	r3, pc, #708	; (adr r3, 8001704 <main+0x87c>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f87d 	bl	8000540 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7fe fec1 	bl	80001d4 <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb49 	bl	8000af0 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  yaw = gy_yaw;
 8001464:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001468:	67fb      	str	r3, [r7, #124]	; 0x7c



	  roll_al = roll * 3;
 800146a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800146e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	4b94      	ldr	r3, [pc, #592]	; (80016c8 <main+0x840>)
 8001478:	edc3 7a00 	vstr	s15, [r3]
	  pitch_al = pitch * 3;
 800147c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001480:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001488:	4b90      	ldr	r3, [pc, #576]	; (80016cc <main+0x844>)
 800148a:	edc3 7a00 	vstr	s15, [r3]

	 // HC_SR04_Read();

	  Calculate_SetPoints();
 800148e:	f001 fa77 	bl	8002980 <Calculate_SetPoints>
	  Calculate_PIDs();
 8001492:	f001 f8b3 	bl	80025fc <Calculate_PIDs>

	  //  Function to check fault flags
	  //Check_Faults();

	  // check to see if arm switch is disarmed
	  if (channel[4] < 1500 || channel[4] == 0){
 8001496:	4b8e      	ldr	r3, [pc, #568]	; (80016d0 <main+0x848>)
 8001498:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800149c:	f240 52db 	movw	r2, #1499	; 0x5db
 80014a0:	4293      	cmp	r3, r2
 80014a2:	dd04      	ble.n	80014ae <main+0x626>
 80014a4:	4b8a      	ldr	r3, [pc, #552]	; (80016d0 <main+0x848>)
 80014a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <main+0x632>
		  flight_state = idle;
 80014ae:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <main+0x84c>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
		  armed = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	  }

	  // State machine for the drone switch case
	  switch (flight_state){
 80014ba:	4b86      	ldr	r3, [pc, #536]	; (80016d4 <main+0x84c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	f200 80e7 	bhi.w	8001692 <main+0x80a>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <main+0x644>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	0800160b 	.word	0x0800160b
 80014d0:	080014e5 	.word	0x080014e5
 80014d4:	080015c3 	.word	0x080015c3
 80014d8:	08001605 	.word	0x08001605
 80014dc:	08001693 	.word	0x08001693
 80014e0:	08001693 	.word	0x08001693
	  case(idle):
			// Ensure motors are not running
			TIM4->CCR1 = 0;
 80014e4:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <main+0x850>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 0;
 80014ea:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <main+0x850>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = 0;
 80014f0:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <main+0x850>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR4 = 0;
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <main+0x850>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
			// Wait for receiver connection
			if (rx_buff[0] == 0x20 & armed == 0 & (channel[4] > 1500) & (channel[2] < 1030)){
 80014fc:	793b      	ldrb	r3, [r7, #4]
 80014fe:	2b20      	cmp	r3, #32
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2da      	uxtb	r2, r3
 8001508:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4013      	ands	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <main+0x848>)
 800151e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001522:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001526:	4293      	cmp	r3, r2
 8001528:	bfcc      	ite	gt
 800152a:	2301      	movgt	r3, #1
 800152c:	2300      	movle	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	400b      	ands	r3, r1
 8001532:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <main+0x848>)
 8001534:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001538:	f240 4105 	movw	r1, #1029	; 0x405
 800153c:	428a      	cmp	r2, r1
 800153e:	bfd4      	ite	le
 8001540:	2201      	movle	r2, #1
 8001542:	2200      	movgt	r2, #0
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <main+0x6cc>
				flight_state = arming;
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <main+0x84c>)
 800154e:	2202      	movs	r2, #2
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e022      	b.n	800159a <main+0x712>
			}
			// need to check this is the right channel
			else if (channel[5] > 1600 & armed == 1 & channel[4] > 1500){
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <main+0x848>)
 8001556:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800155a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2da      	uxtb	r2, r3
 8001566:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800156a:	2b01      	cmp	r3, #1
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4013      	ands	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <main+0x848>)
 800157c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001580:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001584:	4293      	cmp	r3, r2
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	400b      	ands	r3, r1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <main+0x712>
				 flight_state = rate_mode;
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <main+0x84c>)
 8001596:	2203      	movs	r2, #3
 8001598:	701a      	strb	r2, [r3, #0]
			 }
	  	  	// controller runs 250 times a second so mod 125 so the LED flashes every 500ms
	  	  	// blink Top orange LED
			if(loopcounter % 125 == 0){
 800159a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <main+0x854>)
 80015a0:	fba3 2301 	umull	r2, r3, r3, r1
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	4613      	mov	r3, r2
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	1aca      	subs	r2, r1, r3
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d16a      	bne.n	800168c <main+0x804>
				HAL_GPIO_TogglePin(GPIOC, o_led_Pin);
 80015b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ba:	4849      	ldr	r0, [pc, #292]	; (80016e0 <main+0x858>)
 80015bc:	f002 fbf3 	bl	8003da6 <HAL_GPIO_TogglePin>
			}
		  break;
 80015c0:	e064      	b.n	800168c <main+0x804>

	  case(arming):
		  // send 1000us ESC pulses
		  if (armed == 0){
 80015c2:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d162      	bne.n	8001690 <main+0x808>
			  TIM4->CCR1 = 1000;
 80015ca:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <main+0x850>)
 80015cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = 1000;
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <main+0x850>)
 80015d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM4->CCR3 = 1000;
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <main+0x850>)
 80015dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM4->CCR4 = 1000;
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <main+0x850>)
 80015e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(3000);
 80015ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015ee:	f001 fd7f 	bl	80030f0 <HAL_Delay>
			  armed ++;
 80015f2:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80015f6:	3301      	adds	r3, #1
 80015f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			  flight_state = idle;
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <main+0x84c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
	      }

		  break;
 8001602:	e045      	b.n	8001690 <main+0x808>

	  case(rate_mode):
		  Update_Motors();
 8001604:	f000 ff0a 	bl	800241c <Update_Motors>
		  break;
 8001608:	e043      	b.n	8001692 <main+0x80a>
	  case(altitude_hold):
		  break;

	  case(error):
		  // Alternately blink orange and red LED
		  if(loopcounter % 125 == 0){
 800160a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <main+0x854>)
 8001610:	fba3 2301 	umull	r2, r3, r3, r1
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	4613      	mov	r3, r2
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	1aca      	subs	r2, r1, r3
 8001622:	2a00      	cmp	r2, #0
 8001624:	d10b      	bne.n	800163e <main+0x7b6>
			  HAL_GPIO_WritePin(GPIOC, o_led_Pin, RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162c:	482c      	ldr	r0, [pc, #176]	; (80016e0 <main+0x858>)
 800162e:	f002 fba1 	bl	8003d74 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, o_led_Pin, SET);
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001638:	4829      	ldr	r0, [pc, #164]	; (80016e0 <main+0x858>)
 800163a:	f002 fb9b 	bl	8003d74 <HAL_GPIO_WritePin>
		  }
	      if(loopcounter % 75 == 0){
 800163e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <main+0x85c>)
 8001644:	fba3 2301 	umull	r2, r3, r3, r1
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	011a      	lsls	r2, r3, #4
 8001652:	1ad2      	subs	r2, r2, r3
 8001654:	1a8a      	subs	r2, r1, r2
 8001656:	2a00      	cmp	r2, #0
 8001658:	d10b      	bne.n	8001672 <main+0x7ea>
	    	  HAL_GPIO_WritePin(GPIOC, r_led_Pin, SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001660:	481f      	ldr	r0, [pc, #124]	; (80016e0 <main+0x858>)
 8001662:	f002 fb87 	bl	8003d74 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOC, r_led_Pin, RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <main+0x858>)
 800166e:	f002 fb81 	bl	8003d74 <HAL_GPIO_WritePin>
	      }
		  // Ensure motors are not running
		  TIM4->CCR1 = 0;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <main+0x850>)
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM4->CCR2 = 0;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <main+0x850>)
 800167a:	2200      	movs	r2, #0
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM4->CCR3 = 0;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <main+0x850>)
 8001680:	2200      	movs	r2, #0
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM4->CCR4 = 0;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <main+0x850>)
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40

	      break;
 800168a:	e002      	b.n	8001692 <main+0x80a>
		  break;
 800168c:	bf00      	nop
 800168e:	e000      	b.n	8001692 <main+0x80a>
		  break;
 8001690:	bf00      	nop
	  }

	  // ensure the loop happens every 4ms
	  while(TIM1->CNT < 4000){
 8001692:	bf00      	nop
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <main+0x860>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800169c:	d3fa      	bcc.n	8001694 <main+0x80c>
	  };
	  looptimmer = TIM1->CNT;
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <main+0x860>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  if (looptimmer > 4300){
 80016a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016aa:	f241 02cc 	movw	r2, #4300	; 0x10cc
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d904      	bls.n	80016bc <main+0x834>
		  error_counter ++;
 80016b2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80016b6:	3301      	adds	r3, #1
 80016b8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		  if(error_counter > 3){
			  //flight_state = error;
		  }
	  }
	  TIM1->CNT = 0;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <main+0x860>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
	  loopcounter ++;
 80016c2:	e4b1      	b.n	8001028 <main+0x1a0>
 80016c4:	f3af 8000 	nop.w
 80016c8:	200000c0 	.word	0x200000c0
 80016cc:	200000d8 	.word	0x200000d8
 80016d0:	20000238 	.word	0x20000238
 80016d4:	20000016 	.word	0x20000016
 80016d8:	40000800 	.word	0x40000800
 80016dc:	10624dd3 	.word	0x10624dd3
 80016e0:	40020800 	.word	0x40020800
 80016e4:	1b4e81b5 	.word	0x1b4e81b5
 80016e8:	40010000 	.word	0x40010000
 80016ec:	2f1a9fbe 	.word	0x2f1a9fbe
 80016f0:	404ca4dd 	.word	0x404ca4dd
 80016f4:	2f1a9fbe 	.word	0x2f1a9fbe
 80016f8:	c04ca4dd 	.word	0xc04ca4dd
 80016fc:	6c8b4396 	.word	0x6c8b4396
 8001700:	3feffbe7 	.word	0x3feffbe7
 8001704:	d2f1a9fc 	.word	0xd2f1a9fc
 8001708:	3f40624d 	.word	0x3f40624d
 800170c:	4816f007 	.word	0x4816f007
 8001710:	3feffc50 	.word	0x3feffc50

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	; 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2230      	movs	r2, #48	; 0x30
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fd58 	bl	80071d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <SystemClock_Config+0xcc>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <SystemClock_Config+0xcc>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <SystemClock_Config+0xcc>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <SystemClock_Config+0xd0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <SystemClock_Config+0xd0>)
 800175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <SystemClock_Config+0xd0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001784:	2308      	movs	r3, #8
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001788:	23a8      	movs	r3, #168	; 0xa8
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fadf 	bl	8004d5c <HAL_RCC_OscConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017a4:	f001 f9fc 	bl	8002ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a8:	230f      	movs	r3, #15
 80017aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2105      	movs	r1, #5
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fd40 	bl	800524c <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017d2:	f001 f9e5 	bl	8002ba0 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	; 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_I2C2_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_I2C2_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_I2C2_Init+0x50>)
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_I2C2_Init+0x58>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_I2C2_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_I2C2_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_I2C2_Init+0x50>)
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_I2C2_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_I2C2_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_I2C2_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_I2C2_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_I2C2_Init+0x50>)
 8001826:	f002 fad9 	bl	8003ddc <HAL_I2C_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001830:	f001 f9b6 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200001e0 	.word	0x200001e0
 800183c:	40005800 	.word	0x40005800
 8001840:	00061a80 	.word	0x00061a80

08001844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM1_Init+0x98>)
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <MX_TIM1_Init+0x9c>)
 8001864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM1_Init+0x98>)
 8001868:	22a7      	movs	r2, #167	; 0xa7
 800186a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM1_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM1_Init+0x98>)
 8001874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_TIM1_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_TIM1_Init+0x98>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM1_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_TIM1_Init+0x98>)
 800188e:	f003 fed7 	bl	8005640 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001898:	f001 f982 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_TIM1_Init+0x98>)
 80018aa:	f004 faed 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018b4:	f001 f974 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM1_Init+0x98>)
 80018c6:	f005 f80f 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018d0:	f001 f966 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000024c 	.word	0x2000024c
 80018e0:	40010000 	.word	0x40010000

080018e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_TIM2_Init+0x94>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_TIM2_Init+0x94>)
 800190a:	2253      	movs	r2, #83	; 0x53
 800190c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_TIM2_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_TIM2_Init+0x94>)
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_TIM2_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_TIM2_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_TIM2_Init+0x94>)
 800192a:	f003 fe89 	bl	8005640 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001934:	f001 f934 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM2_Init+0x94>)
 8001946:	f004 fa9f 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001950:	f001 f926 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM2_Init+0x94>)
 8001962:	f004 ffc1 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800196c:	f001 f918 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000298 	.word	0x20000298

0800197c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ac:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019ae:	4a3e      	ldr	r2, [pc, #248]	; (8001aa8 <MX_TIM4_Init+0x12c>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019b4:	2253      	movs	r2, #83	; 0x53
 80019b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019d2:	4834      	ldr	r0, [pc, #208]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019d4:	f003 fe34 	bl	8005640 <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80019de:	f001 f8df 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ec:	4619      	mov	r1, r3
 80019ee:	482d      	ldr	r0, [pc, #180]	; (8001aa4 <MX_TIM4_Init+0x128>)
 80019f0:	f004 fa4a 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019fa:	f001 f8d1 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019fe:	4829      	ldr	r0, [pc, #164]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a00:	f003 fe6d 	bl	80056de <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a0a:	f001 f8c9 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4821      	ldr	r0, [pc, #132]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a1e:	f004 ff63 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a28:	f001 f8ba 	bl	8002ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2c:	2360      	movs	r3, #96	; 0x60
 8001a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a44:	f004 f962 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a4e:	f001 f8a7 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2204      	movs	r2, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a5a:	f004 f957 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001a64:	f001 f89c 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a70:	f004 f94c 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001a7a:	f001 f891 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	220c      	movs	r2, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a86:	f004 f941 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001a90:	f001 f886 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <MX_TIM4_Init+0x128>)
 8001a96:	f001 f989 	bl	8002dac <HAL_TIM_MspPostInit>

}
 8001a9a:	bf00      	nop
 8001a9c:	3738      	adds	r7, #56	; 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200000f4 	.word	0x200000f4
 8001aa8:	40000800 	.word	0x40000800

08001aac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001ace:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <MX_TIM12_Init+0xb4>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001ad4:	2253      	movs	r2, #83	; 0x53
 8001ad6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001af2:	481a      	ldr	r0, [pc, #104]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001af4:	f003 fda4 	bl	8005640 <HAL_TIM_Base_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 8001afe:	f001 f84f 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4813      	ldr	r0, [pc, #76]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001b10:	f004 f9ba 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001b1a:	f001 f841 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001b1e:	480f      	ldr	r0, [pc, #60]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001b20:	f003 fefe 	bl	8005920 <HAL_TIM_IC_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001b2a:	f001 f839 	bl	8002ba0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b2e:	230a      	movs	r3, #10
 8001b30:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b3e:	463b      	mov	r3, r7
 8001b40:	2200      	movs	r2, #0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_TIM12_Init+0xb0>)
 8001b46:	f004 f84c 	bl	8005be2 <HAL_TIM_IC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8001b50:	f001 f826 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200002e4 	.word	0x200002e4
 8001b60:	40001800 	.word	0x40001800

08001b64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_USART3_UART_Init+0x50>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART3_UART_Init+0x4c>)
 8001b9c:	f004 ff34 	bl	8006a08 <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ba6:	f000 fffb 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000019c 	.word	0x2000019c
 8001bb4:	40004800 	.word	0x40004800

08001bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_DMA_Init+0x3c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <MX_DMA_Init+0x3c>)
 8001bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_DMA_Init+0x3c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	200c      	movs	r0, #12
 8001be0:	f001 fb85 	bl	80032ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001be4:	200c      	movs	r0, #12
 8001be6:	f001 fb9e 	bl	8003326 <HAL_NVIC_EnableIRQ>

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a2a      	ldr	r2, [pc, #168]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_GPIO_Init+0xe4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, o_led_Pin|r_led_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001c84:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c86:	f002 f875 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c90:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <MX_GPIO_Init+0xec>)
 8001c92:	f002 f86f 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : o_led_Pin r_led_Pin */
  GPIO_InitStruct.Pin = o_led_Pin|r_led_Pin;
 8001c96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001cb0:	f001 fec4 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : trig_Pin */
  GPIO_InitStruct.Pin = trig_Pin;
 8001cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(trig_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_GPIO_Init+0xec>)
 8001cce:	f001 feb5 	bl	8003a3c <HAL_GPIO_Init>

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <ABS>:

/* USER CODE BEGIN 4 */

float ABS(float x){
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 0){
 8001cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	dd02      	ble.n	8001d06 <ABS+0x1e>
		return x;
 8001d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d04:	e003      	b.n	8001d0e <ABS+0x26>
	}
	else{
		return (-x);
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	eef1 7a67 	vneg.f32	s15, s15
	}

}
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <ICM20689_Read>:

HAL_StatusTypeDef ICM20689_Read(uint8_t address, float *acc_x, float *acc_y, float *acc_z, float *temp,
		float *gy_x, float *gy_y, float *gy_z, float gy_cal_x, float gy_cal_y, float gy_cal_z, float acc_cal_x, float acc_cal_y, float acc_cal_z)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b098      	sub	sp, #96	; 0x60
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	6239      	str	r1, [r7, #32]
 8001d28:	61fa      	str	r2, [r7, #28]
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d30:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d34:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d38:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d3c:	ed87 2a01 	vstr	s4, [r7, #4]
 8001d40:	edc7 2a00 	vstr	s5, [r7]
 8001d44:	4603      	mov	r3, r0
 8001d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Bytes to store the incoming gyroscope data
	uint8_t gy_data[6];
	int16_t gy_s_data[3];

	// Reading Accelerometers registers
	ret = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)(address<<1)| 0x01, 0x3B , 1, acc_data, 6, 50);
 8001d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	2332      	movs	r3, #50	; 0x32
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2306      	movs	r3, #6
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	223b      	movs	r2, #59	; 0x3b
 8001d6c:	48be      	ldr	r0, [pc, #760]	; (8002068 <ICM20689_Read+0x348>)
 8001d6e:	f002 fa73 	bl	8004258 <HAL_I2C_Mem_Read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK)
 8001d78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <ICM20689_Read+0x66>
	{
		return ret;
 8001d80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d84:	e164      	b.n	8002050 <ICM20689_Read+0x330>
	}

	ret = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)(address<<1)| 0x01, 0x41 , 1, temp_data, 2, 50);
 8001d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b299      	uxth	r1, r3
 8001d96:	2332      	movs	r3, #50	; 0x32
 8001d98:	9302      	str	r3, [sp, #8]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	2241      	movs	r2, #65	; 0x41
 8001da8:	48af      	ldr	r0, [pc, #700]	; (8002068 <ICM20689_Read+0x348>)
 8001daa:	f002 fa55 	bl	8004258 <HAL_I2C_Mem_Read>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK)
 8001db4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <ICM20689_Read+0xa2>
	{
		return ret;
 8001dbc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dc0:	e146      	b.n	8002050 <ICM20689_Read+0x330>
	}

	ret = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)(address<<1)| 0x01, 0x43 , 1, gy_data, 6, 50);
 8001dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	2332      	movs	r3, #50	; 0x32
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	2243      	movs	r2, #67	; 0x43
 8001de4:	48a0      	ldr	r0, [pc, #640]	; (8002068 <ICM20689_Read+0x348>)
 8001de6:	f002 fa37 	bl	8004258 <HAL_I2C_Mem_Read>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(ret != HAL_OK)
 8001df0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <ICM20689_Read+0xde>
	{
		return ret;
 8001df8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dfc:	e128      	b.n	8002050 <ICM20689_Read+0x330>
	}

	// Shift and combine the 2 accelerometer registers per axis and store them in a signed 16 int
	acc_s_data[0] = (acc_data[0]<<8 | acc_data[1]);
 8001dfe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	87bb      	strh	r3, [r7, #60]	; 0x3c
	acc_s_data[1] = (acc_data[2]<<8 | acc_data[3]);
 8001e12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	87fb      	strh	r3, [r7, #62]	; 0x3e
	acc_s_data[2] = (acc_data[4]<<8 | acc_data[5]);
 8001e26:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	// Normalise the accelerations by the sensitivity/g
	*acc_x =  (acc_s_data[0] / 4096.0) - acc_cal_x;
 8001e3c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb13 	bl	800046c <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <ICM20689_Read+0x34c>)
 8001e4c:	f7fe fca2 	bl	8000794 <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	f7fe fb19 	bl	8000490 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe f9b3 	bl	80001d0 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7fe fe3d 	bl	8000af0 <__aeabi_d2f>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	601a      	str	r2, [r3, #0]
	*acc_y = (acc_s_data[1] / 4096.0) - acc_cal_y;
 8001e7c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe faf3 	bl	800046c <__aeabi_i2d>
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b78      	ldr	r3, [pc, #480]	; (800206c <ICM20689_Read+0x34c>)
 8001e8c:	f7fe fc82 	bl	8000794 <__aeabi_ddiv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe faf9 	bl	8000490 <__aeabi_f2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe f993 	bl	80001d0 <__aeabi_dsub>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fe1d 	bl	8000af0 <__aeabi_d2f>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	601a      	str	r2, [r3, #0]
	*acc_z = (acc_s_data[2] / 4096.0) - acc_cal_z ;
 8001ebc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fad3 	bl	800046c <__aeabi_i2d>
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	4b68      	ldr	r3, [pc, #416]	; (800206c <ICM20689_Read+0x34c>)
 8001ecc:	f7fe fc62 	bl	8000794 <__aeabi_ddiv>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	6838      	ldr	r0, [r7, #0]
 8001eda:	f7fe fad9 	bl	8000490 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe f973 	bl	80001d0 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fdfd 	bl	8000af0 <__aeabi_d2f>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	601a      	str	r2, [r3, #0]

	// Shift and combine the 2 temperature registers and store them in a signed 16 int
	temp_s_data = (temp_data[0]<<8 | temp_data[1]);
 8001efc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Normalise the temperature values
	*temp = ((temp_s_data - 0)/326.8) + 25;
 8001f10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe faa9 	bl	800046c <__aeabi_i2d>
 8001f1a:	a34f      	add	r3, pc, #316	; (adr r3, 8002058 <ICM20689_Read+0x338>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fc38 	bl	8000794 <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <ICM20689_Read+0x350>)
 8001f32:	f7fe f94f 	bl	80001d4 <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fdd7 	bl	8000af0 <__aeabi_d2f>
 8001f42:	4602      	mov	r2, r0
 8001f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f46:	601a      	str	r2, [r3, #0]

	// Shift and combine the 2 gyroscope registers per axis and store them in a signed 16 int
	gy_s_data[0] = (gy_data[0]<<8 | gy_data[1]);
 8001f48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	853b      	strh	r3, [r7, #40]	; 0x28
	gy_s_data[1] = (gy_data[2]<<8 | gy_data[3]);
 8001f5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	857b      	strh	r3, [r7, #42]	; 0x2a
	gy_s_data[2] = (gy_data[4]<<8 | gy_data[5]);
 8001f70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	85bb      	strh	r3, [r7, #44]	; 0x2c

	// Normalise the gyroscope by the sensitivity/g
	*gy_x =  ((gy_s_data[0] /32.8 ) - gy_cal_x);
 8001f84:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fa6f 	bl	800046c <__aeabi_i2d>
 8001f8e:	a334      	add	r3, pc, #208	; (adr r3, 8002060 <ICM20689_Read+0x340>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fbfe 	bl	8000794 <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f7fe fa75 	bl	8000490 <__aeabi_f2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe f90f 	bl	80001d0 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fd99 	bl	8000af0 <__aeabi_d2f>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc2:	601a      	str	r2, [r3, #0]
	*gy_y = ((gy_s_data[1] / 32.8 ) - gy_cal_y);
 8001fc4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa4f 	bl	800046c <__aeabi_i2d>
 8001fce:	a324      	add	r3, pc, #144	; (adr r3, 8002060 <ICM20689_Read+0x340>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fbde 	bl	8000794 <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	461d      	mov	r5, r3
 8001fe0:	6938      	ldr	r0, [r7, #16]
 8001fe2:	f7fe fa55 	bl	8000490 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f8ef 	bl	80001d0 <__aeabi_dsub>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fd79 	bl	8000af0 <__aeabi_d2f>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002002:	601a      	str	r2, [r3, #0]
	*gy_z = ((gy_s_data[2] / 32.8 ) + gy_cal_z) * -1; // Invert Z axis / yaw to match convention (Nose right = positive yaw)
 8002004:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa2f 	bl	800046c <__aeabi_i2d>
 800200e:	a314      	add	r3, pc, #80	; (adr r3, 8002060 <ICM20689_Read+0x340>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fbbe 	bl	8000794 <__aeabi_ddiv>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7fe fa35 	bl	8000490 <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe f8d1 	bl	80001d4 <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fd59 	bl	8000af0 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef1 7a67 	vneg.f32	s15, s15
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	edc3 7a00 	vstr	s15, [r3]


	return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3750      	adds	r7, #80	; 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bdb0      	pop	{r4, r5, r7, pc}
 8002058:	cccccccd 	.word	0xcccccccd
 800205c:	40746ccc 	.word	0x40746ccc
 8002060:	66666666 	.word	0x66666666
 8002064:	40406666 	.word	0x40406666
 8002068:	200001e0 	.word	0x200001e0
 800206c:	40b00000 	.word	0x40b00000
 8002070:	40390000 	.word	0x40390000

08002074 <ICM20689_Config>:

HAL_StatusTypeDef ICM20689_Config(uint8_t address, float *gy_cal_x, float *gy_cal_y, float *gy_cal_z, float *acc_cal_x, float *acc_cal_y, float *acc_cal_z)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b099      	sub	sp, #100	; 0x64
 8002078:	af04      	add	r7, sp, #16
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t config_pwr = 0x81;
 8002084:	2381      	movs	r3, #129	; 0x81
 8002086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t config_pwr1 = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t whoami;
	uint8_t config = 0x10; // configure gyroscope and accelerometer to full scale
 8002090:	2310      	movs	r3, #16
 8002092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t config_lowpass = 0x03;
 8002096:	2303      	movs	r3, #3
 8002098:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t rst = 0x01;
 800209c:	2301      	movs	r3, #1
 800209e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	float t_acc_x, t_acc_y, t_acc_z;
	float t_temp;
	float t_gy_x, t_gy_y, t_gy_z;

	// gyroscope errors
	float gy_er_x = 0, gy_er_y = 0, gy_er_z = 0;
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	643b      	str	r3, [r7, #64]	; 0x40

	// accelerometer errors
	float acc_er_x = 0, acc_er_y = 0, acc_er_z = 0;
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34



	// Soft Reset
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x6B, 1, &config_pwr, 1, 50);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b299      	uxth	r1, r3
 80020ce:	2332      	movs	r3, #50	; 0x32
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2301      	movs	r3, #1
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2301      	movs	r3, #1
 80020de:	226b      	movs	r2, #107	; 0x6b
 80020e0:	48c9      	ldr	r0, [pc, #804]	; (8002408 <ICM20689_Config+0x394>)
 80020e2:	f001 ffbf 	bl	8004064 <HAL_I2C_Mem_Write>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(ret != HAL_OK){
 80020ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <ICM20689_Config+0x86>
		return ret;
 80020f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020f8:	e182      	b.n	8002400 <ICM20689_Config+0x38c>
	}
	HAL_Delay(100);
 80020fa:	2064      	movs	r0, #100	; 0x64
 80020fc:	f000 fff8 	bl	80030f0 <HAL_Delay>

	// Wake up
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x6B, 1, &config_pwr1, 1, 50);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	b29b      	uxth	r3, r3
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	b299      	uxth	r1, r3
 8002108:	2332      	movs	r3, #50	; 0x32
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	226b      	movs	r2, #107	; 0x6b
 800211a:	48bb      	ldr	r0, [pc, #748]	; (8002408 <ICM20689_Config+0x394>)
 800211c:	f001 ffa2 	bl	8004064 <HAL_I2C_Mem_Write>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(ret != HAL_OK){
 8002126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <ICM20689_Config+0xc0>
		return ret;
 800212e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002132:	e165      	b.n	8002400 <ICM20689_Config+0x38c>
	}
	HAL_Delay(100);
 8002134:	2064      	movs	r0, #100	; 0x64
 8002136:	f000 ffdb 	bl	80030f0 <HAL_Delay>

	// Check to see if icm20689 is responding correctly
	ret = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)(address<<1)|  0x01 , 0x75, 1, &whoami, 1, 50);
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	b29b      	uxth	r3, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b29b      	uxth	r3, r3
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	b299      	uxth	r1, r3
 8002148:	2332      	movs	r3, #50	; 0x32
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	2301      	movs	r3, #1
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2301      	movs	r3, #1
 8002158:	2275      	movs	r2, #117	; 0x75
 800215a:	48ab      	ldr	r0, [pc, #684]	; (8002408 <ICM20689_Config+0x394>)
 800215c:	f002 f87c 	bl	8004258 <HAL_I2C_Mem_Read>
 8002160:	4603      	mov	r3, r0
 8002162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(ret != HAL_OK){
 8002166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <ICM20689_Config+0x100>
		return ret;
 800216e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002172:	e145      	b.n	8002400 <ICM20689_Config+0x38c>
	}
	if(whoami == 0x98){
 8002174:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002178:	2b98      	cmp	r3, #152	; 0x98
 800217a:	d10d      	bne.n	8002198 <ICM20689_Config+0x124>
		HAL_GPIO_TogglePin(GPIOC, r_led_Pin);
 800217c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002180:	48a2      	ldr	r0, [pc, #648]	; (800240c <ICM20689_Config+0x398>)
 8002182:	f001 fe10 	bl	8003da6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800218a:	f000 ffb1 	bl	80030f0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, r_led_Pin);
 800218e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002192:	489e      	ldr	r0, [pc, #632]	; (800240c <ICM20689_Config+0x398>)
 8002194:	f001 fe07 	bl	8003da6 <HAL_GPIO_TogglePin>
	}

	// Configure the accelerometer
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x1C, 1, &config, 1, 50);
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	b29b      	uxth	r3, r3
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	b299      	uxth	r1, r3
 80021a0:	2332      	movs	r3, #50	; 0x32
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	2301      	movs	r3, #1
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	221c      	movs	r2, #28
 80021b2:	4895      	ldr	r0, [pc, #596]	; (8002408 <ICM20689_Config+0x394>)
 80021b4:	f001 ff56 	bl	8004064 <HAL_I2C_Mem_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(ret != HAL_OK){
 80021be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <ICM20689_Config+0x158>
		return ret;
 80021c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ca:	e119      	b.n	8002400 <ICM20689_Config+0x38c>
	}

	// Configure the accelerometer Filter
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x1D, 1, &config_lowpass, 1, 50);
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	b299      	uxth	r1, r3
 80021d4:	2332      	movs	r3, #50	; 0x32
 80021d6:	9302      	str	r3, [sp, #8]
 80021d8:	2301      	movs	r3, #1
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	221d      	movs	r2, #29
 80021e6:	4888      	ldr	r0, [pc, #544]	; (8002408 <ICM20689_Config+0x394>)
 80021e8:	f001 ff3c 	bl	8004064 <HAL_I2C_Mem_Write>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if(ret != HAL_OK){
 80021f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <ICM20689_Config+0x18c>
				return ret;
 80021fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021fe:	e0ff      	b.n	8002400 <ICM20689_Config+0x38c>
				}

	// Configure the gyroscope
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x1B, 1, &config, 1, 50);
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	b29b      	uxth	r3, r3
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	b299      	uxth	r1, r3
 8002208:	2332      	movs	r3, #50	; 0x32
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	2301      	movs	r3, #1
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	221b      	movs	r2, #27
 800221a:	487b      	ldr	r0, [pc, #492]	; (8002408 <ICM20689_Config+0x394>)
 800221c:	f001 ff22 	bl	8004064 <HAL_I2C_Mem_Write>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(ret != HAL_OK){
 8002226:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <ICM20689_Config+0x1c0>
			return ret;
 800222e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002232:	e0e5      	b.n	8002400 <ICM20689_Config+0x38c>
		}

	// Configure the gyroscope Filter
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x1A, 1, &config_lowpass, 1, 50);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	b29b      	uxth	r3, r3
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b299      	uxth	r1, r3
 800223c:	2332      	movs	r3, #50	; 0x32
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	221a      	movs	r2, #26
 800224e:	486e      	ldr	r0, [pc, #440]	; (8002408 <ICM20689_Config+0x394>)
 8002250:	f001 ff08 	bl	8004064 <HAL_I2C_Mem_Write>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(ret != HAL_OK){
 800225a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <ICM20689_Config+0x1f4>
		return ret;
 8002262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002266:	e0cb      	b.n	8002400 <ICM20689_Config+0x38c>
		}

	// Reset gyroscope and accelerometer registers
	ret = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(address<<1), 0x6A, 1, &rst, 1, 50);
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	b29b      	uxth	r3, r3
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	b299      	uxth	r1, r3
 8002270:	2332      	movs	r3, #50	; 0x32
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	2301      	movs	r3, #1
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	226a      	movs	r2, #106	; 0x6a
 8002282:	4861      	ldr	r0, [pc, #388]	; (8002408 <ICM20689_Config+0x394>)
 8002284:	f001 feee 	bl	8004064 <HAL_I2C_Mem_Write>
 8002288:	4603      	mov	r3, r0
 800228a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(ret != HAL_OK){
 800228e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <ICM20689_Config+0x228>
		return ret;
 8002296:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800229a:	e0b1      	b.n	8002400 <ICM20689_Config+0x38c>
		}


	for (i=0; i < 2000; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80022a2:	e06d      	b.n	8002380 <ICM20689_Config+0x30c>
	{
		ICM20689_Read(address, &t_acc_x, &t_acc_y, &t_acc_z, &t_temp, &t_gy_x, &t_gy_y, &t_gy_z, 0, 0, 0, 0, 0, 0);
 80022a4:	f107 0420 	add.w	r4, r7, #32
 80022a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022b0:	7bf8      	ldrb	r0, [r7, #15]
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	eddf 2a51 	vldr	s5, [pc, #324]	; 8002410 <ICM20689_Config+0x39c>
 80022ce:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8002410 <ICM20689_Config+0x39c>
 80022d2:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8002410 <ICM20689_Config+0x39c>
 80022d6:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8002410 <ICM20689_Config+0x39c>
 80022da:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8002410 <ICM20689_Config+0x39c>
 80022de:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002410 <ICM20689_Config+0x39c>
 80022e2:	4623      	mov	r3, r4
 80022e4:	f7ff fd1c 	bl	8001d20 <ICM20689_Read>
		gy_er_x += t_gy_x;
 80022e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ec:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80022f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		gy_er_y += t_gy_y;
 80022f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002304:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		gy_er_z += t_gy_z;
 8002308:	edd7 7a04 	vldr	s15, [r7, #16]
 800230c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002314:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		acc_er_x += t_acc_x;
 8002318:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800231c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002324:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		acc_er_y += t_acc_y;
 8002328:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800232c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002334:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		acc_er_z += t_acc_z;
 8002338:	edd7 7a08 	vldr	s15, [r7, #32]
 800233c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		HAL_Delay(4);
 8002348:	2004      	movs	r0, #4
 800234a:	f000 fed1 	bl	80030f0 <HAL_Delay>
		if (i % 125 == 0){
 800234e:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <ICM20689_Config+0x3a0>)
 8002354:	fba3 2301 	umull	r2, r3, r3, r1
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	4613      	mov	r3, r2
 800235c:	015b      	lsls	r3, r3, #5
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	1acb      	subs	r3, r1, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <ICM20689_Config+0x302>
			HAL_GPIO_TogglePin(GPIOC, o_led_Pin);
 800236c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002370:	4826      	ldr	r0, [pc, #152]	; (800240c <ICM20689_Config+0x398>)
 8002372:	f001 fd18 	bl	8003da6 <HAL_GPIO_TogglePin>
	for (i=0; i < 2000; i++)
 8002376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800237a:	3301      	adds	r3, #1
 800237c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002380:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002384:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002388:	d38c      	bcc.n	80022a4 <ICM20689_Config+0x230>
		}
	}
	// store average calibration;
	*gy_cal_x = gy_er_x / 2000;
 800238a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800238e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002418 <ICM20689_Config+0x3a4>
 8002392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	edc3 7a00 	vstr	s15, [r3]
	*gy_cal_y = gy_er_y / 2000;
 800239c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80023a0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002418 <ICM20689_Config+0x3a4>
 80023a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edc3 7a00 	vstr	s15, [r3]
	*gy_cal_z = gy_er_z / 2000;
 80023ae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80023b2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002418 <ICM20689_Config+0x3a4>
 80023b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	edc3 7a00 	vstr	s15, [r3]
	*acc_cal_x = acc_er_x / 2000;
 80023c0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80023c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002418 <ICM20689_Config+0x3a4>
 80023c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ce:	edc3 7a00 	vstr	s15, [r3]
	*acc_cal_y = acc_er_y / 2000;
 80023d2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80023d6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002418 <ICM20689_Config+0x3a4>
 80023da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023e0:	edc3 7a00 	vstr	s15, [r3]
	*acc_cal_z = (acc_er_z - 2000) / 2000;
 80023e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023e8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002418 <ICM20689_Config+0x3a4>
 80023ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023f0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002418 <ICM20689_Config+0x3a4>
 80023f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023fa:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 80023fe:	2300      	movs	r3, #0

}
 8002400:	4618      	mov	r0, r3
 8002402:	3754      	adds	r7, #84	; 0x54
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	200001e0 	.word	0x200001e0
 800240c:	40020800 	.word	0x40020800
 8002410:	00000000 	.word	0x00000000
 8002414:	10624dd3 	.word	0x10624dd3
 8002418:	44fa0000 	.word	0x44fa0000

0800241c <Update_Motors>:

void Update_Motors(){
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
	// Variable to store throttle value
	uint16_t throttle = channel[2];
 8002422:	4b6c      	ldr	r3, [pc, #432]	; (80025d4 <Update_Motors+0x1b8>)
 8002424:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002428:	80fb      	strh	r3, [r7, #6]

	if (throttle > 1800){throttle = 1800;} //limit max throttle to allow for some room for the PIDs to still correct.
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002430:	d902      	bls.n	8002438 <Update_Motors+0x1c>
 8002432:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002436:	80fb      	strh	r3, [r7, #6]
	// ESC4 | CCR4 | Rear Left   | CW
	// Channel[2] = Throttle

	// test difference between ESC variables being floats and ints

	esc_1 = throttle - pid_output_pitch + pid_output_roll + pid_output_yaw;
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002442:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <Update_Motors+0x1bc>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800244c:	4b63      	ldr	r3, [pc, #396]	; (80025dc <Update_Motors+0x1c0>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002456:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <Update_Motors+0x1c4>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002464:	ee17 3a90 	vmov	r3, s15
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <Update_Motors+0x1c8>)
 800246c:	801a      	strh	r2, [r3, #0]
	esc_2 = throttle + pid_output_pitch + pid_output_roll - pid_output_yaw;
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002478:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <Update_Motors+0x1bc>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <Update_Motors+0x1c0>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248c:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <Update_Motors+0x1c4>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249a:	ee17 3a90 	vmov	r3, s15
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <Update_Motors+0x1cc>)
 80024a2:	801a      	strh	r2, [r3, #0]
	esc_3 = throttle - pid_output_pitch - pid_output_roll - pid_output_yaw;
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <Update_Motors+0x1bc>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <Update_Motors+0x1c0>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <Update_Motors+0x1c4>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d0:	ee17 3a90 	vmov	r3, s15
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	4b45      	ldr	r3, [pc, #276]	; (80025ec <Update_Motors+0x1d0>)
 80024d8:	801a      	strh	r2, [r3, #0]
	esc_4 = throttle + pid_output_pitch - pid_output_roll + pid_output_yaw;
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <Update_Motors+0x1bc>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <Update_Motors+0x1c0>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <Update_Motors+0x1c4>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002506:	ee17 3a90 	vmov	r3, s15
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <Update_Motors+0x1d4>)
 800250e:	801a      	strh	r2, [r3, #0]

	if (esc_1 > 2000){esc_1 = 2000;}
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <Update_Motors+0x1c8>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002518:	d903      	bls.n	8002522 <Update_Motors+0x106>
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <Update_Motors+0x1c8>)
 800251c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002520:	801a      	strh	r2, [r3, #0]
	if (esc_1 < motor_idle){esc_1 = motor_idle;}
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <Update_Motors+0x1c8>)
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <Update_Motors+0x1d8>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d203      	bcs.n	8002536 <Update_Motors+0x11a>
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <Update_Motors+0x1d8>)
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <Update_Motors+0x1c8>)
 8002534:	801a      	strh	r2, [r3, #0]

	if (esc_2 > 2000){esc_2 = 2000;}
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <Update_Motors+0x1cc>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800253e:	d903      	bls.n	8002548 <Update_Motors+0x12c>
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <Update_Motors+0x1cc>)
 8002542:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002546:	801a      	strh	r2, [r3, #0]
	if (esc_2 < motor_idle){esc_2 = motor_idle;}
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <Update_Motors+0x1cc>)
 800254a:	881a      	ldrh	r2, [r3, #0]
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <Update_Motors+0x1d8>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d203      	bcs.n	800255c <Update_Motors+0x140>
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <Update_Motors+0x1d8>)
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <Update_Motors+0x1cc>)
 800255a:	801a      	strh	r2, [r3, #0]

	if (esc_3 > 2000){esc_3 = 2000;}
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <Update_Motors+0x1d0>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002564:	d903      	bls.n	800256e <Update_Motors+0x152>
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <Update_Motors+0x1d0>)
 8002568:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800256c:	801a      	strh	r2, [r3, #0]
	if (esc_3 < motor_idle){esc_3 = motor_idle;}
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <Update_Motors+0x1d0>)
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <Update_Motors+0x1d8>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d203      	bcs.n	8002582 <Update_Motors+0x166>
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <Update_Motors+0x1d8>)
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <Update_Motors+0x1d0>)
 8002580:	801a      	strh	r2, [r3, #0]

	if (esc_4 > 2000){esc_4 = 2000;}
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <Update_Motors+0x1d4>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800258a:	d903      	bls.n	8002594 <Update_Motors+0x178>
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <Update_Motors+0x1d4>)
 800258e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002592:	801a      	strh	r2, [r3, #0]
	if (esc_4 < motor_idle){esc_4 = motor_idle;}
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <Update_Motors+0x1d4>)
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <Update_Motors+0x1d8>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d203      	bcs.n	80025a8 <Update_Motors+0x18c>
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <Update_Motors+0x1d8>)
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <Update_Motors+0x1d4>)
 80025a6:	801a      	strh	r2, [r3, #0]

	TIM4->CCR1 = esc_1;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <Update_Motors+0x1c8>)
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <Update_Motors+0x1dc>)
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = esc_2;
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <Update_Motors+0x1cc>)
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <Update_Motors+0x1dc>)
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = esc_3;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <Update_Motors+0x1d0>)
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <Update_Motors+0x1dc>)
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = esc_4;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <Update_Motors+0x1d4>)
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <Update_Motors+0x1dc>)
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40


}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	20000238 	.word	0x20000238
 80025d8:	200000cc 	.word	0x200000cc
 80025dc:	200000b4 	.word	0x200000b4
 80025e0:	200000e8 	.word	0x200000e8
 80025e4:	20000236 	.word	0x20000236
 80025e8:	20000234 	.word	0x20000234
 80025ec:	20000294 	.word	0x20000294
 80025f0:	200002e0 	.word	0x200002e0
 80025f4:	20000014 	.word	0x20000014
 80025f8:	40000800 	.word	0x40000800

080025fc <Calculate_PIDs>:

void Calculate_PIDs(){
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0

	//Roll - Y - Channel[0]
	float temp_err = 0;
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
	temp_err = pid_gy_roll - pid_setpoint_roll;
 8002608:	4bc5      	ldr	r3, [pc, #788]	; (8002920 <Calculate_PIDs+0x324>)
 800260a:	ed93 7a00 	vldr	s14, [r3]
 800260e:	4bc5      	ldr	r3, [pc, #788]	; (8002924 <Calculate_PIDs+0x328>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002618:	edc7 7a01 	vstr	s15, [r7, #4]
	pid_integ_roll += pid_i_roll * temp_err;
 800261c:	4bc2      	ldr	r3, [pc, #776]	; (8002928 <Calculate_PIDs+0x32c>)
 800261e:	ed93 7a00 	vldr	s14, [r3]
 8002622:	edd7 7a01 	vldr	s15, [r7, #4]
 8002626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262a:	4bc0      	ldr	r3, [pc, #768]	; (800292c <Calculate_PIDs+0x330>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	4bbd      	ldr	r3, [pc, #756]	; (800292c <Calculate_PIDs+0x330>)
 8002636:	edc3 7a00 	vstr	s15, [r3]
	if (pid_integ_roll > max_rotate){pid_integ_roll = max_rotate;}
 800263a:	4bbc      	ldr	r3, [pc, #752]	; (800292c <Calculate_PIDs+0x330>)
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	4bbb      	ldr	r3, [pc, #748]	; (8002930 <Calculate_PIDs+0x334>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	dd03      	ble.n	8002658 <Calculate_PIDs+0x5c>
 8002650:	4bb7      	ldr	r3, [pc, #732]	; (8002930 <Calculate_PIDs+0x334>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4ab5      	ldr	r2, [pc, #724]	; (800292c <Calculate_PIDs+0x330>)
 8002656:	6013      	str	r3, [r2, #0]
	if (pid_integ_roll < (max_rotate*-1)){pid_integ_roll = (max_rotate*-1);}
 8002658:	4bb5      	ldr	r3, [pc, #724]	; (8002930 <Calculate_PIDs+0x334>)
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	eeb1 7a67 	vneg.f32	s14, s15
 8002662:	4bb2      	ldr	r3, [pc, #712]	; (800292c <Calculate_PIDs+0x330>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	dd07      	ble.n	8002682 <Calculate_PIDs+0x86>
 8002672:	4baf      	ldr	r3, [pc, #700]	; (8002930 <Calculate_PIDs+0x334>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	eef1 7a67 	vneg.f32	s15, s15
 800267c:	4bab      	ldr	r3, [pc, #684]	; (800292c <Calculate_PIDs+0x330>)
 800267e:	edc3 7a00 	vstr	s15, [r3]

	pid_output_roll = (pid_p_roll * temp_err) + (pid_integ_roll) + (pid_d_roll * (temp_err - pid_prev_err_roll));
 8002682:	4bac      	ldr	r3, [pc, #688]	; (8002934 <Calculate_PIDs+0x338>)
 8002684:	ed93 7a00 	vldr	s14, [r3]
 8002688:	edd7 7a01 	vldr	s15, [r7, #4]
 800268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002690:	4ba6      	ldr	r3, [pc, #664]	; (800292c <Calculate_PIDs+0x330>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	4ba7      	ldr	r3, [pc, #668]	; (8002938 <Calculate_PIDs+0x33c>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80026a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026a8:	4ba4      	ldr	r3, [pc, #656]	; (800293c <Calculate_PIDs+0x340>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b6:	4ba2      	ldr	r3, [pc, #648]	; (8002940 <Calculate_PIDs+0x344>)
 80026b8:	edc3 7a00 	vstr	s15, [r3]
	if (pid_output_roll > max_rotate){pid_output_roll = max_rotate;}
 80026bc:	4ba0      	ldr	r3, [pc, #640]	; (8002940 <Calculate_PIDs+0x344>)
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	4b9b      	ldr	r3, [pc, #620]	; (8002930 <Calculate_PIDs+0x334>)
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	dd03      	ble.n	80026da <Calculate_PIDs+0xde>
 80026d2:	4b97      	ldr	r3, [pc, #604]	; (8002930 <Calculate_PIDs+0x334>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a9a      	ldr	r2, [pc, #616]	; (8002940 <Calculate_PIDs+0x344>)
 80026d8:	6013      	str	r3, [r2, #0]
	if (pid_output_roll < (max_rotate*-1)){pid_output_roll = (max_rotate*-1);}
 80026da:	4b95      	ldr	r3, [pc, #596]	; (8002930 <Calculate_PIDs+0x334>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	eeb1 7a67 	vneg.f32	s14, s15
 80026e4:	4b96      	ldr	r3, [pc, #600]	; (8002940 <Calculate_PIDs+0x344>)
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f2:	dd07      	ble.n	8002704 <Calculate_PIDs+0x108>
 80026f4:	4b8e      	ldr	r3, [pc, #568]	; (8002930 <Calculate_PIDs+0x334>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eef1 7a67 	vneg.f32	s15, s15
 80026fe:	4b90      	ldr	r3, [pc, #576]	; (8002940 <Calculate_PIDs+0x344>)
 8002700:	edc3 7a00 	vstr	s15, [r3]

	pid_prev_err_roll = temp_err;
 8002704:	4a8c      	ldr	r2, [pc, #560]	; (8002938 <Calculate_PIDs+0x33c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]

	//Pitch - X - Channel[1]
	temp_err = 0;
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
	temp_err = pid_gy_pitch - pid_setpoint_pitch;
 8002710:	4b8c      	ldr	r3, [pc, #560]	; (8002944 <Calculate_PIDs+0x348>)
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <Calculate_PIDs+0x34c>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002720:	edc7 7a01 	vstr	s15, [r7, #4]
	pid_integ_pitch += pid_i_roll * temp_err;
 8002724:	4b80      	ldr	r3, [pc, #512]	; (8002928 <Calculate_PIDs+0x32c>)
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002732:	4b86      	ldr	r3, [pc, #536]	; (800294c <Calculate_PIDs+0x350>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	4b83      	ldr	r3, [pc, #524]	; (800294c <Calculate_PIDs+0x350>)
 800273e:	edc3 7a00 	vstr	s15, [r3]
	if (pid_integ_pitch > max_rotate){pid_integ_pitch = max_rotate;}
 8002742:	4b82      	ldr	r3, [pc, #520]	; (800294c <Calculate_PIDs+0x350>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	4b79      	ldr	r3, [pc, #484]	; (8002930 <Calculate_PIDs+0x334>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	dd03      	ble.n	8002760 <Calculate_PIDs+0x164>
 8002758:	4b75      	ldr	r3, [pc, #468]	; (8002930 <Calculate_PIDs+0x334>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a7b      	ldr	r2, [pc, #492]	; (800294c <Calculate_PIDs+0x350>)
 800275e:	6013      	str	r3, [r2, #0]
	if (pid_integ_pitch < (max_rotate*-1)){pid_integ_pitch = (max_rotate*-1);}
 8002760:	4b73      	ldr	r3, [pc, #460]	; (8002930 <Calculate_PIDs+0x334>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eeb1 7a67 	vneg.f32	s14, s15
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <Calculate_PIDs+0x350>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	dd07      	ble.n	800278a <Calculate_PIDs+0x18e>
 800277a:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <Calculate_PIDs+0x334>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	eef1 7a67 	vneg.f32	s15, s15
 8002784:	4b71      	ldr	r3, [pc, #452]	; (800294c <Calculate_PIDs+0x350>)
 8002786:	edc3 7a00 	vstr	s15, [r3]

	pid_output_pitch = (pid_p_roll * temp_err) + (pid_integ_pitch) + (pid_d_roll * (temp_err - pid_prev_err_pitch));
 800278a:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <Calculate_PIDs+0x338>)
 800278c:	ed93 7a00 	vldr	s14, [r3]
 8002790:	edd7 7a01 	vldr	s15, [r7, #4]
 8002794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002798:	4b6c      	ldr	r3, [pc, #432]	; (800294c <Calculate_PIDs+0x350>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a2:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <Calculate_PIDs+0x354>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80027ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027b0:	4b62      	ldr	r3, [pc, #392]	; (800293c <Calculate_PIDs+0x340>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027be:	4b65      	ldr	r3, [pc, #404]	; (8002954 <Calculate_PIDs+0x358>)
 80027c0:	edc3 7a00 	vstr	s15, [r3]
	if (pid_output_pitch > max_rotate){pid_output_pitch = max_rotate;}
 80027c4:	4b63      	ldr	r3, [pc, #396]	; (8002954 <Calculate_PIDs+0x358>)
 80027c6:	ed93 7a00 	vldr	s14, [r3]
 80027ca:	4b59      	ldr	r3, [pc, #356]	; (8002930 <Calculate_PIDs+0x334>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	dd03      	ble.n	80027e2 <Calculate_PIDs+0x1e6>
 80027da:	4b55      	ldr	r3, [pc, #340]	; (8002930 <Calculate_PIDs+0x334>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <Calculate_PIDs+0x358>)
 80027e0:	6013      	str	r3, [r2, #0]
	if (pid_output_pitch < (max_rotate*-1)){pid_output_pitch = (max_rotate*-1);}
 80027e2:	4b53      	ldr	r3, [pc, #332]	; (8002930 <Calculate_PIDs+0x334>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	eeb1 7a67 	vneg.f32	s14, s15
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <Calculate_PIDs+0x358>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	dd07      	ble.n	800280c <Calculate_PIDs+0x210>
 80027fc:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <Calculate_PIDs+0x334>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	eef1 7a67 	vneg.f32	s15, s15
 8002806:	4b53      	ldr	r3, [pc, #332]	; (8002954 <Calculate_PIDs+0x358>)
 8002808:	edc3 7a00 	vstr	s15, [r3]

	pid_prev_err_pitch = temp_err;
 800280c:	4a50      	ldr	r2, [pc, #320]	; (8002950 <Calculate_PIDs+0x354>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]

	//Yaw - Z - Channel[3]
	temp_err = 0;
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
	temp_err = pid_gy_yaw - pid_setpoint_yaw;
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <Calculate_PIDs+0x35c>)
 800281a:	ed93 7a00 	vldr	s14, [r3]
 800281e:	4b4f      	ldr	r3, [pc, #316]	; (800295c <Calculate_PIDs+0x360>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002828:	edc7 7a01 	vstr	s15, [r7, #4]
	pid_integ_yaw += pid_i_yaw * temp_err;
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <Calculate_PIDs+0x364>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	edd7 7a01 	vldr	s15, [r7, #4]
 8002836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283a:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <Calculate_PIDs+0x368>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002844:	4b47      	ldr	r3, [pc, #284]	; (8002964 <Calculate_PIDs+0x368>)
 8002846:	edc3 7a00 	vstr	s15, [r3]
	if (pid_integ_yaw > max_rotate){pid_integ_yaw = max_rotate;}
 800284a:	4b46      	ldr	r3, [pc, #280]	; (8002964 <Calculate_PIDs+0x368>)
 800284c:	ed93 7a00 	vldr	s14, [r3]
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <Calculate_PIDs+0x334>)
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	dd03      	ble.n	8002868 <Calculate_PIDs+0x26c>
 8002860:	4b33      	ldr	r3, [pc, #204]	; (8002930 <Calculate_PIDs+0x334>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3f      	ldr	r2, [pc, #252]	; (8002964 <Calculate_PIDs+0x368>)
 8002866:	6013      	str	r3, [r2, #0]
	if (pid_integ_yaw < (max_rotate*-1)){pid_integ_yaw = (max_rotate*-1);}
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <Calculate_PIDs+0x334>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	eeb1 7a67 	vneg.f32	s14, s15
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <Calculate_PIDs+0x368>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002880:	dd07      	ble.n	8002892 <Calculate_PIDs+0x296>
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <Calculate_PIDs+0x334>)
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	eef1 7a67 	vneg.f32	s15, s15
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <Calculate_PIDs+0x368>)
 800288e:	edc3 7a00 	vstr	s15, [r3]

	pid_output_yaw = (pid_p_yaw * temp_err) + (pid_integ_yaw) + (pid_d_yaw * (temp_err - pid_prev_err_yaw));
 8002892:	4b35      	ldr	r3, [pc, #212]	; (8002968 <Calculate_PIDs+0x36c>)
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	edd7 7a01 	vldr	s15, [r7, #4]
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <Calculate_PIDs+0x368>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <Calculate_PIDs+0x370>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	edd7 6a01 	vldr	s13, [r7, #4]
 80028b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <Calculate_PIDs+0x374>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <Calculate_PIDs+0x378>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]
	if (pid_output_yaw > max_rotate){pid_output_yaw = max_rotate;}
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <Calculate_PIDs+0x378>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <Calculate_PIDs+0x334>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd03      	ble.n	80028ea <Calculate_PIDs+0x2ee>
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <Calculate_PIDs+0x334>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a23      	ldr	r2, [pc, #140]	; (8002974 <Calculate_PIDs+0x378>)
 80028e8:	6013      	str	r3, [r2, #0]
	if (pid_output_yaw < (max_rotate*-1)){pid_output_yaw = (max_rotate*-1);}
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <Calculate_PIDs+0x334>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eeb1 7a67 	vneg.f32	s14, s15
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <Calculate_PIDs+0x378>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	dd07      	ble.n	8002914 <Calculate_PIDs+0x318>
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <Calculate_PIDs+0x334>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	eef1 7a67 	vneg.f32	s15, s15
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <Calculate_PIDs+0x378>)
 8002910:	edc3 7a00 	vstr	s15, [r3]

	pid_prev_err_yaw = temp_err;
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <Calculate_PIDs+0x370>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	e02b      	b.n	8002978 <Calculate_PIDs+0x37c>
 8002920:	200000ac 	.word	0x200000ac
 8002924:	200000b0 	.word	0x200000b0
 8002928:	200000a8 	.word	0x200000a8
 800292c:	200000bc 	.word	0x200000bc
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004
 8002938:	200000b8 	.word	0x200000b8
 800293c:	20000008 	.word	0x20000008
 8002940:	200000b4 	.word	0x200000b4
 8002944:	200000c4 	.word	0x200000c4
 8002948:	200000c8 	.word	0x200000c8
 800294c:	200000d4 	.word	0x200000d4
 8002950:	200000d0 	.word	0x200000d0
 8002954:	200000cc 	.word	0x200000cc
 8002958:	200000e0 	.word	0x200000e0
 800295c:	200000e4 	.word	0x200000e4
 8002960:	20000010 	.word	0x20000010
 8002964:	200000f0 	.word	0x200000f0
 8002968:	2000000c 	.word	0x2000000c
 800296c:	200000ec 	.word	0x200000ec
 8002970:	200000dc 	.word	0x200000dc
 8002974:	200000e8 	.word	0x200000e8
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <Calculate_SetPoints>:

void Calculate_SetPoints(){
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

	//Roll - Y - Channel[0]
	if (channel[0] != 0){
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d03f      	beq.n	8002a0e <Calculate_SetPoints+0x8e>
		pid_setpoint_roll = 0;
 800298e:	4b60      	ldr	r3, [pc, #384]	; (8002b10 <Calculate_SetPoints+0x190>)
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
		if (channel[0] > 1505){pid_setpoint_roll = (channel[0] - 1505)/3;} 	// max 495
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299c:	f240 52e1 	movw	r2, #1505	; 0x5e1
 80029a0:	4293      	cmp	r3, r2
 80029a2:	dd10      	ble.n	80029c6 <Calculate_SetPoints+0x46>
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <Calculate_SetPoints+0x18c>)
 80029a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029aa:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 80029ae:	4a59      	ldr	r2, [pc, #356]	; (8002b14 <Calculate_SetPoints+0x194>)
 80029b0:	fb82 1203 	smull	r1, r2, r2, r3
 80029b4:	17db      	asrs	r3, r3, #31
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <Calculate_SetPoints+0x190>)
 80029c2:	edc3 7a00 	vstr	s15, [r3]
		if (channel[0] < 1495){pid_setpoint_roll = (channel[0] - 1495)/3;} 	// max -495
 80029c6:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <Calculate_SetPoints+0x18c>)
 80029c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029cc:	f240 52d6 	movw	r2, #1494	; 0x5d6
 80029d0:	4293      	cmp	r3, r2
 80029d2:	dc10      	bgt.n	80029f6 <Calculate_SetPoints+0x76>
 80029d4:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <Calculate_SetPoints+0x18c>)
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 80029de:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <Calculate_SetPoints+0x194>)
 80029e0:	fb82 1203 	smull	r1, r2, r2, r3
 80029e4:	17db      	asrs	r3, r3, #31
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f0:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <Calculate_SetPoints+0x190>)
 80029f2:	edc3 7a00 	vstr	s15, [r3]
		pid_setpoint_roll -= (roll_al);										// Max angular rate of 247
 80029f6:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <Calculate_SetPoints+0x190>)
 80029f8:	ed93 7a00 	vldr	s14, [r3]
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <Calculate_SetPoints+0x198>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <Calculate_SetPoints+0x190>)
 8002a08:	edc3 7a00 	vstr	s15, [r3]
 8002a0c:	e003      	b.n	8002a16 <Calculate_SetPoints+0x96>
	}
	else {
		pid_setpoint_roll = 0;
 8002a0e:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <Calculate_SetPoints+0x190>)
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
	}

	//Pitch - X - Channel[1]
	if (channel[1] != 0){
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d032      	beq.n	8002a86 <Calculate_SetPoints+0x106>
		if (channel[1] > 1505){pid_setpoint_pitch = (1505 - channel[1])/3;} // max 495
 8002a20:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a26:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	dd11      	ble.n	8002a52 <Calculate_SetPoints+0xd2>
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a34:	f5c3 63bc 	rsb	r3, r3, #1504	; 0x5e0
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <Calculate_SetPoints+0x194>)
 8002a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a40:	17db      	asrs	r3, r3, #31
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <Calculate_SetPoints+0x19c>)
 8002a4e:	edc3 7a00 	vstr	s15, [r3]
		if (channel[1] < 1495){pid_setpoint_pitch = (1495 - channel[1])/3;} // max -495
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a58:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	dc16      	bgt.n	8002a8e <Calculate_SetPoints+0x10e>
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a66:	f5c3 63ba 	rsb	r3, r3, #1488	; 0x5d0
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <Calculate_SetPoints+0x194>)
 8002a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a72:	17db      	asrs	r3, r3, #31
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7e:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <Calculate_SetPoints+0x19c>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
 8002a84:	e003      	b.n	8002a8e <Calculate_SetPoints+0x10e>
		//pid_setpoint_pitch += pitch_al;									// Max angular rate of 247
	}
	else{
		pid_setpoint_pitch = 0;
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <Calculate_SetPoints+0x19c>)
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
	}
	//Yaw - Z - Channel[3]
	if (channel[3] != 0){
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d030      	beq.n	8002afa <Calculate_SetPoints+0x17a>
		if (channel[3] > 1505){pid_setpoint_yaw = (channel[3] - 1505)/3;} // max 495
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002a9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a9e:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	dd10      	ble.n	8002ac8 <Calculate_SetPoints+0x148>
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002aa8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002aac:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8002ab0:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <Calculate_SetPoints+0x194>)
 8002ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab6:	17db      	asrs	r3, r3, #31
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <Calculate_SetPoints+0x1a0>)
 8002ac4:	edc3 7a00 	vstr	s15, [r3]
		if (channel[3] < 1495){pid_setpoint_yaw = (channel[3] - 1495)/3;} // max -495
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002aca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ace:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	dc15      	bgt.n	8002b02 <Calculate_SetPoints+0x182>
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <Calculate_SetPoints+0x18c>)
 8002ad8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002adc:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8002ae0:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <Calculate_SetPoints+0x194>)
 8002ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae6:	17db      	asrs	r3, r3, #31
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <Calculate_SetPoints+0x1a0>)
 8002af4:	edc3 7a00 	vstr	s15, [r3]
		// Max angular rate of 247
	}
	else{
		pid_setpoint_yaw = 0;
	}
}
 8002af8:	e003      	b.n	8002b02 <Calculate_SetPoints+0x182>
		pid_setpoint_yaw = 0;
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <Calculate_SetPoints+0x1a0>)
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20000238 	.word	0x20000238
 8002b10:	200000b0 	.word	0x200000b0
 8002b14:	55555556 	.word	0x55555556
 8002b18:	200000c0 	.word	0x200000c0
 8002b1c:	200000c8 	.word	0x200000c8
 8002b20:	200000e4 	.word	0x200000e4

08002b24 <HAL_UART_RxCpltCallback>:
		capture_num = 0;
		sr_rdy_flg = 1;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = huart3->pRxBuffPtr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	613b      	str	r3, [r7, #16]
	uint8_t *ptrl;
	if (*ptr == 0x20){
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d12a      	bne.n	8002b90 <HAL_UART_RxCpltCallback+0x6c>
		ptr += 2;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]
		ptrl = ptr+1;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
		for (int8_t i  = 0; i < 10; i++){
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
 8002b4a:	e01d      	b.n	8002b88 <HAL_UART_RxCpltCallback+0x64>
			channel[i] = (*(ptrl+(i*2)) << 8) | *(ptr+(i*2));
 8002b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	b219      	sxth	r1, r3
 8002b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	461a      	mov	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b21a      	sxth	r2, r3
 8002b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	b211      	sxth	r1, r2
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_UART_RxCpltCallback+0x78>)
 8002b78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int8_t i  = 0; i < 10; i++){
 8002b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	75fb      	strb	r3, [r7, #23]
 8002b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	dddd      	ble.n	8002b4c <HAL_UART_RxCpltCallback+0x28>
		}

	}
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	20000238 	.word	0x20000238

08002ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba4:	b672      	cpsid	i
}
 8002ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <Error_Handler+0x8>
	...

08002bac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HAL_MspInit+0x4c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <HAL_MspInit+0x4c>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_MspInit+0x4c>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_MspInit+0x4c>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_MspInit+0x4c>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_MspInit+0x4c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800

08002bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_I2C_MspInit+0x84>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_I2C_MspInit+0x88>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_I2C_MspInit+0x88>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_I2C_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c40:	2312      	movs	r3, #18
 8002c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4619      	mov	r1, r3
 8002c56:	480c      	ldr	r0, [pc, #48]	; (8002c88 <HAL_I2C_MspInit+0x8c>)
 8002c58:	f000 fef0 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_I2C_MspInit+0x88>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_I2C_MspInit+0x88>)
 8002c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_I2C_MspInit+0x88>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40005800 	.word	0x40005800
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020400 	.word	0x40020400

08002c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <HAL_TIM_Base_MspInit+0x10c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbe:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002cca:	e061      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
}
 8002cf2:	e04d      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_TIM_Base_MspInit+0x114>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10e      	bne.n	8002d1c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
}
 8002d1a:	e039      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM12)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <HAL_TIM_Base_MspInit+0x118>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d134      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_TIM_Base_MspInit+0x110>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d70:	2309      	movs	r3, #9
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	480b      	ldr	r0, [pc, #44]	; (8002da8 <HAL_TIM_Base_MspInit+0x11c>)
 8002d7c:	f000 fe5e 	bl	8003a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	202b      	movs	r0, #43	; 0x2b
 8002d86:	f000 fab2 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002d8a:	202b      	movs	r0, #43	; 0x2b
 8002d8c:	f000 facb 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 8002d90:	bf00      	nop
 8002d92:	3730      	adds	r7, #48	; 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40001800 	.word	0x40001800
 8002da8:	40020400 	.word	0x40020400

08002dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_TIM_MspPostInit+0x68>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d11e      	bne.n	8002e0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_TIM_MspPostInit+0x6c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_TIM_MspPostInit+0x6c>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_TIM_MspPostInit+0x6c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	4619      	mov	r1, r3
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <HAL_TIM_MspPostInit+0x70>)
 8002e08:	f000 fe18 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e0c:	bf00      	nop
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020400 	.word	0x40020400

08002e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_UART_MspInit+0xe4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d15b      	bne.n	8002efa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_UART_MspInit+0xe8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_UART_MspInit+0xe8>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_UART_MspInit+0xe8>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_UART_MspInit+0xe8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_UART_MspInit+0xe8>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_UART_MspInit+0xe8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4619      	mov	r1, r3
 8002e96:	481d      	ldr	r0, [pc, #116]	; (8002f0c <HAL_UART_MspInit+0xec>)
 8002e98:	f000 fdd0 	bl	8003a3c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_UART_MspInit+0xf4>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ebc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ede:	480c      	ldr	r0, [pc, #48]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ee0:	f000 fa3c 	bl	800335c <HAL_DMA_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002eea:	f7ff fe59 	bl	8002ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_UART_MspInit+0xf0>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40004800 	.word	0x40004800
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	2000013c 	.word	0x2000013c
 8002f14:	40026028 	.word	0x40026028

08002f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <NMI_Handler+0x4>

08002f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <BusFault_Handler+0x4>

08002f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <UsageFault_Handler+0x4>

08002f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f64:	f000 f8a4 	bl	80030b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <DMA1_Stream1_IRQHandler+0x10>)
 8002f72:	f000 faf9 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000013c 	.word	0x2000013c

08002f80 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002f86:	f002 fd24 	bl	80059d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200002e4 	.word	0x200002e4

08002f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <SystemInit+0x20>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <SystemInit+0x20>)
 8002fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fbe:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc4:	e002      	b.n	8002fcc <LoopCopyDataInit>

08002fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fca:	3304      	adds	r3, #4

08002fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd0:	d3f9      	bcc.n	8002fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd4:	4c0b      	ldr	r4, [pc, #44]	; (8003004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd8:	e001      	b.n	8002fde <LoopFillZerobss>

08002fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fdc:	3204      	adds	r2, #4

08002fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe0:	d3fb      	bcc.n	8002fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fe2:	f7ff ffd7 	bl	8002f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe6:	f004 f8d3 	bl	8007190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fea:	f7fd ff4d 	bl	8000e88 <main>
  bx  lr    
 8002fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002ffc:	08008b00 	.word	0x08008b00
  ldr r2, =_sbss
 8003000:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003004:	20000330 	.word	0x20000330

08003008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC_IRQHandler>
	...

0800300c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_Init+0x40>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_Init+0x40>)
 8003016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_Init+0x40>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_Init+0x40>)
 8003022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_Init+0x40>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_Init+0x40>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003034:	2003      	movs	r0, #3
 8003036:	f000 f94f 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800303a:	2000      	movs	r0, #0
 800303c:	f000 f808 	bl	8003050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003040:	f7ff fdb4 	bl	8002bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00

08003050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_InitTick+0x54>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_InitTick+0x58>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003066:	fbb3 f3f1 	udiv	r3, r3, r1
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f967 	bl	8003342 <HAL_SYSTICK_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00e      	b.n	800309c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d80a      	bhi.n	800309a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003084:	2200      	movs	r2, #0
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	f000 f92f 	bl	80032ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003090:	4a06      	ldr	r2, [pc, #24]	; (80030ac <HAL_InitTick+0x5c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000018 	.word	0x20000018
 80030a8:	20000020 	.word	0x20000020
 80030ac:	2000001c 	.word	0x2000001c

080030b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x20>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x24>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_IncTick+0x24>)
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000020 	.word	0x20000020
 80030d4:	2000032c 	.word	0x2000032c

080030d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return uwTick;
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_GetTick+0x14>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	2000032c 	.word	0x2000032c

080030f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7ff ffee 	bl	80030d8 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d005      	beq.n	8003116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_Delay+0x44>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003116:	bf00      	nop
 8003118:	f7ff ffde 	bl	80030d8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d8f7      	bhi.n	8003118 <HAL_Delay+0x28>
  {
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000020 	.word	0x20000020

08003138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <__NVIC_EnableIRQ+0x38>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db0a      	blt.n	8003202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <__NVIC_SetPriority+0x4c>)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	440b      	add	r3, r1
 80031fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003200:	e00a      	b.n	8003218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4908      	ldr	r1, [pc, #32]	; (8003228 <__NVIC_SetPriority+0x50>)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3b04      	subs	r3, #4
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	440b      	add	r3, r1
 8003216:	761a      	strb	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf28      	it	cs
 800324a:	2304      	movcs	r3, #4
 800324c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3304      	adds	r3, #4
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <NVIC_EncodePriority+0x30>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3b03      	subs	r3, #3
 800325a:	e000      	b.n	800325e <NVIC_EncodePriority+0x32>
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43d9      	mvns	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	4313      	orrs	r3, r2
         );
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d301      	bcc.n	80032aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <SysTick_Config+0x40>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	f7ff ff8e 	bl	80031d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SysTick_Config+0x40>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <SysTick_Config+0x40>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000e010 	.word	0xe000e010

080032d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff29 	bl	8003138 <__NVIC_SetPriorityGrouping>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003300:	f7ff ff3e 	bl	8003180 <__NVIC_GetPriorityGrouping>
 8003304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7ff ff8e 	bl	800322c <NVIC_EncodePriority>
 8003310:	4602      	mov	r2, r0
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff5d 	bl	80031d8 <__NVIC_SetPriority>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff31 	bl	800319c <__NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffa2 	bl	8003294 <SysTick_Config>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff feb6 	bl	80030d8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e099      	b.n	80034ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003398:	e00f      	b.n	80033ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800339a:	f7ff fe9d 	bl	80030d8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d908      	bls.n	80033ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2203      	movs	r2, #3
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e078      	b.n	80034ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e8      	bne.n	800339a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_DMA_Init+0x158>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b04      	cmp	r3, #4
 8003412:	d107      	bne.n	8003424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4313      	orrs	r3, r2
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0307 	bic.w	r3, r3, #7
 800343a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2b04      	cmp	r3, #4
 800344c:	d117      	bne.n	800347e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fa6f 	bl	8003944 <DMA_CheckFifoParam>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800347a:	2301      	movs	r3, #1
 800347c:	e016      	b.n	80034ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa26 	bl	80038d8 <DMA_CalcBaseAndBitshift>
 800348c:	4603      	mov	r3, r0
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	223f      	movs	r2, #63	; 0x3f
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	f010803f 	.word	0xf010803f

080034b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Start_IT+0x26>
 80034da:	2302      	movs	r3, #2
 80034dc:	e040      	b.n	8003560 <HAL_DMA_Start_IT+0xa8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d12f      	bne.n	8003552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f9b8 	bl	800387c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	223f      	movs	r2, #63	; 0x3f
 8003512:	409a      	lsls	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0216 	orr.w	r2, r2, #22
 8003526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0208 	orr.w	r2, r2, #8
 800353e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e005      	b.n	800355e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800355e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_DMA_IRQHandler+0x258>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a92      	ldr	r2, [pc, #584]	; (80037c4 <HAL_DMA_IRQHandler+0x25c>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0a9b      	lsrs	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2208      	movs	r2, #8
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01a      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	2208      	movs	r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	2201      	movs	r2, #1
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2204      	movs	r2, #4
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2204      	movs	r2, #4
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0204 	orr.w	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	2210      	movs	r2, #16
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d043      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03c      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	2210      	movs	r2, #16
 8003664:	409a      	lsls	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d018      	beq.n	80036aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d024      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e01f      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e016      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0208 	bic.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2220      	movs	r2, #32
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 808e 	beq.w	8003806 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8086 	beq.w	8003806 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2220      	movs	r2, #32
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d136      	bne.n	8003780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0216 	bic.w	r2, r2, #22
 8003720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_DMA_IRQHandler+0x1da>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0208 	bic.w	r2, r2, #8
 8003750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d07d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
        }
        return;
 800377e:	e078      	b.n	8003872 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01c      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d030      	beq.n	8003806 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e02b      	b.n	8003806 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d027      	beq.n	8003806 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
 80037be:	e022      	b.n	8003806 <HAL_DMA_IRQHandler+0x29e>
 80037c0:	20000018 	.word	0x20000018
 80037c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0210 	bic.w	r2, r2, #16
 80037e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	2b00      	cmp	r3, #0
 800380c:	d032      	beq.n	8003874 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d022      	beq.n	8003860 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2205      	movs	r2, #5
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	429a      	cmp	r2, r3
 800383c:	d307      	bcc.n	800384e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f2      	bne.n	8003832 <HAL_DMA_IRQHandler+0x2ca>
 800384c:	e000      	b.n	8003850 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800384e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e000      	b.n	8003874 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003872:	bf00      	nop
    }
  }
}
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop

0800387c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003898:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d108      	bne.n	80038bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038ba:	e007      	b.n	80038cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3b10      	subs	r3, #16
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <DMA_CalcBaseAndBitshift+0x64>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <DMA_CalcBaseAndBitshift+0x68>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d909      	bls.n	800391a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	659a      	str	r2, [r3, #88]	; 0x58
 8003918:	e007      	b.n	800392a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	aaaaaaab 	.word	0xaaaaaaab
 8003940:	08008908 	.word	0x08008908

08003944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d11f      	bne.n	800399e <DMA_CheckFifoParam+0x5a>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d856      	bhi.n	8003a12 <DMA_CheckFifoParam+0xce>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <DMA_CheckFifoParam+0x28>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398f 	.word	0x0800398f
 8003974:	0800397d 	.word	0x0800397d
 8003978:	08003a13 	.word	0x08003a13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d046      	beq.n	8003a16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e043      	b.n	8003a16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003996:	d140      	bne.n	8003a1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399c:	e03d      	b.n	8003a1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a6:	d121      	bne.n	80039ec <DMA_CheckFifoParam+0xa8>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d837      	bhi.n	8003a1e <DMA_CheckFifoParam+0xda>
 80039ae:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <DMA_CheckFifoParam+0x70>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039cb 	.word	0x080039cb
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	080039dd 	.word	0x080039dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e030      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d025      	beq.n	8003a22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039da:	e022      	b.n	8003a22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e4:	d11f      	bne.n	8003a26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ea:	e01c      	b.n	8003a26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d903      	bls.n	80039fa <DMA_CheckFifoParam+0xb6>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d003      	beq.n	8003a00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039f8:	e018      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      break;
 80039fe:	e015      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a10:	e00b      	b.n	8003a2a <DMA_CheckFifoParam+0xe6>
      break;
 8003a12:	bf00      	nop
 8003a14:	e00a      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a16:	bf00      	nop
 8003a18:	e008      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e006      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e16b      	b.n	8003d30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 815a 	bne.w	8003d2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d005      	beq.n	8003a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d130      	bne.n	8003af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 0201 	and.w	r2, r3, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d017      	beq.n	8003b2c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d123      	bne.n	8003b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0203 	and.w	r2, r3, #3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b4 	beq.w	8003d2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b60      	ldr	r3, [pc, #384]	; (8003d48 <HAL_GPIO_Init+0x30c>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <HAL_GPIO_Init+0x30c>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_GPIO_Init+0x30c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bde:	4a5b      	ldr	r2, [pc, #364]	; (8003d4c <HAL_GPIO_Init+0x310>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <HAL_GPIO_Init+0x314>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x226>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a51      	ldr	r2, [pc, #324]	; (8003d54 <HAL_GPIO_Init+0x318>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x222>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a50      	ldr	r2, [pc, #320]	; (8003d58 <HAL_GPIO_Init+0x31c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x21e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4f      	ldr	r2, [pc, #316]	; (8003d5c <HAL_GPIO_Init+0x320>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x21a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4e      	ldr	r2, [pc, #312]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x216>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4d      	ldr	r2, [pc, #308]	; (8003d64 <HAL_GPIO_Init+0x328>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x212>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4c      	ldr	r2, [pc, #304]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x20e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	; (8003d6c <HAL_GPIO_Init+0x330>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x20a>
 8003c42:	2307      	movs	r3, #7
 8003c44:	e00e      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c46:	2308      	movs	r3, #8
 8003c48:	e00c      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	e00a      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c4e:	2305      	movs	r3, #5
 8003c50:	e008      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c52:	2304      	movs	r3, #4
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c56:	2303      	movs	r3, #3
 8003c58:	e004      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e002      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_GPIO_Init+0x228>
 8003c62:	2300      	movs	r3, #0
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f002 0203 	and.w	r2, r2, #3
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	4093      	lsls	r3, r2
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c74:	4935      	ldr	r1, [pc, #212]	; (8003d4c <HAL_GPIO_Init+0x310>)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ca6:	4a32      	ldr	r2, [pc, #200]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cac:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd6:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	f67f ae90 	bls.w	8003a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	40020000 	.word	0x40020000
 8003d54:	40020400 	.word	0x40020400
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020c00 	.word	0x40020c00
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40021400 	.word	0x40021400
 8003d68:	40021800 	.word	0x40021800
 8003d6c:	40021c00 	.word	0x40021c00
 8003d70:	40013c00 	.word	0x40013c00

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	041a      	lsls	r2, r3, #16
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43d9      	mvns	r1, r3
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	619a      	str	r2, [r3, #24]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e12b      	b.n	8004046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe fefa 	bl	8002bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e40:	f001 fbd6 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8003e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4a81      	ldr	r2, [pc, #516]	; (8004050 <HAL_I2C_Init+0x274>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d807      	bhi.n	8003e60 <HAL_I2C_Init+0x84>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a80      	ldr	r2, [pc, #512]	; (8004054 <HAL_I2C_Init+0x278>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	bf94      	ite	ls
 8003e58:	2301      	movls	r3, #1
 8003e5a:	2300      	movhi	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e006      	b.n	8003e6e <HAL_I2C_Init+0x92>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a7d      	ldr	r2, [pc, #500]	; (8004058 <HAL_I2C_Init+0x27c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bf94      	ite	ls
 8003e68:	2301      	movls	r3, #1
 8003e6a:	2300      	movhi	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0e7      	b.n	8004046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a78      	ldr	r2, [pc, #480]	; (800405c <HAL_I2C_Init+0x280>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0c9b      	lsrs	r3, r3, #18
 8003e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a6a      	ldr	r2, [pc, #424]	; (8004050 <HAL_I2C_Init+0x274>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d802      	bhi.n	8003eb0 <HAL_I2C_Init+0xd4>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3301      	adds	r3, #1
 8003eae:	e009      	b.n	8003ec4 <HAL_I2C_Init+0xe8>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	4a69      	ldr	r2, [pc, #420]	; (8004060 <HAL_I2C_Init+0x284>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	495c      	ldr	r1, [pc, #368]	; (8004050 <HAL_I2C_Init+0x274>)
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	d819      	bhi.n	8003f18 <HAL_I2C_Init+0x13c>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e59      	subs	r1, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef2:	1c59      	adds	r1, r3, #1
 8003ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef8:	400b      	ands	r3, r1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_I2C_Init+0x138>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1e59      	subs	r1, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f12:	e051      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f14:	2304      	movs	r3, #4
 8003f16:	e04f      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <HAL_I2C_Init+0x168>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	440b      	add	r3, r1
 8003f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e012      	b.n	8003f6a <HAL_I2C_Init+0x18e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	0099      	lsls	r1, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Init+0x196>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e022      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10e      	bne.n	8003f98 <HAL_I2C_Init+0x1bc>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1e58      	subs	r0, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	440b      	add	r3, r1
 8003f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f96:	e00f      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e58      	subs	r0, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	0099      	lsls	r1, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	6809      	ldr	r1, [r1, #0]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6911      	ldr	r1, [r2, #16]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68d2      	ldr	r2, [r2, #12]
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	000186a0 	.word	0x000186a0
 8004054:	001e847f 	.word	0x001e847f
 8004058:	003d08ff 	.word	0x003d08ff
 800405c:	431bde83 	.word	0x431bde83
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407e:	f7ff f82b 	bl	80030d8 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	f040 80d9 	bne.w	8004244 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2319      	movs	r3, #25
 8004098:	2201      	movs	r2, #1
 800409a:	496d      	ldr	r1, [pc, #436]	; (8004250 <HAL_I2C_Mem_Write+0x1ec>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fc7f 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0cc      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Write+0x56>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0c5      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d007      	beq.n	80040e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2221      	movs	r2, #33	; 0x21
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a4d      	ldr	r2, [pc, #308]	; (8004254 <HAL_I2C_Mem_Write+0x1f0>)
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004122:	88f8      	ldrh	r0, [r7, #6]
 8004124:	893a      	ldrh	r2, [r7, #8]
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4603      	mov	r3, r0
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fab6 	bl	80046a4 <I2C_RequestMemoryWrite>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d052      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e081      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fd00 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b04      	cmp	r3, #4
 8004158:	d107      	bne.n	800416a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06b      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d11b      	bne.n	80041e4 <HAL_I2C_Mem_Write+0x180>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d017      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1aa      	bne.n	8004142 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fcec 	bl	8004bce <I2C_WaitOnBTFFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	2b04      	cmp	r3, #4
 8004202:	d107      	bne.n	8004214 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e016      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	00100002 	.word	0x00100002
 8004254:	ffff0000 	.word	0xffff0000

08004258 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08c      	sub	sp, #48	; 0x30
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004272:	f7fe ff31 	bl	80030d8 <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	f040 8208 	bne.w	8004696 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2319      	movs	r3, #25
 800428c:	2201      	movs	r2, #1
 800428e:	497b      	ldr	r1, [pc, #492]	; (800447c <HAL_I2C_Mem_Read+0x224>)
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb85 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	e1fb      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Mem_Read+0x56>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e1f4      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d007      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2222      	movs	r2, #34	; 0x22
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a5b      	ldr	r2, [pc, #364]	; (8004480 <HAL_I2C_Mem_Read+0x228>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004316:	88f8      	ldrh	r0, [r7, #6]
 8004318:	893a      	ldrh	r2, [r7, #8]
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	4603      	mov	r3, r0
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa52 	bl	80047d0 <I2C_RequestMemoryRead>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1b0      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	d113      	bne.n	8004366 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e184      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11b      	bne.n	80043a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e164      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d11b      	bne.n	80043e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	e144      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043fc:	e138      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	2b03      	cmp	r3, #3
 8004404:	f200 80f1 	bhi.w	80045ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	2b01      	cmp	r3, #1
 800440e:	d123      	bne.n	8004458 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fc1b 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e139      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004456:	e10b      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	2b02      	cmp	r3, #2
 800445e:	d14e      	bne.n	80044fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	2200      	movs	r2, #0
 8004468:	4906      	ldr	r1, [pc, #24]	; (8004484 <HAL_I2C_Mem_Read+0x22c>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa98 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e10e      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000
 8004484:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044fc:	e0b8      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	2200      	movs	r2, #0
 8004506:	4966      	ldr	r1, [pc, #408]	; (80046a0 <HAL_I2C_Mem_Read+0x448>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa49 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0bf      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	2200      	movs	r2, #0
 8004562:	494f      	ldr	r1, [pc, #316]	; (80046a0 <HAL_I2C_Mem_Read+0x448>)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fa1b 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e091      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e8:	e042      	b.n	8004670 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fb2e 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e04c      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d118      	bne.n	8004670 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	f47f aec2 	bne.w	80043fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3728      	adds	r7, #40	; 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	00010004 	.word	0x00010004

080046a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	817b      	strh	r3, [r7, #10]
 80046b6:	460b      	mov	r3, r1
 80046b8:	813b      	strh	r3, [r7, #8]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f960 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f4:	d103      	bne.n	80046fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e05f      	b.n	80047c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	492d      	ldr	r1, [pc, #180]	; (80047cc <I2C_RequestMemoryWrite+0x128>)
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f998 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e04c      	b.n	80047c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	6a39      	ldr	r1, [r7, #32]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fa02 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b04      	cmp	r3, #4
 8004754:	d107      	bne.n	8004766 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e02b      	b.n	80047c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004770:	893b      	ldrh	r3, [r7, #8]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	611a      	str	r2, [r3, #16]
 800477a:	e021      	b.n	80047c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800477c:	893b      	ldrh	r3, [r7, #8]
 800477e:	0a1b      	lsrs	r3, r3, #8
 8004780:	b29b      	uxth	r3, r3
 8004782:	b2da      	uxtb	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	6a39      	ldr	r1, [r7, #32]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f9dc 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d107      	bne.n	80047b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e005      	b.n	80047c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047b6:	893b      	ldrh	r3, [r7, #8]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	00010002 	.word	0x00010002

080047d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	4608      	mov	r0, r1
 80047da:	4611      	mov	r1, r2
 80047dc:	461a      	mov	r2, r3
 80047de:	4603      	mov	r3, r0
 80047e0:	817b      	strh	r3, [r7, #10]
 80047e2:	460b      	mov	r3, r1
 80047e4:	813b      	strh	r3, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004808:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2200      	movs	r2, #0
 8004812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f8c2 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004830:	d103      	bne.n	800483a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0aa      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800484c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	4952      	ldr	r1, [pc, #328]	; (800499c <I2C_RequestMemoryRead+0x1cc>)
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f8fa 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e097      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487c:	6a39      	ldr	r1, [r7, #32]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f964 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b04      	cmp	r3, #4
 8004890:	d107      	bne.n	80048a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e076      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e021      	b.n	80048fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	b29b      	uxth	r3, r3
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c8:	6a39      	ldr	r1, [r7, #32]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f93e 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d107      	bne.n	80048ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e050      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048f2:	893b      	ldrh	r3, [r7, #8]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	6a39      	ldr	r1, [r7, #32]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f923 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	2b04      	cmp	r3, #4
 8004912:	d107      	bne.n	8004924 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004922:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e035      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004936:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2200      	movs	r2, #0
 8004940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f82b 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d103      	bne.n	8004968 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e013      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800496c:	897b      	ldrh	r3, [r7, #10]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	6a3a      	ldr	r2, [r7, #32]
 8004980:	4906      	ldr	r1, [pc, #24]	; (800499c <I2C_RequestMemoryRead+0x1cc>)
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f863 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	00010002 	.word	0x00010002

080049a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b0:	e025      	b.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d021      	beq.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe fb8d 	bl	80030d8 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e023      	b.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10d      	bne.n	8004a24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	e00c      	b.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0b6      	beq.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5c:	e051      	b.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d123      	bne.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0204 	orr.w	r2, r3, #4
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e046      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d021      	beq.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fe fb0b 	bl	80030d8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e020      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10c      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	43da      	mvns	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e00b      	b.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4013      	ands	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d18d      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b58:	e02d      	b.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f8ce 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02d      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d021      	beq.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fe fab1 	bl	80030d8 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d1ca      	bne.n	8004b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bda:	e02d      	b.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f88d 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e02d      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d021      	beq.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fe fa70 	bl	80030d8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e007      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d1ca      	bne.n	8004bdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5c:	e042      	b.n	8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d119      	bne.n	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e029      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fe fa1a 	bl	80030d8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d1b5      	bne.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d12:	d11b      	bne.n	8004d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e264      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d075      	beq.n	8004e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7a:	4ba3      	ldr	r3, [pc, #652]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d86:	4ba0      	ldr	r3, [pc, #640]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d112      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b9d      	ldr	r3, [pc, #628]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	4b99      	ldr	r3, [pc, #612]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05b      	beq.n	8004e64 <HAL_RCC_OscConfig+0x108>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d157      	bne.n	8004e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e23f      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x74>
 8004dc2:	4b91      	ldr	r3, [pc, #580]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a90      	ldr	r2, [pc, #576]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e01d      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x98>
 8004dda:	4b8b      	ldr	r3, [pc, #556]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a8a      	ldr	r2, [pc, #552]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b88      	ldr	r3, [pc, #544]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a87      	ldr	r2, [pc, #540]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004df4:	4b84      	ldr	r3, [pc, #528]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a83      	ldr	r2, [pc, #524]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b81      	ldr	r3, [pc, #516]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a80      	ldr	r2, [pc, #512]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fe f960 	bl	80030d8 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fe f95c 	bl	80030d8 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e204      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b76      	ldr	r3, [pc, #472]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xc0>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f94c 	bl	80030d8 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fe f948 	bl	80030d8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1f0      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0xe8>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e72:	4b65      	ldr	r3, [pc, #404]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7e:	4b62      	ldr	r3, [pc, #392]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b5f      	ldr	r3, [pc, #380]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e96:	4b5c      	ldr	r3, [pc, #368]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1c4      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b56      	ldr	r3, [pc, #344]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4952      	ldr	r1, [pc, #328]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	e03a      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b4f      	ldr	r3, [pc, #316]	; (800500c <HAL_RCC_OscConfig+0x2b0>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fe f901 	bl	80030d8 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fe f8fd 	bl	80030d8 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a5      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b46      	ldr	r3, [pc, #280]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4940      	ldr	r1, [pc, #256]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b3f      	ldr	r3, [pc, #252]	; (800500c <HAL_RCC_OscConfig+0x2b0>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fe f8e0 	bl	80030d8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fe f8dc 	bl	80030d8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e184      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b36      	ldr	r3, [pc, #216]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d030      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b30      	ldr	r3, [pc, #192]	; (8005010 <HAL_RCC_OscConfig+0x2b4>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fe f8c0 	bl	80030d8 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fe f8bc 	bl	80030d8 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e164      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b26      	ldr	r3, [pc, #152]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x200>
 8004f7a:	e015      	b.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x2b4>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fe f8a9 	bl	80030d8 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fe f8a5 	bl	80030d8 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e14d      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80a0 	beq.w	80050f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x2b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d121      	bne.n	8005036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <HAL_RCC_OscConfig+0x2b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <HAL_RCC_OscConfig+0x2b8>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffe:	f7fe f86b 	bl	80030d8 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	e011      	b.n	800502a <HAL_RCC_OscConfig+0x2ce>
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	42470000 	.word	0x42470000
 8005010:	42470e80 	.word	0x42470e80
 8005014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005018:	f7fe f85e 	bl	80030d8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e106      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	4b85      	ldr	r3, [pc, #532]	; (8005240 <HAL_RCC_OscConfig+0x4e4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d106      	bne.n	800504c <HAL_RCC_OscConfig+0x2f0>
 800503e:	4b81      	ldr	r3, [pc, #516]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a80      	ldr	r2, [pc, #512]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	e01c      	b.n	8005086 <HAL_RCC_OscConfig+0x32a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d10c      	bne.n	800506e <HAL_RCC_OscConfig+0x312>
 8005054:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4a7a      	ldr	r2, [pc, #488]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 800505a:	f043 0304 	orr.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	; 0x70
 8005060:	4b78      	ldr	r3, [pc, #480]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4a77      	ldr	r2, [pc, #476]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
 800506c:	e00b      	b.n	8005086 <HAL_RCC_OscConfig+0x32a>
 800506e:	4b75      	ldr	r3, [pc, #468]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	4a74      	ldr	r2, [pc, #464]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	; 0x70
 800507a:	4b72      	ldr	r3, [pc, #456]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	4a71      	ldr	r2, [pc, #452]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fe f823 	bl	80030d8 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fe f81f 	bl	80030d8 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0c5      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	4b65      	ldr	r3, [pc, #404]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCC_OscConfig+0x33a>
 80050b8:	e014      	b.n	80050e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ba:	f7fe f80d 	bl	80030d8 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fe f809 	bl	80030d8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0af      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d8:	4b5a      	ldr	r3, [pc, #360]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d105      	bne.n	80050f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ea:	4b56      	ldr	r3, [pc, #344]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	4a55      	ldr	r2, [pc, #340]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 80050f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 809b 	beq.w	8005236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005100:	4b50      	ldr	r3, [pc, #320]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 030c 	and.w	r3, r3, #12
 8005108:	2b08      	cmp	r3, #8
 800510a:	d05c      	beq.n	80051c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d141      	bne.n	8005198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005114:	4b4c      	ldr	r3, [pc, #304]	; (8005248 <HAL_RCC_OscConfig+0x4ec>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511a:	f7fd ffdd 	bl	80030d8 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005122:	f7fd ffd9 	bl	80030d8 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e081      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005134:	4b43      	ldr	r3, [pc, #268]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f0      	bne.n	8005122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	019b      	lsls	r3, r3, #6
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	3b01      	subs	r3, #1
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	4937      	ldr	r1, [pc, #220]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800516a:	4b37      	ldr	r3, [pc, #220]	; (8005248 <HAL_RCC_OscConfig+0x4ec>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fd ffb2 	bl	80030d8 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fd ffae 	bl	80030d8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e056      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x41c>
 8005196:	e04e      	b.n	8005236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <HAL_RCC_OscConfig+0x4ec>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd ff9b 	bl	80030d8 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fd ff97 	bl	80030d8 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e03f      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b8:	4b22      	ldr	r3, [pc, #136]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x44a>
 80051c4:	e037      	b.n	8005236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e032      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <HAL_RCC_OscConfig+0x4e8>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d028      	beq.n	8005232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d121      	bne.n	8005232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d11a      	bne.n	8005232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005202:	4013      	ands	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800520a:	4293      	cmp	r3, r2
 800520c:	d111      	bne.n	8005232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	3b01      	subs	r3, #1
 800521c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d107      	bne.n	8005232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d001      	beq.n	8005236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40007000 	.word	0x40007000
 8005244:	40023800 	.word	0x40023800
 8005248:	42470060 	.word	0x42470060

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0cc      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d90c      	bls.n	8005288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b65      	ldr	r3, [pc, #404]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b63      	ldr	r3, [pc, #396]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0b8      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a58      	ldr	r2, [pc, #352]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b8:	4b53      	ldr	r3, [pc, #332]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	494d      	ldr	r1, [pc, #308]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d044      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d119      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d003      	beq.n	800530a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	2b03      	cmp	r3, #3
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e067      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b37      	ldr	r3, [pc, #220]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4934      	ldr	r1, [pc, #208]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fd fecc 	bl	80030d8 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fd fec8 	bl	80030d8 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e04f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d20c      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e032      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4916      	ldr	r1, [pc, #88]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d2:	f000 f821 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	5ccb      	ldrb	r3, [r1, r3]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fd fe2c 	bl	8003050 <HAL_InitTick>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023c00 	.word	0x40023c00
 8005408:	40023800 	.word	0x40023800
 800540c:	080088f0 	.word	0x080088f0
 8005410:	20000018 	.word	0x20000018
 8005414:	2000001c 	.word	0x2000001c

08005418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	2300      	movs	r3, #0
 800542a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005430:	4b67      	ldr	r3, [pc, #412]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d00d      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x40>
 800543c:	2b08      	cmp	r3, #8
 800543e:	f200 80bd 	bhi.w	80055bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x34>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d003      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x3a>
 800544a:	e0b7      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800544e:	60bb      	str	r3, [r7, #8]
       break;
 8005450:	e0b7      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005452:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005454:	60bb      	str	r3, [r7, #8]
      break;
 8005456:	e0b4      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005458:	4b5d      	ldr	r3, [pc, #372]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005460:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005462:	4b5b      	ldr	r3, [pc, #364]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d04d      	beq.n	800550a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546e:	4b58      	ldr	r3, [pc, #352]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	099b      	lsrs	r3, r3, #6
 8005474:	461a      	mov	r2, r3
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	ea02 0800 	and.w	r8, r2, r0
 8005486:	ea03 0901 	and.w	r9, r3, r1
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	014b      	lsls	r3, r1, #5
 8005498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800549c:	0142      	lsls	r2, r0, #5
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	ebb0 0008 	subs.w	r0, r0, r8
 80054a6:	eb61 0109 	sbc.w	r1, r1, r9
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	018b      	lsls	r3, r1, #6
 80054b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054b8:	0182      	lsls	r2, r0, #6
 80054ba:	1a12      	subs	r2, r2, r0
 80054bc:	eb63 0301 	sbc.w	r3, r3, r1
 80054c0:	f04f 0000 	mov.w	r0, #0
 80054c4:	f04f 0100 	mov.w	r1, #0
 80054c8:	00d9      	lsls	r1, r3, #3
 80054ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054ce:	00d0      	lsls	r0, r2, #3
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	eb12 0208 	adds.w	r2, r2, r8
 80054d8:	eb43 0309 	adc.w	r3, r3, r9
 80054dc:	f04f 0000 	mov.w	r0, #0
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	0299      	lsls	r1, r3, #10
 80054e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054ea:	0290      	lsls	r0, r2, #10
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	f7fb fb48 	bl	8000b90 <__aeabi_uldivmod>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4613      	mov	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e04a      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	099b      	lsrs	r3, r3, #6
 8005510:	461a      	mov	r2, r3
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800551a:	f04f 0100 	mov.w	r1, #0
 800551e:	ea02 0400 	and.w	r4, r2, r0
 8005522:	ea03 0501 	and.w	r5, r3, r1
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	014b      	lsls	r3, r1, #5
 8005534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005538:	0142      	lsls	r2, r0, #5
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	1b00      	subs	r0, r0, r4
 8005540:	eb61 0105 	sbc.w	r1, r1, r5
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	018b      	lsls	r3, r1, #6
 800554e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005552:	0182      	lsls	r2, r0, #6
 8005554:	1a12      	subs	r2, r2, r0
 8005556:	eb63 0301 	sbc.w	r3, r3, r1
 800555a:	f04f 0000 	mov.w	r0, #0
 800555e:	f04f 0100 	mov.w	r1, #0
 8005562:	00d9      	lsls	r1, r3, #3
 8005564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005568:	00d0      	lsls	r0, r2, #3
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	1912      	adds	r2, r2, r4
 8005570:	eb45 0303 	adc.w	r3, r5, r3
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	0299      	lsls	r1, r3, #10
 800557e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005582:	0290      	lsls	r0, r2, #10
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	461a      	mov	r2, r3
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f7fb fafc 	bl	8000b90 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4613      	mov	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	60bb      	str	r3, [r7, #8]
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80055be:	60bb      	str	r3, [r7, #8]
      break;
 80055c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c2:	68bb      	ldr	r3, [r7, #8]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800
 80055d4:	00f42400 	.word	0x00f42400

080055d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCC_GetHCLKFreq+0x14>)
 80055de:	681b      	ldr	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000018 	.word	0x20000018

080055f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055f4:	f7ff fff0 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0a9b      	lsrs	r3, r3, #10
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4903      	ldr	r1, [pc, #12]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40023800 	.word	0x40023800
 8005614:	08008900 	.word	0x08008900

08005618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800561c:	f7ff ffdc 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0b5b      	lsrs	r3, r3, #13
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4903      	ldr	r1, [pc, #12]	; (800563c <HAL_RCC_GetPCLK2Freq+0x24>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40023800 	.word	0x40023800
 800563c:	08008900 	.word	0x08008900

08005640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e041      	b.n	80056d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fd fb10 	bl	8002c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fcf8 	bl	8006074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e041      	b.n	8005774 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f839 	bl	800577c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fca9 	bl	8006074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <HAL_TIM_PWM_Start+0x24>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e022      	b.n	80057fa <HAL_TIM_PWM_Start+0x6a>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d109      	bne.n	80057ce <HAL_TIM_PWM_Start+0x3e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	e015      	b.n	80057fa <HAL_TIM_PWM_Start+0x6a>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d109      	bne.n	80057e8 <HAL_TIM_PWM_Start+0x58>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e008      	b.n	80057fa <HAL_TIM_PWM_Start+0x6a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07c      	b.n	80058fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0x82>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005810:	e013      	b.n	800583a <HAL_TIM_PWM_Start+0xaa>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0x92>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005820:	e00b      	b.n	800583a <HAL_TIM_PWM_Start+0xaa>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0xa2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	e003      	b.n	800583a <HAL_TIM_PWM_Start+0xaa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2201      	movs	r2, #1
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f82a 	bl	800689c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <HAL_TIM_PWM_Start+0x174>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d004      	beq.n	800585c <HAL_TIM_PWM_Start+0xcc>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <HAL_TIM_PWM_Start+0x178>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_TIM_PWM_Start+0xd0>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_TIM_PWM_Start+0xd2>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_TIM_PWM_Start+0x174>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d022      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d01d      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_TIM_PWM_Start+0x17c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_TIM_PWM_Start+0x180>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_TIM_PWM_Start+0x184>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a16      	ldr	r2, [pc, #88]	; (8005908 <HAL_TIM_PWM_Start+0x178>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a18      	ldr	r2, [pc, #96]	; (8005918 <HAL_TIM_PWM_Start+0x188>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x136>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a16      	ldr	r2, [pc, #88]	; (800591c <HAL_TIM_PWM_Start+0x18c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d111      	bne.n	80058ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	d010      	beq.n	80058fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	e007      	b.n	80058fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40010000 	.word	0x40010000
 8005908:	40010400 	.word	0x40010400
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40014000 	.word	0x40014000
 800591c:	40001800 	.word	0x40001800

08005920 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e041      	b.n	80059b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f839 	bl	80059be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f000 fb88 	bl	8006074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d122      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d11b      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0202 	mvn.w	r2, #2
 80059fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb0f 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005a1a:	e005      	b.n	8005a28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb01 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb12 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d122      	bne.n	8005a82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d11b      	bne.n	8005a82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0204 	mvn.w	r2, #4
 8005a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fae5 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fad7 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fae8 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d122      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d11b      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0208 	mvn.w	r2, #8
 8005aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fabb 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005ac2:	e005      	b.n	8005ad0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 faad 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fabe 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d122      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d11b      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0210 	mvn.w	r2, #16
 8005afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2208      	movs	r2, #8
 8005b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa91 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005b16:	e005      	b.n	8005b24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa83 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa94 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0201 	mvn.w	r2, #1
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa5d 	bl	8006010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d10e      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d107      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 ff39 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fa59 	bl	8006060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d10e      	bne.n	8005bda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0220 	mvn.w	r2, #32
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 ff03 	bl	80069e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIM_IC_ConfigChannel+0x1a>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e082      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x120>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11b      	bne.n	8005c42 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f000 fc7b 	bl	8006514 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 020c 	bic.w	r2, r2, #12
 8005c2c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6999      	ldr	r1, [r3, #24]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	619a      	str	r2, [r3, #24]
 8005c40:	e05a      	b.n	8005cf8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11c      	bne.n	8005c82 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f000 fcff 	bl	800665a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c6a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
 8005c80:	e03a      	b.n	8005cf8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f000 fd4c 	bl	8006734 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 020c 	bic.w	r2, r2, #12
 8005caa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69d9      	ldr	r1, [r3, #28]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	61da      	str	r2, [r3, #28]
 8005cbe:	e01b      	b.n	8005cf8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f000 fd6c 	bl	80067ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ce2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69d9      	ldr	r1, [r3, #28]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	021a      	lsls	r2, r3, #8
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e0ac      	b.n	8005e80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	f200 809f 	bhi.w	8005e74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005e75 	.word	0x08005e75
 8005d44:	08005e75 	.word	0x08005e75
 8005d48:	08005e75 	.word	0x08005e75
 8005d4c:	08005db1 	.word	0x08005db1
 8005d50:	08005e75 	.word	0x08005e75
 8005d54:	08005e75 	.word	0x08005e75
 8005d58:	08005e75 	.word	0x08005e75
 8005d5c:	08005df3 	.word	0x08005df3
 8005d60:	08005e75 	.word	0x08005e75
 8005d64:	08005e75 	.word	0x08005e75
 8005d68:	08005e75 	.word	0x08005e75
 8005d6c:	08005e33 	.word	0x08005e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fa1c 	bl	80061b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	619a      	str	r2, [r3, #24]
      break;
 8005dae:	e062      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fa6c 	bl	8006294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	619a      	str	r2, [r3, #24]
      break;
 8005df0:	e041      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fac1 	bl	8006380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0208 	orr.w	r2, r2, #8
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0204 	bic.w	r2, r2, #4
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	61da      	str	r2, [r3, #28]
      break;
 8005e30:	e021      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fb15 	bl	8006468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69d9      	ldr	r1, [r3, #28]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	021a      	lsls	r2, r3, #8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	61da      	str	r2, [r3, #28]
      break;
 8005e72:	e000      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0b3      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x180>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d03e      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xd0>
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ede:	f200 8087 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee6:	f000 8085 	beq.w	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eee:	d87f      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005ef0:	2b70      	cmp	r3, #112	; 0x70
 8005ef2:	d01a      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0xa2>
 8005ef4:	2b70      	cmp	r3, #112	; 0x70
 8005ef6:	d87b      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005ef8:	2b60      	cmp	r3, #96	; 0x60
 8005efa:	d050      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x116>
 8005efc:	2b60      	cmp	r3, #96	; 0x60
 8005efe:	d877      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005f00:	2b50      	cmp	r3, #80	; 0x50
 8005f02:	d03c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0xf6>
 8005f04:	2b50      	cmp	r3, #80	; 0x50
 8005f06:	d873      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d058      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x136>
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d86f      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005f10:	2b30      	cmp	r3, #48	; 0x30
 8005f12:	d064      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x156>
 8005f14:	2b30      	cmp	r3, #48	; 0x30
 8005f16:	d86b      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d060      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x156>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d867      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05c      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x156>
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d05a      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f28:	e062      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f000 fc8f 	bl	800685c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e04e      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6899      	ldr	r1, [r3, #8]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f000 fc78 	bl	800685c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f7a:	609a      	str	r2, [r3, #8]
      break;
 8005f7c:	e03b      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6859      	ldr	r1, [r3, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f000 fb36 	bl	80065fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2150      	movs	r1, #80	; 0x50
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fc45 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005f9c:	e02b      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6859      	ldr	r1, [r3, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f000 fb92 	bl	80066d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2160      	movs	r1, #96	; 0x60
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fc35 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005fbc:	e01b      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f000 fb16 	bl	80065fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2140      	movs	r1, #64	; 0x40
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fc25 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005fdc:	e00b      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 fc1c 	bl	8006826 <TIM_ITRx_SetConfig>
        break;
 8005fee:	e002      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ff0:	bf00      	nop
 8005ff2:	e000      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ff4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a40      	ldr	r2, [pc, #256]	; (8006188 <TIM_Base_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006092:	d00f      	beq.n	80060b4 <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3d      	ldr	r2, [pc, #244]	; (800618c <TIM_Base_SetConfig+0x118>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00b      	beq.n	80060b4 <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a3c      	ldr	r2, [pc, #240]	; (8006190 <TIM_Base_SetConfig+0x11c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a3b      	ldr	r2, [pc, #236]	; (8006194 <TIM_Base_SetConfig+0x120>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a3a      	ldr	r2, [pc, #232]	; (8006198 <TIM_Base_SetConfig+0x124>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d108      	bne.n	80060c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2f      	ldr	r2, [pc, #188]	; (8006188 <TIM_Base_SetConfig+0x114>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d02b      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d027      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2c      	ldr	r2, [pc, #176]	; (800618c <TIM_Base_SetConfig+0x118>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d023      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <TIM_Base_SetConfig+0x11c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01f      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2a      	ldr	r2, [pc, #168]	; (8006194 <TIM_Base_SetConfig+0x120>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01b      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a29      	ldr	r2, [pc, #164]	; (8006198 <TIM_Base_SetConfig+0x124>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d017      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a28      	ldr	r2, [pc, #160]	; (800619c <TIM_Base_SetConfig+0x128>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d013      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <TIM_Base_SetConfig+0x12c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00f      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a26      	ldr	r2, [pc, #152]	; (80061a4 <TIM_Base_SetConfig+0x130>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00b      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a25      	ldr	r2, [pc, #148]	; (80061a8 <TIM_Base_SetConfig+0x134>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d007      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a24      	ldr	r2, [pc, #144]	; (80061ac <TIM_Base_SetConfig+0x138>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a23      	ldr	r2, [pc, #140]	; (80061b0 <TIM_Base_SetConfig+0x13c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d108      	bne.n	8006138 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <TIM_Base_SetConfig+0x114>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_Base_SetConfig+0xf8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a0c      	ldr	r2, [pc, #48]	; (8006198 <TIM_Base_SetConfig+0x124>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d103      	bne.n	8006174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	615a      	str	r2, [r3, #20]
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40010400 	.word	0x40010400
 800619c:	40014000 	.word	0x40014000
 80061a0:	40014400 	.word	0x40014400
 80061a4:	40014800 	.word	0x40014800
 80061a8:	40001800 	.word	0x40001800
 80061ac:	40001c00 	.word	0x40001c00
 80061b0:	40002000 	.word	0x40002000

080061b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 0302 	bic.w	r3, r3, #2
 80061fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a20      	ldr	r2, [pc, #128]	; (800628c <TIM_OC1_SetConfig+0xd8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC1_SetConfig+0x64>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <TIM_OC1_SetConfig+0xdc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10c      	bne.n	8006232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0308 	bic.w	r3, r3, #8
 800621e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0304 	bic.w	r3, r3, #4
 8006230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a15      	ldr	r2, [pc, #84]	; (800628c <TIM_OC1_SetConfig+0xd8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d003      	beq.n	8006242 <TIM_OC1_SetConfig+0x8e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <TIM_OC1_SetConfig+0xdc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d111      	bne.n	8006266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	621a      	str	r2, [r3, #32]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	40010000 	.word	0x40010000
 8006290:	40010400 	.word	0x40010400

08006294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	f023 0210 	bic.w	r2, r3, #16
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0320 	bic.w	r3, r3, #32
 80062de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a22      	ldr	r2, [pc, #136]	; (8006378 <TIM_OC2_SetConfig+0xe4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_OC2_SetConfig+0x68>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a21      	ldr	r2, [pc, #132]	; (800637c <TIM_OC2_SetConfig+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d10d      	bne.n	8006318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <TIM_OC2_SetConfig+0xe4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC2_SetConfig+0x94>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a16      	ldr	r2, [pc, #88]	; (800637c <TIM_OC2_SetConfig+0xe8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d113      	bne.n	8006350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800632e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40010000 	.word	0x40010000
 800637c:	40010400 	.word	0x40010400

08006380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a21      	ldr	r2, [pc, #132]	; (8006460 <TIM_OC3_SetConfig+0xe0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC3_SetConfig+0x66>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a20      	ldr	r2, [pc, #128]	; (8006464 <TIM_OC3_SetConfig+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10d      	bne.n	8006402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a16      	ldr	r2, [pc, #88]	; (8006460 <TIM_OC3_SetConfig+0xe0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC3_SetConfig+0x92>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <TIM_OC3_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d113      	bne.n	800643a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	621a      	str	r2, [r3, #32]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400

08006468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a12      	ldr	r2, [pc, #72]	; (800650c <TIM_OC4_SetConfig+0xa4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC4_SetConfig+0x68>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a11      	ldr	r2, [pc, #68]	; (8006510 <TIM_OC4_SetConfig+0xa8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d109      	bne.n	80064e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	019b      	lsls	r3, r3, #6
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010000 	.word	0x40010000
 8006510:	40010400 	.word	0x40010400

08006514 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a28      	ldr	r2, [pc, #160]	; (80065e0 <TIM_TI1_SetConfig+0xcc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01b      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d017      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <TIM_TI1_SetConfig+0xd0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <TIM_TI1_SetConfig+0xd4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <TIM_TI1_SetConfig+0xd8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <TIM_TI1_SetConfig+0xdc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <TIM_TI1_SetConfig+0xe0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a20      	ldr	r2, [pc, #128]	; (80065f8 <TIM_TI1_SetConfig+0xe4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <TIM_TI1_SetConfig+0x6a>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <TIM_TI1_SetConfig+0x6c>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e003      	b.n	800659e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f023 030a 	bic.w	r3, r3, #10
 80065b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f003 030a 	and.w	r3, r3, #10
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40001800 	.word	0x40001800

080065fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0201 	bic.w	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f023 030a 	bic.w	r3, r3, #10
 8006638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800665a:	b480      	push	{r7}
 800665c:	b087      	sub	sp, #28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f023 0210 	bic.w	r2, r3, #16
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	b29b      	uxth	r3, r3
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f023 0210 	bic.w	r2, r3, #16
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	031b      	lsls	r3, r3, #12
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f023 0303 	bic.w	r3, r3, #3
 8006760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006770:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	b2db      	uxtb	r3, r3
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006784:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	621a      	str	r2, [r3, #32]
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	031b      	lsls	r3, r3, #12
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	031b      	lsls	r3, r3, #12
 8006804:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	f043 0307 	orr.w	r3, r3, #7
 8006848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	021a      	lsls	r2, r3, #8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	431a      	orrs	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4313      	orrs	r3, r2
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	2201      	movs	r2, #1
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1a      	ldr	r2, [r3, #32]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	43db      	mvns	r3, r3
 80068be:	401a      	ands	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e05a      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d022      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694c:	d01d      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e03f      	b.n	8006a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fc f9f6 	bl	8002e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	; 0x24
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f9d1 	bl	8006df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	4613      	mov	r3, r2
 8006aae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d11d      	bne.n	8006af8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_UART_Receive_DMA+0x26>
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e016      	b.n	8006afa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Receive_DMA+0x38>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	e00f      	b.n	8006afa <HAL_UART_Receive_DMA+0x58>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f8d8 	bl	8006ca4 <UART_Start_Receive_DMA>
 8006af4:	4603      	mov	r3, r0
 8006af6:	e000      	b.n	8006afa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d12a      	bne.n	8006bb4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b72:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b92:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d107      	bne.n	8006bb4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0210 	bic.w	r2, r2, #16
 8006bb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff ffb1 	bl	8006b2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bc8:	e002      	b.n	8006bd0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f7fb ffaa 	bl	8002b24 <HAL_UART_RxCpltCallback>
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d108      	bne.n	8006c00 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ff96 	bl	8006b2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bfe:	e002      	b.n	8006c06 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff ff7e 	bl	8006b02 <HAL_UART_RxHalfCpltCallback>
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b21      	cmp	r3, #33	; 0x21
 8006c40:	d108      	bne.n	8006c54 <UART_DMAError+0x46>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c4e:	68b8      	ldr	r0, [r7, #8]
 8006c50:	f000 f88c 	bl	8006d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b22      	cmp	r3, #34	; 0x22
 8006c74:	d108      	bne.n	8006c88 <UART_DMAError+0x7a>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c82:	68b8      	ldr	r0, [r7, #8]
 8006c84:	f000 f888 	bl	8006d98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	f043 0210 	orr.w	r2, r3, #16
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c94:	68b8      	ldr	r0, [r7, #8]
 8006c96:	f7ff ff3e 	bl	8006b16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2222      	movs	r2, #34	; 0x22
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <UART_Start_Receive_DMA+0xbc>)
 8006cd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <UART_Start_Receive_DMA+0xc0>)
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	4a21      	ldr	r2, [pc, #132]	; (8006d68 <UART_Start_Receive_DMA+0xc4>)
 8006ce2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	2200      	movs	r2, #0
 8006cea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cec:	f107 0308 	add.w	r3, r7, #8
 8006cf0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	f7fc fbd8 	bl	80034b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d34:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695a      	ldr	r2, [r3, #20]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695a      	ldr	r2, [r3, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d54:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	08006b43 	.word	0x08006b43
 8006d64:	08006bd9 	.word	0x08006bd9
 8006d68:	08006c0f 	.word	0x08006c0f

08006d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006d82:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d107      	bne.n	8006dd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0210 	bic.w	r2, r2, #16
 8006dd6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	b09f      	sub	sp, #124	; 0x7c
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0a:	68d9      	ldr	r1, [r3, #12]
 8006e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	ea40 0301 	orr.w	r3, r0, r1
 8006e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	431a      	orrs	r2, r3
 8006e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e38:	f021 010c 	bic.w	r1, r1, #12
 8006e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e42:	430b      	orrs	r3, r1
 8006e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	6999      	ldr	r1, [r3, #24]
 8006e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	ea40 0301 	orr.w	r3, r0, r1
 8006e5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4bc5      	ldr	r3, [pc, #788]	; (8007178 <UART_SetConfig+0x384>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d004      	beq.n	8006e72 <UART_SetConfig+0x7e>
 8006e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	4bc3      	ldr	r3, [pc, #780]	; (800717c <UART_SetConfig+0x388>)
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d103      	bne.n	8006e7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e72:	f7fe fbd1 	bl	8005618 <HAL_RCC_GetPCLK2Freq>
 8006e76:	6778      	str	r0, [r7, #116]	; 0x74
 8006e78:	e002      	b.n	8006e80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e7a:	f7fe fbb9 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8006e7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e88:	f040 80b6 	bne.w	8006ff8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e8e:	461c      	mov	r4, r3
 8006e90:	f04f 0500 	mov.w	r5, #0
 8006e94:	4622      	mov	r2, r4
 8006e96:	462b      	mov	r3, r5
 8006e98:	1891      	adds	r1, r2, r2
 8006e9a:	6439      	str	r1, [r7, #64]	; 0x40
 8006e9c:	415b      	adcs	r3, r3
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ea4:	1912      	adds	r2, r2, r4
 8006ea6:	eb45 0303 	adc.w	r3, r5, r3
 8006eaa:	f04f 0000 	mov.w	r0, #0
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	00d9      	lsls	r1, r3, #3
 8006eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eb8:	00d0      	lsls	r0, r2, #3
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	1911      	adds	r1, r2, r4
 8006ec0:	6639      	str	r1, [r7, #96]	; 0x60
 8006ec2:	416b      	adcs	r3, r5
 8006ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	1891      	adds	r1, r2, r2
 8006ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ed4:	415b      	adcs	r3, r3
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ee0:	f7f9 fe56 	bl	8000b90 <__aeabi_uldivmod>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4ba5      	ldr	r3, [pc, #660]	; (8007180 <UART_SetConfig+0x38c>)
 8006eea:	fba3 2302 	umull	r2, r3, r3, r2
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	011e      	lsls	r6, r3, #4
 8006ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef4:	461c      	mov	r4, r3
 8006ef6:	f04f 0500 	mov.w	r5, #0
 8006efa:	4622      	mov	r2, r4
 8006efc:	462b      	mov	r3, r5
 8006efe:	1891      	adds	r1, r2, r2
 8006f00:	6339      	str	r1, [r7, #48]	; 0x30
 8006f02:	415b      	adcs	r3, r3
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
 8006f06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f0a:	1912      	adds	r2, r2, r4
 8006f0c:	eb45 0303 	adc.w	r3, r5, r3
 8006f10:	f04f 0000 	mov.w	r0, #0
 8006f14:	f04f 0100 	mov.w	r1, #0
 8006f18:	00d9      	lsls	r1, r3, #3
 8006f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f1e:	00d0      	lsls	r0, r2, #3
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	1911      	adds	r1, r2, r4
 8006f26:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f28:	416b      	adcs	r3, r5
 8006f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	461a      	mov	r2, r3
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	1891      	adds	r1, r2, r2
 8006f38:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f3a:	415b      	adcs	r3, r3
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006f46:	f7f9 fe23 	bl	8000b90 <__aeabi_uldivmod>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4b8c      	ldr	r3, [pc, #560]	; (8007180 <UART_SetConfig+0x38c>)
 8006f50:	fba3 1302 	umull	r1, r3, r3, r2
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	2164      	movs	r1, #100	; 0x64
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	3332      	adds	r3, #50	; 0x32
 8006f62:	4a87      	ldr	r2, [pc, #540]	; (8007180 <UART_SetConfig+0x38c>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f70:	441e      	add	r6, r3
 8006f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f74:	4618      	mov	r0, r3
 8006f76:	f04f 0100 	mov.w	r1, #0
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	1894      	adds	r4, r2, r2
 8006f80:	623c      	str	r4, [r7, #32]
 8006f82:	415b      	adcs	r3, r3
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
 8006f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f8a:	1812      	adds	r2, r2, r0
 8006f8c:	eb41 0303 	adc.w	r3, r1, r3
 8006f90:	f04f 0400 	mov.w	r4, #0
 8006f94:	f04f 0500 	mov.w	r5, #0
 8006f98:	00dd      	lsls	r5, r3, #3
 8006f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f9e:	00d4      	lsls	r4, r2, #3
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	1814      	adds	r4, r2, r0
 8006fa6:	653c      	str	r4, [r7, #80]	; 0x50
 8006fa8:	414b      	adcs	r3, r1
 8006faa:	657b      	str	r3, [r7, #84]	; 0x54
 8006fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	1891      	adds	r1, r2, r2
 8006fb8:	61b9      	str	r1, [r7, #24]
 8006fba:	415b      	adcs	r3, r3
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fc6:	f7f9 fde3 	bl	8000b90 <__aeabi_uldivmod>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4b6c      	ldr	r3, [pc, #432]	; (8007180 <UART_SetConfig+0x38c>)
 8006fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	2164      	movs	r1, #100	; 0x64
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	3332      	adds	r3, #50	; 0x32
 8006fe2:	4a67      	ldr	r2, [pc, #412]	; (8007180 <UART_SetConfig+0x38c>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f003 0207 	and.w	r2, r3, #7
 8006fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4432      	add	r2, r6
 8006ff4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ff6:	e0b9      	b.n	800716c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ffa:	461c      	mov	r4, r3
 8006ffc:	f04f 0500 	mov.w	r5, #0
 8007000:	4622      	mov	r2, r4
 8007002:	462b      	mov	r3, r5
 8007004:	1891      	adds	r1, r2, r2
 8007006:	6139      	str	r1, [r7, #16]
 8007008:	415b      	adcs	r3, r3
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007010:	1912      	adds	r2, r2, r4
 8007012:	eb45 0303 	adc.w	r3, r5, r3
 8007016:	f04f 0000 	mov.w	r0, #0
 800701a:	f04f 0100 	mov.w	r1, #0
 800701e:	00d9      	lsls	r1, r3, #3
 8007020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007024:	00d0      	lsls	r0, r2, #3
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	eb12 0804 	adds.w	r8, r2, r4
 800702e:	eb43 0905 	adc.w	r9, r3, r5
 8007032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4618      	mov	r0, r3
 8007038:	f04f 0100 	mov.w	r1, #0
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	008b      	lsls	r3, r1, #2
 8007046:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800704a:	0082      	lsls	r2, r0, #2
 800704c:	4640      	mov	r0, r8
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fd9e 	bl	8000b90 <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4b49      	ldr	r3, [pc, #292]	; (8007180 <UART_SetConfig+0x38c>)
 800705a:	fba3 2302 	umull	r2, r3, r3, r2
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	011e      	lsls	r6, r3, #4
 8007062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007064:	4618      	mov	r0, r3
 8007066:	f04f 0100 	mov.w	r1, #0
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	1894      	adds	r4, r2, r2
 8007070:	60bc      	str	r4, [r7, #8]
 8007072:	415b      	adcs	r3, r3
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800707a:	1812      	adds	r2, r2, r0
 800707c:	eb41 0303 	adc.w	r3, r1, r3
 8007080:	f04f 0400 	mov.w	r4, #0
 8007084:	f04f 0500 	mov.w	r5, #0
 8007088:	00dd      	lsls	r5, r3, #3
 800708a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800708e:	00d4      	lsls	r4, r2, #3
 8007090:	4622      	mov	r2, r4
 8007092:	462b      	mov	r3, r5
 8007094:	1814      	adds	r4, r2, r0
 8007096:	64bc      	str	r4, [r7, #72]	; 0x48
 8007098:	414b      	adcs	r3, r1
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f04f 0100 	mov.w	r1, #0
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	008b      	lsls	r3, r1, #2
 80070b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070b4:	0082      	lsls	r2, r0, #2
 80070b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070ba:	f7f9 fd69 	bl	8000b90 <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4b2f      	ldr	r3, [pc, #188]	; (8007180 <UART_SetConfig+0x38c>)
 80070c4:	fba3 1302 	umull	r1, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	2164      	movs	r1, #100	; 0x64
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	3332      	adds	r3, #50	; 0x32
 80070d6:	4a2a      	ldr	r2, [pc, #168]	; (8007180 <UART_SetConfig+0x38c>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070e2:	441e      	add	r6, r3
 80070e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e6:	4618      	mov	r0, r3
 80070e8:	f04f 0100 	mov.w	r1, #0
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	1894      	adds	r4, r2, r2
 80070f2:	603c      	str	r4, [r7, #0]
 80070f4:	415b      	adcs	r3, r3
 80070f6:	607b      	str	r3, [r7, #4]
 80070f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070fc:	1812      	adds	r2, r2, r0
 80070fe:	eb41 0303 	adc.w	r3, r1, r3
 8007102:	f04f 0400 	mov.w	r4, #0
 8007106:	f04f 0500 	mov.w	r5, #0
 800710a:	00dd      	lsls	r5, r3, #3
 800710c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007110:	00d4      	lsls	r4, r2, #3
 8007112:	4622      	mov	r2, r4
 8007114:	462b      	mov	r3, r5
 8007116:	eb12 0a00 	adds.w	sl, r2, r0
 800711a:	eb43 0b01 	adc.w	fp, r3, r1
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4618      	mov	r0, r3
 8007124:	f04f 0100 	mov.w	r1, #0
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	008b      	lsls	r3, r1, #2
 8007132:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007136:	0082      	lsls	r2, r0, #2
 8007138:	4650      	mov	r0, sl
 800713a:	4659      	mov	r1, fp
 800713c:	f7f9 fd28 	bl	8000b90 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <UART_SetConfig+0x38c>)
 8007146:	fba3 1302 	umull	r1, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2164      	movs	r1, #100	; 0x64
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	3332      	adds	r3, #50	; 0x32
 8007158:	4a09      	ldr	r2, [pc, #36]	; (8007180 <UART_SetConfig+0x38c>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4432      	add	r2, r6
 800716a:	609a      	str	r2, [r3, #8]
}
 800716c:	bf00      	nop
 800716e:	377c      	adds	r7, #124	; 0x7c
 8007170:	46bd      	mov	sp, r7
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	bf00      	nop
 8007178:	40011000 	.word	0x40011000
 800717c:	40011400 	.word	0x40011400
 8007180:	51eb851f 	.word	0x51eb851f

08007184 <__errno>:
 8007184:	4b01      	ldr	r3, [pc, #4]	; (800718c <__errno+0x8>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000024 	.word	0x20000024

08007190 <__libc_init_array>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	4d0d      	ldr	r5, [pc, #52]	; (80071c8 <__libc_init_array+0x38>)
 8007194:	4c0d      	ldr	r4, [pc, #52]	; (80071cc <__libc_init_array+0x3c>)
 8007196:	1b64      	subs	r4, r4, r5
 8007198:	10a4      	asrs	r4, r4, #2
 800719a:	2600      	movs	r6, #0
 800719c:	42a6      	cmp	r6, r4
 800719e:	d109      	bne.n	80071b4 <__libc_init_array+0x24>
 80071a0:	4d0b      	ldr	r5, [pc, #44]	; (80071d0 <__libc_init_array+0x40>)
 80071a2:	4c0c      	ldr	r4, [pc, #48]	; (80071d4 <__libc_init_array+0x44>)
 80071a4:	f001 fb96 	bl	80088d4 <_init>
 80071a8:	1b64      	subs	r4, r4, r5
 80071aa:	10a4      	asrs	r4, r4, #2
 80071ac:	2600      	movs	r6, #0
 80071ae:	42a6      	cmp	r6, r4
 80071b0:	d105      	bne.n	80071be <__libc_init_array+0x2e>
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b8:	4798      	blx	r3
 80071ba:	3601      	adds	r6, #1
 80071bc:	e7ee      	b.n	800719c <__libc_init_array+0xc>
 80071be:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c2:	4798      	blx	r3
 80071c4:	3601      	adds	r6, #1
 80071c6:	e7f2      	b.n	80071ae <__libc_init_array+0x1e>
 80071c8:	08008af8 	.word	0x08008af8
 80071cc:	08008af8 	.word	0x08008af8
 80071d0:	08008af8 	.word	0x08008af8
 80071d4:	08008afc 	.word	0x08008afc

080071d8 <memset>:
 80071d8:	4402      	add	r2, r0
 80071da:	4603      	mov	r3, r0
 80071dc:	4293      	cmp	r3, r2
 80071de:	d100      	bne.n	80071e2 <memset+0xa>
 80071e0:	4770      	bx	lr
 80071e2:	f803 1b01 	strb.w	r1, [r3], #1
 80071e6:	e7f9      	b.n	80071dc <memset+0x4>

080071e8 <sin>:
 80071e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ea:	ec53 2b10 	vmov	r2, r3, d0
 80071ee:	4826      	ldr	r0, [pc, #152]	; (8007288 <sin+0xa0>)
 80071f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80071f4:	4281      	cmp	r1, r0
 80071f6:	dc07      	bgt.n	8007208 <sin+0x20>
 80071f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007280 <sin+0x98>
 80071fc:	2000      	movs	r0, #0
 80071fe:	f001 f993 	bl	8008528 <__kernel_sin>
 8007202:	ec51 0b10 	vmov	r0, r1, d0
 8007206:	e007      	b.n	8007218 <sin+0x30>
 8007208:	4820      	ldr	r0, [pc, #128]	; (800728c <sin+0xa4>)
 800720a:	4281      	cmp	r1, r0
 800720c:	dd09      	ble.n	8007222 <sin+0x3a>
 800720e:	ee10 0a10 	vmov	r0, s0
 8007212:	4619      	mov	r1, r3
 8007214:	f7f8 ffdc 	bl	80001d0 <__aeabi_dsub>
 8007218:	ec41 0b10 	vmov	d0, r0, r1
 800721c:	b005      	add	sp, #20
 800721e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007222:	4668      	mov	r0, sp
 8007224:	f000 fab8 	bl	8007798 <__ieee754_rem_pio2>
 8007228:	f000 0003 	and.w	r0, r0, #3
 800722c:	2801      	cmp	r0, #1
 800722e:	d008      	beq.n	8007242 <sin+0x5a>
 8007230:	2802      	cmp	r0, #2
 8007232:	d00d      	beq.n	8007250 <sin+0x68>
 8007234:	b9d0      	cbnz	r0, 800726c <sin+0x84>
 8007236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800723a:	ed9d 0b00 	vldr	d0, [sp]
 800723e:	2001      	movs	r0, #1
 8007240:	e7dd      	b.n	80071fe <sin+0x16>
 8007242:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007246:	ed9d 0b00 	vldr	d0, [sp]
 800724a:	f000 fd65 	bl	8007d18 <__kernel_cos>
 800724e:	e7d8      	b.n	8007202 <sin+0x1a>
 8007250:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007254:	ed9d 0b00 	vldr	d0, [sp]
 8007258:	2001      	movs	r0, #1
 800725a:	f001 f965 	bl	8008528 <__kernel_sin>
 800725e:	ec53 2b10 	vmov	r2, r3, d0
 8007262:	ee10 0a10 	vmov	r0, s0
 8007266:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800726a:	e7d5      	b.n	8007218 <sin+0x30>
 800726c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007270:	ed9d 0b00 	vldr	d0, [sp]
 8007274:	f000 fd50 	bl	8007d18 <__kernel_cos>
 8007278:	e7f1      	b.n	800725e <sin+0x76>
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w
	...
 8007288:	3fe921fb 	.word	0x3fe921fb
 800728c:	7fefffff 	.word	0x7fefffff

08007290 <asin>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	ed2d 8b02 	vpush	{d8}
 8007296:	ec55 4b10 	vmov	r4, r5, d0
 800729a:	f000 f869 	bl	8007370 <__ieee754_asin>
 800729e:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <asin+0x68>)
 80072a0:	eeb0 8a40 	vmov.f32	s16, s0
 80072a4:	eef0 8a60 	vmov.f32	s17, s1
 80072a8:	f993 3000 	ldrsb.w	r3, [r3]
 80072ac:	3301      	adds	r3, #1
 80072ae:	d01c      	beq.n	80072ea <asin+0x5a>
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f9 fbdc 	bl	8000a74 <__aeabi_dcmpun>
 80072bc:	b9a8      	cbnz	r0, 80072ea <asin+0x5a>
 80072be:	ec45 4b10 	vmov	d0, r4, r5
 80072c2:	f001 f9ef 	bl	80086a4 <fabs>
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <asin+0x6c>)
 80072c8:	ec51 0b10 	vmov	r0, r1, d0
 80072cc:	2200      	movs	r2, #0
 80072ce:	f7f9 fbc7 	bl	8000a60 <__aeabi_dcmpgt>
 80072d2:	b150      	cbz	r0, 80072ea <asin+0x5a>
 80072d4:	f7ff ff56 	bl	8007184 <__errno>
 80072d8:	ecbd 8b02 	vpop	{d8}
 80072dc:	2321      	movs	r3, #33	; 0x21
 80072de:	6003      	str	r3, [r0, #0]
 80072e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e4:	4806      	ldr	r0, [pc, #24]	; (8007300 <asin+0x70>)
 80072e6:	f001 ba67 	b.w	80087b8 <nan>
 80072ea:	eeb0 0a48 	vmov.f32	s0, s16
 80072ee:	eef0 0a68 	vmov.f32	s1, s17
 80072f2:	ecbd 8b02 	vpop	{d8}
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000088 	.word	0x20000088
 80072fc:	3ff00000 	.word	0x3ff00000
 8007300:	08008910 	.word	0x08008910

08007304 <sqrt>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	ed2d 8b02 	vpush	{d8}
 800730a:	ec55 4b10 	vmov	r4, r5, d0
 800730e:	f000 fc4d 	bl	8007bac <__ieee754_sqrt>
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <sqrt+0x64>)
 8007314:	eeb0 8a40 	vmov.f32	s16, s0
 8007318:	eef0 8a60 	vmov.f32	s17, s1
 800731c:	f993 3000 	ldrsb.w	r3, [r3]
 8007320:	3301      	adds	r3, #1
 8007322:	d019      	beq.n	8007358 <sqrt+0x54>
 8007324:	4622      	mov	r2, r4
 8007326:	462b      	mov	r3, r5
 8007328:	4620      	mov	r0, r4
 800732a:	4629      	mov	r1, r5
 800732c:	f7f9 fba2 	bl	8000a74 <__aeabi_dcmpun>
 8007330:	b990      	cbnz	r0, 8007358 <sqrt+0x54>
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	4620      	mov	r0, r4
 8007338:	4629      	mov	r1, r5
 800733a:	f7f9 fb73 	bl	8000a24 <__aeabi_dcmplt>
 800733e:	b158      	cbz	r0, 8007358 <sqrt+0x54>
 8007340:	f7ff ff20 	bl	8007184 <__errno>
 8007344:	2321      	movs	r3, #33	; 0x21
 8007346:	6003      	str	r3, [r0, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	4610      	mov	r0, r2
 800734e:	4619      	mov	r1, r3
 8007350:	f7f9 fa20 	bl	8000794 <__aeabi_ddiv>
 8007354:	ec41 0b18 	vmov	d8, r0, r1
 8007358:	eeb0 0a48 	vmov.f32	s0, s16
 800735c:	eef0 0a68 	vmov.f32	s1, s17
 8007360:	ecbd 8b02 	vpop	{d8}
 8007364:	bd38      	pop	{r3, r4, r5, pc}
 8007366:	bf00      	nop
 8007368:	20000088 	.word	0x20000088
 800736c:	00000000 	.word	0x00000000

08007370 <__ieee754_asin>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	ed2d 8b04 	vpush	{d8-d9}
 8007378:	ec55 4b10 	vmov	r4, r5, d0
 800737c:	4bcc      	ldr	r3, [pc, #816]	; (80076b0 <__ieee754_asin+0x340>)
 800737e:	b083      	sub	sp, #12
 8007380:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007384:	4598      	cmp	r8, r3
 8007386:	9501      	str	r5, [sp, #4]
 8007388:	dd35      	ble.n	80073f6 <__ieee754_asin+0x86>
 800738a:	ee10 3a10 	vmov	r3, s0
 800738e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007392:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007396:	ea58 0303 	orrs.w	r3, r8, r3
 800739a:	d117      	bne.n	80073cc <__ieee754_asin+0x5c>
 800739c:	a3aa      	add	r3, pc, #680	; (adr r3, 8007648 <__ieee754_asin+0x2d8>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	ee10 0a10 	vmov	r0, s0
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7f9 f8ca 	bl	8000540 <__aeabi_dmul>
 80073ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8007650 <__ieee754_asin+0x2e0>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f9 f8c1 	bl	8000540 <__aeabi_dmul>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4630      	mov	r0, r6
 80073c4:	4639      	mov	r1, r7
 80073c6:	f7f8 ff05 	bl	80001d4 <__adddf3>
 80073ca:	e00b      	b.n	80073e4 <__ieee754_asin+0x74>
 80073cc:	ee10 2a10 	vmov	r2, s0
 80073d0:	462b      	mov	r3, r5
 80073d2:	ee10 0a10 	vmov	r0, s0
 80073d6:	4629      	mov	r1, r5
 80073d8:	f7f8 fefa 	bl	80001d0 <__aeabi_dsub>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	f7f9 f9d8 	bl	8000794 <__aeabi_ddiv>
 80073e4:	4604      	mov	r4, r0
 80073e6:	460d      	mov	r5, r1
 80073e8:	ec45 4b10 	vmov	d0, r4, r5
 80073ec:	b003      	add	sp, #12
 80073ee:	ecbd 8b04 	vpop	{d8-d9}
 80073f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f6:	4baf      	ldr	r3, [pc, #700]	; (80076b4 <__ieee754_asin+0x344>)
 80073f8:	4598      	cmp	r8, r3
 80073fa:	dc11      	bgt.n	8007420 <__ieee754_asin+0xb0>
 80073fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007400:	f280 80ae 	bge.w	8007560 <__ieee754_asin+0x1f0>
 8007404:	a394      	add	r3, pc, #592	; (adr r3, 8007658 <__ieee754_asin+0x2e8>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	ee10 0a10 	vmov	r0, s0
 800740e:	4629      	mov	r1, r5
 8007410:	f7f8 fee0 	bl	80001d4 <__adddf3>
 8007414:	4ba8      	ldr	r3, [pc, #672]	; (80076b8 <__ieee754_asin+0x348>)
 8007416:	2200      	movs	r2, #0
 8007418:	f7f9 fb22 	bl	8000a60 <__aeabi_dcmpgt>
 800741c:	2800      	cmp	r0, #0
 800741e:	d1e3      	bne.n	80073e8 <__ieee754_asin+0x78>
 8007420:	ec45 4b10 	vmov	d0, r4, r5
 8007424:	f001 f93e 	bl	80086a4 <fabs>
 8007428:	49a3      	ldr	r1, [pc, #652]	; (80076b8 <__ieee754_asin+0x348>)
 800742a:	ec53 2b10 	vmov	r2, r3, d0
 800742e:	2000      	movs	r0, #0
 8007430:	f7f8 fece 	bl	80001d0 <__aeabi_dsub>
 8007434:	4ba1      	ldr	r3, [pc, #644]	; (80076bc <__ieee754_asin+0x34c>)
 8007436:	2200      	movs	r2, #0
 8007438:	f7f9 f882 	bl	8000540 <__aeabi_dmul>
 800743c:	a388      	add	r3, pc, #544	; (adr r3, 8007660 <__ieee754_asin+0x2f0>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	4604      	mov	r4, r0
 8007444:	460d      	mov	r5, r1
 8007446:	f7f9 f87b 	bl	8000540 <__aeabi_dmul>
 800744a:	a387      	add	r3, pc, #540	; (adr r3, 8007668 <__ieee754_asin+0x2f8>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f8 fec0 	bl	80001d4 <__adddf3>
 8007454:	4622      	mov	r2, r4
 8007456:	462b      	mov	r3, r5
 8007458:	f7f9 f872 	bl	8000540 <__aeabi_dmul>
 800745c:	a384      	add	r3, pc, #528	; (adr r3, 8007670 <__ieee754_asin+0x300>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 feb5 	bl	80001d0 <__aeabi_dsub>
 8007466:	4622      	mov	r2, r4
 8007468:	462b      	mov	r3, r5
 800746a:	f7f9 f869 	bl	8000540 <__aeabi_dmul>
 800746e:	a382      	add	r3, pc, #520	; (adr r3, 8007678 <__ieee754_asin+0x308>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f7f8 feae 	bl	80001d4 <__adddf3>
 8007478:	4622      	mov	r2, r4
 800747a:	462b      	mov	r3, r5
 800747c:	f7f9 f860 	bl	8000540 <__aeabi_dmul>
 8007480:	a37f      	add	r3, pc, #508	; (adr r3, 8007680 <__ieee754_asin+0x310>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f7f8 fea3 	bl	80001d0 <__aeabi_dsub>
 800748a:	4622      	mov	r2, r4
 800748c:	462b      	mov	r3, r5
 800748e:	f7f9 f857 	bl	8000540 <__aeabi_dmul>
 8007492:	a37d      	add	r3, pc, #500	; (adr r3, 8007688 <__ieee754_asin+0x318>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f8 fe9c 	bl	80001d4 <__adddf3>
 800749c:	4622      	mov	r2, r4
 800749e:	462b      	mov	r3, r5
 80074a0:	f7f9 f84e 	bl	8000540 <__aeabi_dmul>
 80074a4:	a37a      	add	r3, pc, #488	; (adr r3, 8007690 <__ieee754_asin+0x320>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	ec41 0b18 	vmov	d8, r0, r1
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7f9 f845 	bl	8000540 <__aeabi_dmul>
 80074b6:	a378      	add	r3, pc, #480	; (adr r3, 8007698 <__ieee754_asin+0x328>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f7f8 fe88 	bl	80001d0 <__aeabi_dsub>
 80074c0:	4622      	mov	r2, r4
 80074c2:	462b      	mov	r3, r5
 80074c4:	f7f9 f83c 	bl	8000540 <__aeabi_dmul>
 80074c8:	a375      	add	r3, pc, #468	; (adr r3, 80076a0 <__ieee754_asin+0x330>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f8 fe81 	bl	80001d4 <__adddf3>
 80074d2:	4622      	mov	r2, r4
 80074d4:	462b      	mov	r3, r5
 80074d6:	f7f9 f833 	bl	8000540 <__aeabi_dmul>
 80074da:	a373      	add	r3, pc, #460	; (adr r3, 80076a8 <__ieee754_asin+0x338>)
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f7f8 fe76 	bl	80001d0 <__aeabi_dsub>
 80074e4:	4622      	mov	r2, r4
 80074e6:	462b      	mov	r3, r5
 80074e8:	f7f9 f82a 	bl	8000540 <__aeabi_dmul>
 80074ec:	4b72      	ldr	r3, [pc, #456]	; (80076b8 <__ieee754_asin+0x348>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	f7f8 fe70 	bl	80001d4 <__adddf3>
 80074f4:	ec45 4b10 	vmov	d0, r4, r5
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	f000 fb56 	bl	8007bac <__ieee754_sqrt>
 8007500:	4b6f      	ldr	r3, [pc, #444]	; (80076c0 <__ieee754_asin+0x350>)
 8007502:	4598      	cmp	r8, r3
 8007504:	ec5b ab10 	vmov	sl, fp, d0
 8007508:	f340 80dc 	ble.w	80076c4 <__ieee754_asin+0x354>
 800750c:	4632      	mov	r2, r6
 800750e:	463b      	mov	r3, r7
 8007510:	ec51 0b18 	vmov	r0, r1, d8
 8007514:	f7f9 f93e 	bl	8000794 <__aeabi_ddiv>
 8007518:	4652      	mov	r2, sl
 800751a:	465b      	mov	r3, fp
 800751c:	f7f9 f810 	bl	8000540 <__aeabi_dmul>
 8007520:	4652      	mov	r2, sl
 8007522:	465b      	mov	r3, fp
 8007524:	f7f8 fe56 	bl	80001d4 <__adddf3>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	f7f8 fe52 	bl	80001d4 <__adddf3>
 8007530:	a347      	add	r3, pc, #284	; (adr r3, 8007650 <__ieee754_asin+0x2e0>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f7f8 fe4b 	bl	80001d0 <__aeabi_dsub>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	a142      	add	r1, pc, #264	; (adr r1, 8007648 <__ieee754_asin+0x2d8>)
 8007540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007544:	f7f8 fe44 	bl	80001d0 <__aeabi_dsub>
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	bfdc      	itt	le
 800754e:	4602      	movle	r2, r0
 8007550:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007554:	4604      	mov	r4, r0
 8007556:	460d      	mov	r5, r1
 8007558:	bfdc      	itt	le
 800755a:	4614      	movle	r4, r2
 800755c:	461d      	movle	r5, r3
 800755e:	e743      	b.n	80073e8 <__ieee754_asin+0x78>
 8007560:	ee10 2a10 	vmov	r2, s0
 8007564:	ee10 0a10 	vmov	r0, s0
 8007568:	462b      	mov	r3, r5
 800756a:	4629      	mov	r1, r5
 800756c:	f7f8 ffe8 	bl	8000540 <__aeabi_dmul>
 8007570:	a33b      	add	r3, pc, #236	; (adr r3, 8007660 <__ieee754_asin+0x2f0>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	f7f8 ffe1 	bl	8000540 <__aeabi_dmul>
 800757e:	a33a      	add	r3, pc, #232	; (adr r3, 8007668 <__ieee754_asin+0x2f8>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f8 fe26 	bl	80001d4 <__adddf3>
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	f7f8 ffd8 	bl	8000540 <__aeabi_dmul>
 8007590:	a337      	add	r3, pc, #220	; (adr r3, 8007670 <__ieee754_asin+0x300>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f8 fe1b 	bl	80001d0 <__aeabi_dsub>
 800759a:	4632      	mov	r2, r6
 800759c:	463b      	mov	r3, r7
 800759e:	f7f8 ffcf 	bl	8000540 <__aeabi_dmul>
 80075a2:	a335      	add	r3, pc, #212	; (adr r3, 8007678 <__ieee754_asin+0x308>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f8 fe14 	bl	80001d4 <__adddf3>
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	f7f8 ffc6 	bl	8000540 <__aeabi_dmul>
 80075b4:	a332      	add	r3, pc, #200	; (adr r3, 8007680 <__ieee754_asin+0x310>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f7f8 fe09 	bl	80001d0 <__aeabi_dsub>
 80075be:	4632      	mov	r2, r6
 80075c0:	463b      	mov	r3, r7
 80075c2:	f7f8 ffbd 	bl	8000540 <__aeabi_dmul>
 80075c6:	a330      	add	r3, pc, #192	; (adr r3, 8007688 <__ieee754_asin+0x318>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f8 fe02 	bl	80001d4 <__adddf3>
 80075d0:	4632      	mov	r2, r6
 80075d2:	463b      	mov	r3, r7
 80075d4:	f7f8 ffb4 	bl	8000540 <__aeabi_dmul>
 80075d8:	a32d      	add	r3, pc, #180	; (adr r3, 8007690 <__ieee754_asin+0x320>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	4680      	mov	r8, r0
 80075e0:	4689      	mov	r9, r1
 80075e2:	4630      	mov	r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	f7f8 ffab 	bl	8000540 <__aeabi_dmul>
 80075ea:	a32b      	add	r3, pc, #172	; (adr r3, 8007698 <__ieee754_asin+0x328>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f8 fdee 	bl	80001d0 <__aeabi_dsub>
 80075f4:	4632      	mov	r2, r6
 80075f6:	463b      	mov	r3, r7
 80075f8:	f7f8 ffa2 	bl	8000540 <__aeabi_dmul>
 80075fc:	a328      	add	r3, pc, #160	; (adr r3, 80076a0 <__ieee754_asin+0x330>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fde7 	bl	80001d4 <__adddf3>
 8007606:	4632      	mov	r2, r6
 8007608:	463b      	mov	r3, r7
 800760a:	f7f8 ff99 	bl	8000540 <__aeabi_dmul>
 800760e:	a326      	add	r3, pc, #152	; (adr r3, 80076a8 <__ieee754_asin+0x338>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f8 fddc 	bl	80001d0 <__aeabi_dsub>
 8007618:	4632      	mov	r2, r6
 800761a:	463b      	mov	r3, r7
 800761c:	f7f8 ff90 	bl	8000540 <__aeabi_dmul>
 8007620:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <__ieee754_asin+0x348>)
 8007622:	2200      	movs	r2, #0
 8007624:	f7f8 fdd6 	bl	80001d4 <__adddf3>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4640      	mov	r0, r8
 800762e:	4649      	mov	r1, r9
 8007630:	f7f9 f8b0 	bl	8000794 <__aeabi_ddiv>
 8007634:	4622      	mov	r2, r4
 8007636:	462b      	mov	r3, r5
 8007638:	f7f8 ff82 	bl	8000540 <__aeabi_dmul>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	e6bf      	b.n	80073c6 <__ieee754_asin+0x56>
 8007646:	bf00      	nop
 8007648:	54442d18 	.word	0x54442d18
 800764c:	3ff921fb 	.word	0x3ff921fb
 8007650:	33145c07 	.word	0x33145c07
 8007654:	3c91a626 	.word	0x3c91a626
 8007658:	8800759c 	.word	0x8800759c
 800765c:	7e37e43c 	.word	0x7e37e43c
 8007660:	0dfdf709 	.word	0x0dfdf709
 8007664:	3f023de1 	.word	0x3f023de1
 8007668:	7501b288 	.word	0x7501b288
 800766c:	3f49efe0 	.word	0x3f49efe0
 8007670:	b5688f3b 	.word	0xb5688f3b
 8007674:	3fa48228 	.word	0x3fa48228
 8007678:	0e884455 	.word	0x0e884455
 800767c:	3fc9c155 	.word	0x3fc9c155
 8007680:	03eb6f7d 	.word	0x03eb6f7d
 8007684:	3fd4d612 	.word	0x3fd4d612
 8007688:	55555555 	.word	0x55555555
 800768c:	3fc55555 	.word	0x3fc55555
 8007690:	b12e9282 	.word	0xb12e9282
 8007694:	3fb3b8c5 	.word	0x3fb3b8c5
 8007698:	1b8d0159 	.word	0x1b8d0159
 800769c:	3fe6066c 	.word	0x3fe6066c
 80076a0:	9c598ac8 	.word	0x9c598ac8
 80076a4:	40002ae5 	.word	0x40002ae5
 80076a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80076ac:	40033a27 	.word	0x40033a27
 80076b0:	3fefffff 	.word	0x3fefffff
 80076b4:	3fdfffff 	.word	0x3fdfffff
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	3fe00000 	.word	0x3fe00000
 80076c0:	3fef3332 	.word	0x3fef3332
 80076c4:	ee10 2a10 	vmov	r2, s0
 80076c8:	ee10 0a10 	vmov	r0, s0
 80076cc:	465b      	mov	r3, fp
 80076ce:	4659      	mov	r1, fp
 80076d0:	f7f8 fd80 	bl	80001d4 <__adddf3>
 80076d4:	4632      	mov	r2, r6
 80076d6:	463b      	mov	r3, r7
 80076d8:	ec41 0b19 	vmov	d9, r0, r1
 80076dc:	ec51 0b18 	vmov	r0, r1, d8
 80076e0:	f7f9 f858 	bl	8000794 <__aeabi_ddiv>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	ec51 0b19 	vmov	r0, r1, d9
 80076ec:	f7f8 ff28 	bl	8000540 <__aeabi_dmul>
 80076f0:	f04f 0800 	mov.w	r8, #0
 80076f4:	4606      	mov	r6, r0
 80076f6:	460f      	mov	r7, r1
 80076f8:	4642      	mov	r2, r8
 80076fa:	465b      	mov	r3, fp
 80076fc:	4640      	mov	r0, r8
 80076fe:	4659      	mov	r1, fp
 8007700:	f7f8 ff1e 	bl	8000540 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4620      	mov	r0, r4
 800770a:	4629      	mov	r1, r5
 800770c:	f7f8 fd60 	bl	80001d0 <__aeabi_dsub>
 8007710:	4642      	mov	r2, r8
 8007712:	4604      	mov	r4, r0
 8007714:	460d      	mov	r5, r1
 8007716:	465b      	mov	r3, fp
 8007718:	4650      	mov	r0, sl
 800771a:	4659      	mov	r1, fp
 800771c:	f7f8 fd5a 	bl	80001d4 <__adddf3>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f7f9 f834 	bl	8000794 <__aeabi_ddiv>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	f7f8 fd50 	bl	80001d4 <__adddf3>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	a113      	add	r1, pc, #76	; (adr r1, 8007788 <__ieee754_asin+0x418>)
 800773a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800773e:	f7f8 fd47 	bl	80001d0 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4630      	mov	r0, r6
 8007748:	4639      	mov	r1, r7
 800774a:	f7f8 fd41 	bl	80001d0 <__aeabi_dsub>
 800774e:	4642      	mov	r2, r8
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	465b      	mov	r3, fp
 8007756:	4640      	mov	r0, r8
 8007758:	4659      	mov	r1, fp
 800775a:	f7f8 fd3b 	bl	80001d4 <__adddf3>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	a10b      	add	r1, pc, #44	; (adr r1, 8007790 <__ieee754_asin+0x420>)
 8007764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007768:	f7f8 fd32 	bl	80001d0 <__aeabi_dsub>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 fd2c 	bl	80001d0 <__aeabi_dsub>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	a104      	add	r1, pc, #16	; (adr r1, 8007790 <__ieee754_asin+0x420>)
 800777e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007782:	e6df      	b.n	8007544 <__ieee754_asin+0x1d4>
 8007784:	f3af 8000 	nop.w
 8007788:	33145c07 	.word	0x33145c07
 800778c:	3c91a626 	.word	0x3c91a626
 8007790:	54442d18 	.word	0x54442d18
 8007794:	3fe921fb 	.word	0x3fe921fb

08007798 <__ieee754_rem_pio2>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	ed2d 8b02 	vpush	{d8}
 80077a0:	ec55 4b10 	vmov	r4, r5, d0
 80077a4:	4bca      	ldr	r3, [pc, #808]	; (8007ad0 <__ieee754_rem_pio2+0x338>)
 80077a6:	b08b      	sub	sp, #44	; 0x2c
 80077a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80077ac:	4598      	cmp	r8, r3
 80077ae:	4682      	mov	sl, r0
 80077b0:	9502      	str	r5, [sp, #8]
 80077b2:	dc08      	bgt.n	80077c6 <__ieee754_rem_pio2+0x2e>
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	ed80 0b00 	vstr	d0, [r0]
 80077bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80077c0:	f04f 0b00 	mov.w	fp, #0
 80077c4:	e028      	b.n	8007818 <__ieee754_rem_pio2+0x80>
 80077c6:	4bc3      	ldr	r3, [pc, #780]	; (8007ad4 <__ieee754_rem_pio2+0x33c>)
 80077c8:	4598      	cmp	r8, r3
 80077ca:	dc78      	bgt.n	80078be <__ieee754_rem_pio2+0x126>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	4ec2      	ldr	r6, [pc, #776]	; (8007ad8 <__ieee754_rem_pio2+0x340>)
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	ee10 0a10 	vmov	r0, s0
 80077d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007a98 <__ieee754_rem_pio2+0x300>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	4629      	mov	r1, r5
 80077de:	dd39      	ble.n	8007854 <__ieee754_rem_pio2+0xbc>
 80077e0:	f7f8 fcf6 	bl	80001d0 <__aeabi_dsub>
 80077e4:	45b0      	cmp	r8, r6
 80077e6:	4604      	mov	r4, r0
 80077e8:	460d      	mov	r5, r1
 80077ea:	d01b      	beq.n	8007824 <__ieee754_rem_pio2+0x8c>
 80077ec:	a3ac      	add	r3, pc, #688	; (adr r3, 8007aa0 <__ieee754_rem_pio2+0x308>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f7f8 fced 	bl	80001d0 <__aeabi_dsub>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9ca 2300 	strd	r2, r3, [sl]
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f8 fce5 	bl	80001d0 <__aeabi_dsub>
 8007806:	a3a6      	add	r3, pc, #664	; (adr r3, 8007aa0 <__ieee754_rem_pio2+0x308>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fce0 	bl	80001d0 <__aeabi_dsub>
 8007810:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007814:	f04f 0b01 	mov.w	fp, #1
 8007818:	4658      	mov	r0, fp
 800781a:	b00b      	add	sp, #44	; 0x2c
 800781c:	ecbd 8b02 	vpop	{d8}
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	a3a0      	add	r3, pc, #640	; (adr r3, 8007aa8 <__ieee754_rem_pio2+0x310>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fcd1 	bl	80001d0 <__aeabi_dsub>
 800782e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x318>)
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	f7f8 fcca 	bl	80001d0 <__aeabi_dsub>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	e9ca 2300 	strd	r2, r3, [sl]
 8007844:	4620      	mov	r0, r4
 8007846:	4629      	mov	r1, r5
 8007848:	f7f8 fcc2 	bl	80001d0 <__aeabi_dsub>
 800784c:	a398      	add	r3, pc, #608	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x318>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	e7db      	b.n	800780c <__ieee754_rem_pio2+0x74>
 8007854:	f7f8 fcbe 	bl	80001d4 <__adddf3>
 8007858:	45b0      	cmp	r8, r6
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
 800785e:	d016      	beq.n	800788e <__ieee754_rem_pio2+0xf6>
 8007860:	a38f      	add	r3, pc, #572	; (adr r3, 8007aa0 <__ieee754_rem_pio2+0x308>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fcb5 	bl	80001d4 <__adddf3>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9ca 2300 	strd	r2, r3, [sl]
 8007872:	4620      	mov	r0, r4
 8007874:	4629      	mov	r1, r5
 8007876:	f7f8 fcab 	bl	80001d0 <__aeabi_dsub>
 800787a:	a389      	add	r3, pc, #548	; (adr r3, 8007aa0 <__ieee754_rem_pio2+0x308>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f7f8 fca8 	bl	80001d4 <__adddf3>
 8007884:	f04f 3bff 	mov.w	fp, #4294967295
 8007888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800788c:	e7c4      	b.n	8007818 <__ieee754_rem_pio2+0x80>
 800788e:	a386      	add	r3, pc, #536	; (adr r3, 8007aa8 <__ieee754_rem_pio2+0x310>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f7f8 fc9e 	bl	80001d4 <__adddf3>
 8007898:	a385      	add	r3, pc, #532	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x318>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	4604      	mov	r4, r0
 80078a0:	460d      	mov	r5, r1
 80078a2:	f7f8 fc97 	bl	80001d4 <__adddf3>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	e9ca 2300 	strd	r2, r3, [sl]
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f8 fc8d 	bl	80001d0 <__aeabi_dsub>
 80078b6:	a37e      	add	r3, pc, #504	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x318>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	e7e0      	b.n	8007880 <__ieee754_rem_pio2+0xe8>
 80078be:	4b87      	ldr	r3, [pc, #540]	; (8007adc <__ieee754_rem_pio2+0x344>)
 80078c0:	4598      	cmp	r8, r3
 80078c2:	f300 80d9 	bgt.w	8007a78 <__ieee754_rem_pio2+0x2e0>
 80078c6:	f000 feed 	bl	80086a4 <fabs>
 80078ca:	ec55 4b10 	vmov	r4, r5, d0
 80078ce:	ee10 0a10 	vmov	r0, s0
 80078d2:	a379      	add	r3, pc, #484	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x320>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 fe31 	bl	8000540 <__aeabi_dmul>
 80078de:	4b80      	ldr	r3, [pc, #512]	; (8007ae0 <__ieee754_rem_pio2+0x348>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	f7f8 fc77 	bl	80001d4 <__adddf3>
 80078e6:	f7f9 f8db 	bl	8000aa0 <__aeabi_d2iz>
 80078ea:	4683      	mov	fp, r0
 80078ec:	f7f8 fdbe 	bl	800046c <__aeabi_i2d>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	ec43 2b18 	vmov	d8, r2, r3
 80078f8:	a367      	add	r3, pc, #412	; (adr r3, 8007a98 <__ieee754_rem_pio2+0x300>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f7f8 fe1f 	bl	8000540 <__aeabi_dmul>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fc61 	bl	80001d0 <__aeabi_dsub>
 800790e:	a364      	add	r3, pc, #400	; (adr r3, 8007aa0 <__ieee754_rem_pio2+0x308>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	ec51 0b18 	vmov	r0, r1, d8
 800791c:	f7f8 fe10 	bl	8000540 <__aeabi_dmul>
 8007920:	f1bb 0f1f 	cmp.w	fp, #31
 8007924:	4604      	mov	r4, r0
 8007926:	460d      	mov	r5, r1
 8007928:	dc0d      	bgt.n	8007946 <__ieee754_rem_pio2+0x1ae>
 800792a:	4b6e      	ldr	r3, [pc, #440]	; (8007ae4 <__ieee754_rem_pio2+0x34c>)
 800792c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	4543      	cmp	r3, r8
 8007936:	d006      	beq.n	8007946 <__ieee754_rem_pio2+0x1ae>
 8007938:	4622      	mov	r2, r4
 800793a:	462b      	mov	r3, r5
 800793c:	4630      	mov	r0, r6
 800793e:	4639      	mov	r1, r7
 8007940:	f7f8 fc46 	bl	80001d0 <__aeabi_dsub>
 8007944:	e00f      	b.n	8007966 <__ieee754_rem_pio2+0x1ce>
 8007946:	462b      	mov	r3, r5
 8007948:	4622      	mov	r2, r4
 800794a:	4630      	mov	r0, r6
 800794c:	4639      	mov	r1, r7
 800794e:	f7f8 fc3f 	bl	80001d0 <__aeabi_dsub>
 8007952:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800795c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007960:	f1b8 0f10 	cmp.w	r8, #16
 8007964:	dc02      	bgt.n	800796c <__ieee754_rem_pio2+0x1d4>
 8007966:	e9ca 0100 	strd	r0, r1, [sl]
 800796a:	e039      	b.n	80079e0 <__ieee754_rem_pio2+0x248>
 800796c:	a34e      	add	r3, pc, #312	; (adr r3, 8007aa8 <__ieee754_rem_pio2+0x310>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	ec51 0b18 	vmov	r0, r1, d8
 8007976:	f7f8 fde3 	bl	8000540 <__aeabi_dmul>
 800797a:	4604      	mov	r4, r0
 800797c:	460d      	mov	r5, r1
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 fc23 	bl	80001d0 <__aeabi_dsub>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4680      	mov	r8, r0
 8007990:	4689      	mov	r9, r1
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f8 fc1b 	bl	80001d0 <__aeabi_dsub>
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
 800799e:	f7f8 fc17 	bl	80001d0 <__aeabi_dsub>
 80079a2:	a343      	add	r3, pc, #268	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x318>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	ec51 0b18 	vmov	r0, r1, d8
 80079b0:	f7f8 fdc6 	bl	8000540 <__aeabi_dmul>
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fc0a 	bl	80001d0 <__aeabi_dsub>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	4640      	mov	r0, r8
 80079c6:	4649      	mov	r1, r9
 80079c8:	f7f8 fc02 	bl	80001d0 <__aeabi_dsub>
 80079cc:	9a03      	ldr	r2, [sp, #12]
 80079ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b31      	cmp	r3, #49	; 0x31
 80079d6:	dc24      	bgt.n	8007a22 <__ieee754_rem_pio2+0x28a>
 80079d8:	e9ca 0100 	strd	r0, r1, [sl]
 80079dc:	4646      	mov	r6, r8
 80079de:	464f      	mov	r7, r9
 80079e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80079e4:	4630      	mov	r0, r6
 80079e6:	4642      	mov	r2, r8
 80079e8:	464b      	mov	r3, r9
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f8 fbf0 	bl	80001d0 <__aeabi_dsub>
 80079f0:	462b      	mov	r3, r5
 80079f2:	4622      	mov	r2, r4
 80079f4:	f7f8 fbec 	bl	80001d0 <__aeabi_dsub>
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a00:	f6bf af0a 	bge.w	8007818 <__ieee754_rem_pio2+0x80>
 8007a04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a08:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a0c:	f8ca 8000 	str.w	r8, [sl]
 8007a10:	f8ca 0008 	str.w	r0, [sl, #8]
 8007a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a18:	f8ca 300c 	str.w	r3, [sl, #12]
 8007a1c:	f1cb 0b00 	rsb	fp, fp, #0
 8007a20:	e6fa      	b.n	8007818 <__ieee754_rem_pio2+0x80>
 8007a22:	a327      	add	r3, pc, #156	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x328>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	ec51 0b18 	vmov	r0, r1, d8
 8007a2c:	f7f8 fd88 	bl	8000540 <__aeabi_dmul>
 8007a30:	4604      	mov	r4, r0
 8007a32:	460d      	mov	r5, r1
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4640      	mov	r0, r8
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	f7f8 fbc8 	bl	80001d0 <__aeabi_dsub>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	f7f8 fbc0 	bl	80001d0 <__aeabi_dsub>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	f7f8 fbbc 	bl	80001d0 <__aeabi_dsub>
 8007a58:	a31b      	add	r3, pc, #108	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x330>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4604      	mov	r4, r0
 8007a60:	460d      	mov	r5, r1
 8007a62:	ec51 0b18 	vmov	r0, r1, d8
 8007a66:	f7f8 fd6b 	bl	8000540 <__aeabi_dmul>
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	f7f8 fbaf 	bl	80001d0 <__aeabi_dsub>
 8007a72:	4604      	mov	r4, r0
 8007a74:	460d      	mov	r5, r1
 8007a76:	e75f      	b.n	8007938 <__ieee754_rem_pio2+0x1a0>
 8007a78:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <__ieee754_rem_pio2+0x350>)
 8007a7a:	4598      	cmp	r8, r3
 8007a7c:	dd36      	ble.n	8007aec <__ieee754_rem_pio2+0x354>
 8007a7e:	ee10 2a10 	vmov	r2, s0
 8007a82:	462b      	mov	r3, r5
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fba2 	bl	80001d0 <__aeabi_dsub>
 8007a8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a90:	e9ca 0100 	strd	r0, r1, [sl]
 8007a94:	e694      	b.n	80077c0 <__ieee754_rem_pio2+0x28>
 8007a96:	bf00      	nop
 8007a98:	54400000 	.word	0x54400000
 8007a9c:	3ff921fb 	.word	0x3ff921fb
 8007aa0:	1a626331 	.word	0x1a626331
 8007aa4:	3dd0b461 	.word	0x3dd0b461
 8007aa8:	1a600000 	.word	0x1a600000
 8007aac:	3dd0b461 	.word	0x3dd0b461
 8007ab0:	2e037073 	.word	0x2e037073
 8007ab4:	3ba3198a 	.word	0x3ba3198a
 8007ab8:	6dc9c883 	.word	0x6dc9c883
 8007abc:	3fe45f30 	.word	0x3fe45f30
 8007ac0:	2e000000 	.word	0x2e000000
 8007ac4:	3ba3198a 	.word	0x3ba3198a
 8007ac8:	252049c1 	.word	0x252049c1
 8007acc:	397b839a 	.word	0x397b839a
 8007ad0:	3fe921fb 	.word	0x3fe921fb
 8007ad4:	4002d97b 	.word	0x4002d97b
 8007ad8:	3ff921fb 	.word	0x3ff921fb
 8007adc:	413921fb 	.word	0x413921fb
 8007ae0:	3fe00000 	.word	0x3fe00000
 8007ae4:	08008914 	.word	0x08008914
 8007ae8:	7fefffff 	.word	0x7fefffff
 8007aec:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007af0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007af4:	ee10 0a10 	vmov	r0, s0
 8007af8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007afc:	ee10 6a10 	vmov	r6, s0
 8007b00:	460f      	mov	r7, r1
 8007b02:	f7f8 ffcd 	bl	8000aa0 <__aeabi_d2iz>
 8007b06:	f7f8 fcb1 	bl	800046c <__aeabi_i2d>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b16:	f7f8 fb5b 	bl	80001d0 <__aeabi_dsub>
 8007b1a:	4b22      	ldr	r3, [pc, #136]	; (8007ba4 <__ieee754_rem_pio2+0x40c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f7f8 fd0f 	bl	8000540 <__aeabi_dmul>
 8007b22:	460f      	mov	r7, r1
 8007b24:	4606      	mov	r6, r0
 8007b26:	f7f8 ffbb 	bl	8000aa0 <__aeabi_d2iz>
 8007b2a:	f7f8 fc9f 	bl	800046c <__aeabi_i2d>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4630      	mov	r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b3a:	f7f8 fb49 	bl	80001d0 <__aeabi_dsub>
 8007b3e:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <__ieee754_rem_pio2+0x40c>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	f7f8 fcfd 	bl	8000540 <__aeabi_dmul>
 8007b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b4a:	ad04      	add	r5, sp, #16
 8007b4c:	f04f 0803 	mov.w	r8, #3
 8007b50:	46a9      	mov	r9, r5
 8007b52:	2600      	movs	r6, #0
 8007b54:	2700      	movs	r7, #0
 8007b56:	4632      	mov	r2, r6
 8007b58:	463b      	mov	r3, r7
 8007b5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007b5e:	46c3      	mov	fp, r8
 8007b60:	3d08      	subs	r5, #8
 8007b62:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b66:	f7f8 ff53 	bl	8000a10 <__aeabi_dcmpeq>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d1f3      	bne.n	8007b56 <__ieee754_rem_pio2+0x3be>
 8007b6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <__ieee754_rem_pio2+0x410>)
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	2302      	movs	r3, #2
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	4622      	mov	r2, r4
 8007b78:	465b      	mov	r3, fp
 8007b7a:	4651      	mov	r1, sl
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	f000 f993 	bl	8007ea8 <__kernel_rem_pio2>
 8007b82:	9b02      	ldr	r3, [sp, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	4683      	mov	fp, r0
 8007b88:	f6bf ae46 	bge.w	8007818 <__ieee754_rem_pio2+0x80>
 8007b8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007b90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	f8ca 3004 	str.w	r3, [sl, #4]
 8007b98:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007b9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ba0:	e73a      	b.n	8007a18 <__ieee754_rem_pio2+0x280>
 8007ba2:	bf00      	nop
 8007ba4:	41700000 	.word	0x41700000
 8007ba8:	08008994 	.word	0x08008994

08007bac <__ieee754_sqrt>:
 8007bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb0:	ec55 4b10 	vmov	r4, r5, d0
 8007bb4:	4e56      	ldr	r6, [pc, #344]	; (8007d10 <__ieee754_sqrt+0x164>)
 8007bb6:	43ae      	bics	r6, r5
 8007bb8:	ee10 0a10 	vmov	r0, s0
 8007bbc:	ee10 3a10 	vmov	r3, s0
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	d110      	bne.n	8007be8 <__ieee754_sqrt+0x3c>
 8007bc6:	ee10 2a10 	vmov	r2, s0
 8007bca:	462b      	mov	r3, r5
 8007bcc:	f7f8 fcb8 	bl	8000540 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f7f8 fafc 	bl	80001d4 <__adddf3>
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	ec45 4b10 	vmov	d0, r4, r5
 8007be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	dc10      	bgt.n	8007c0e <__ieee754_sqrt+0x62>
 8007bec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007bf0:	4330      	orrs	r0, r6
 8007bf2:	d0f5      	beq.n	8007be0 <__ieee754_sqrt+0x34>
 8007bf4:	b15d      	cbz	r5, 8007c0e <__ieee754_sqrt+0x62>
 8007bf6:	ee10 2a10 	vmov	r2, s0
 8007bfa:	462b      	mov	r3, r5
 8007bfc:	ee10 0a10 	vmov	r0, s0
 8007c00:	f7f8 fae6 	bl	80001d0 <__aeabi_dsub>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	f7f8 fdc4 	bl	8000794 <__aeabi_ddiv>
 8007c0c:	e7e6      	b.n	8007bdc <__ieee754_sqrt+0x30>
 8007c0e:	1509      	asrs	r1, r1, #20
 8007c10:	d076      	beq.n	8007d00 <__ieee754_sqrt+0x154>
 8007c12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007c16:	07ce      	lsls	r6, r1, #31
 8007c18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007c1c:	bf5e      	ittt	pl
 8007c1e:	0fda      	lsrpl	r2, r3, #31
 8007c20:	005b      	lslpl	r3, r3, #1
 8007c22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007c26:	0fda      	lsrs	r2, r3, #31
 8007c28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007c2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007c30:	2000      	movs	r0, #0
 8007c32:	106d      	asrs	r5, r5, #1
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	f04f 0e16 	mov.w	lr, #22
 8007c3a:	4684      	mov	ip, r0
 8007c3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c40:	eb0c 0401 	add.w	r4, ip, r1
 8007c44:	4294      	cmp	r4, r2
 8007c46:	bfde      	ittt	le
 8007c48:	1b12      	suble	r2, r2, r4
 8007c4a:	eb04 0c01 	addle.w	ip, r4, r1
 8007c4e:	1840      	addle	r0, r0, r1
 8007c50:	0052      	lsls	r2, r2, #1
 8007c52:	f1be 0e01 	subs.w	lr, lr, #1
 8007c56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c62:	d1ed      	bne.n	8007c40 <__ieee754_sqrt+0x94>
 8007c64:	4671      	mov	r1, lr
 8007c66:	2720      	movs	r7, #32
 8007c68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007c6c:	4562      	cmp	r2, ip
 8007c6e:	eb04 060e 	add.w	r6, r4, lr
 8007c72:	dc02      	bgt.n	8007c7a <__ieee754_sqrt+0xce>
 8007c74:	d113      	bne.n	8007c9e <__ieee754_sqrt+0xf2>
 8007c76:	429e      	cmp	r6, r3
 8007c78:	d811      	bhi.n	8007c9e <__ieee754_sqrt+0xf2>
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	eb06 0e04 	add.w	lr, r6, r4
 8007c80:	da43      	bge.n	8007d0a <__ieee754_sqrt+0x15e>
 8007c82:	f1be 0f00 	cmp.w	lr, #0
 8007c86:	db40      	blt.n	8007d0a <__ieee754_sqrt+0x15e>
 8007c88:	f10c 0801 	add.w	r8, ip, #1
 8007c8c:	eba2 020c 	sub.w	r2, r2, ip
 8007c90:	429e      	cmp	r6, r3
 8007c92:	bf88      	it	hi
 8007c94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007c98:	1b9b      	subs	r3, r3, r6
 8007c9a:	4421      	add	r1, r4
 8007c9c:	46c4      	mov	ip, r8
 8007c9e:	0052      	lsls	r2, r2, #1
 8007ca0:	3f01      	subs	r7, #1
 8007ca2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ca6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007caa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cae:	d1dd      	bne.n	8007c6c <__ieee754_sqrt+0xc0>
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d006      	beq.n	8007cc2 <__ieee754_sqrt+0x116>
 8007cb4:	1c4c      	adds	r4, r1, #1
 8007cb6:	bf13      	iteet	ne
 8007cb8:	3101      	addne	r1, #1
 8007cba:	3001      	addeq	r0, #1
 8007cbc:	4639      	moveq	r1, r7
 8007cbe:	f021 0101 	bicne.w	r1, r1, #1
 8007cc2:	1043      	asrs	r3, r0, #1
 8007cc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007cc8:	0849      	lsrs	r1, r1, #1
 8007cca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007cce:	07c2      	lsls	r2, r0, #31
 8007cd0:	bf48      	it	mi
 8007cd2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007cd6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007cda:	460c      	mov	r4, r1
 8007cdc:	463d      	mov	r5, r7
 8007cde:	e77f      	b.n	8007be0 <__ieee754_sqrt+0x34>
 8007ce0:	0ada      	lsrs	r2, r3, #11
 8007ce2:	3815      	subs	r0, #21
 8007ce4:	055b      	lsls	r3, r3, #21
 8007ce6:	2a00      	cmp	r2, #0
 8007ce8:	d0fa      	beq.n	8007ce0 <__ieee754_sqrt+0x134>
 8007cea:	02d7      	lsls	r7, r2, #11
 8007cec:	d50a      	bpl.n	8007d04 <__ieee754_sqrt+0x158>
 8007cee:	f1c1 0420 	rsb	r4, r1, #32
 8007cf2:	fa23 f404 	lsr.w	r4, r3, r4
 8007cf6:	1e4d      	subs	r5, r1, #1
 8007cf8:	408b      	lsls	r3, r1
 8007cfa:	4322      	orrs	r2, r4
 8007cfc:	1b41      	subs	r1, r0, r5
 8007cfe:	e788      	b.n	8007c12 <__ieee754_sqrt+0x66>
 8007d00:	4608      	mov	r0, r1
 8007d02:	e7f0      	b.n	8007ce6 <__ieee754_sqrt+0x13a>
 8007d04:	0052      	lsls	r2, r2, #1
 8007d06:	3101      	adds	r1, #1
 8007d08:	e7ef      	b.n	8007cea <__ieee754_sqrt+0x13e>
 8007d0a:	46e0      	mov	r8, ip
 8007d0c:	e7be      	b.n	8007c8c <__ieee754_sqrt+0xe0>
 8007d0e:	bf00      	nop
 8007d10:	7ff00000 	.word	0x7ff00000
 8007d14:	00000000 	.word	0x00000000

08007d18 <__kernel_cos>:
 8007d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ec57 6b10 	vmov	r6, r7, d0
 8007d20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007d24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007d28:	ed8d 1b00 	vstr	d1, [sp]
 8007d2c:	da07      	bge.n	8007d3e <__kernel_cos+0x26>
 8007d2e:	ee10 0a10 	vmov	r0, s0
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 feb4 	bl	8000aa0 <__aeabi_d2iz>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f000 8088 	beq.w	8007e4e <__kernel_cos+0x136>
 8007d3e:	4632      	mov	r2, r6
 8007d40:	463b      	mov	r3, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	f7f8 fbfb 	bl	8000540 <__aeabi_dmul>
 8007d4a:	4b51      	ldr	r3, [pc, #324]	; (8007e90 <__kernel_cos+0x178>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	460d      	mov	r5, r1
 8007d52:	f7f8 fbf5 	bl	8000540 <__aeabi_dmul>
 8007d56:	a340      	add	r3, pc, #256	; (adr r3, 8007e58 <__kernel_cos+0x140>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	468b      	mov	fp, r1
 8007d60:	4620      	mov	r0, r4
 8007d62:	4629      	mov	r1, r5
 8007d64:	f7f8 fbec 	bl	8000540 <__aeabi_dmul>
 8007d68:	a33d      	add	r3, pc, #244	; (adr r3, 8007e60 <__kernel_cos+0x148>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fa31 	bl	80001d4 <__adddf3>
 8007d72:	4622      	mov	r2, r4
 8007d74:	462b      	mov	r3, r5
 8007d76:	f7f8 fbe3 	bl	8000540 <__aeabi_dmul>
 8007d7a:	a33b      	add	r3, pc, #236	; (adr r3, 8007e68 <__kernel_cos+0x150>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f7f8 fa26 	bl	80001d0 <__aeabi_dsub>
 8007d84:	4622      	mov	r2, r4
 8007d86:	462b      	mov	r3, r5
 8007d88:	f7f8 fbda 	bl	8000540 <__aeabi_dmul>
 8007d8c:	a338      	add	r3, pc, #224	; (adr r3, 8007e70 <__kernel_cos+0x158>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fa1f 	bl	80001d4 <__adddf3>
 8007d96:	4622      	mov	r2, r4
 8007d98:	462b      	mov	r3, r5
 8007d9a:	f7f8 fbd1 	bl	8000540 <__aeabi_dmul>
 8007d9e:	a336      	add	r3, pc, #216	; (adr r3, 8007e78 <__kernel_cos+0x160>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fa14 	bl	80001d0 <__aeabi_dsub>
 8007da8:	4622      	mov	r2, r4
 8007daa:	462b      	mov	r3, r5
 8007dac:	f7f8 fbc8 	bl	8000540 <__aeabi_dmul>
 8007db0:	a333      	add	r3, pc, #204	; (adr r3, 8007e80 <__kernel_cos+0x168>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa0d 	bl	80001d4 <__adddf3>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f7f8 fbbf 	bl	8000540 <__aeabi_dmul>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	f7f8 fbbb 	bl	8000540 <__aeabi_dmul>
 8007dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dce:	4604      	mov	r4, r0
 8007dd0:	460d      	mov	r5, r1
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fbb3 	bl	8000540 <__aeabi_dmul>
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4602      	mov	r2, r0
 8007dde:	4629      	mov	r1, r5
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7f8 f9f5 	bl	80001d0 <__aeabi_dsub>
 8007de6:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <__kernel_cos+0x17c>)
 8007de8:	4598      	cmp	r8, r3
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	dc10      	bgt.n	8007e12 <__kernel_cos+0xfa>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4650      	mov	r0, sl
 8007df6:	4659      	mov	r1, fp
 8007df8:	f7f8 f9ea 	bl	80001d0 <__aeabi_dsub>
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4926      	ldr	r1, [pc, #152]	; (8007e98 <__kernel_cos+0x180>)
 8007e00:	4602      	mov	r2, r0
 8007e02:	2000      	movs	r0, #0
 8007e04:	f7f8 f9e4 	bl	80001d0 <__aeabi_dsub>
 8007e08:	ec41 0b10 	vmov	d0, r0, r1
 8007e0c:	b003      	add	sp, #12
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <__kernel_cos+0x184>)
 8007e14:	4920      	ldr	r1, [pc, #128]	; (8007e98 <__kernel_cos+0x180>)
 8007e16:	4598      	cmp	r8, r3
 8007e18:	bfcc      	ite	gt
 8007e1a:	4d21      	ldrgt	r5, [pc, #132]	; (8007ea0 <__kernel_cos+0x188>)
 8007e1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007e20:	2400      	movs	r4, #0
 8007e22:	4622      	mov	r2, r4
 8007e24:	462b      	mov	r3, r5
 8007e26:	2000      	movs	r0, #0
 8007e28:	f7f8 f9d2 	bl	80001d0 <__aeabi_dsub>
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	462b      	mov	r3, r5
 8007e34:	4650      	mov	r0, sl
 8007e36:	4659      	mov	r1, fp
 8007e38:	f7f8 f9ca 	bl	80001d0 <__aeabi_dsub>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	f7f8 f9c6 	bl	80001d0 <__aeabi_dsub>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	e7da      	b.n	8007e04 <__kernel_cos+0xec>
 8007e4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007e88 <__kernel_cos+0x170>
 8007e52:	e7db      	b.n	8007e0c <__kernel_cos+0xf4>
 8007e54:	f3af 8000 	nop.w
 8007e58:	be8838d4 	.word	0xbe8838d4
 8007e5c:	bda8fae9 	.word	0xbda8fae9
 8007e60:	bdb4b1c4 	.word	0xbdb4b1c4
 8007e64:	3e21ee9e 	.word	0x3e21ee9e
 8007e68:	809c52ad 	.word	0x809c52ad
 8007e6c:	3e927e4f 	.word	0x3e927e4f
 8007e70:	19cb1590 	.word	0x19cb1590
 8007e74:	3efa01a0 	.word	0x3efa01a0
 8007e78:	16c15177 	.word	0x16c15177
 8007e7c:	3f56c16c 	.word	0x3f56c16c
 8007e80:	5555554c 	.word	0x5555554c
 8007e84:	3fa55555 	.word	0x3fa55555
 8007e88:	00000000 	.word	0x00000000
 8007e8c:	3ff00000 	.word	0x3ff00000
 8007e90:	3fe00000 	.word	0x3fe00000
 8007e94:	3fd33332 	.word	0x3fd33332
 8007e98:	3ff00000 	.word	0x3ff00000
 8007e9c:	3fe90000 	.word	0x3fe90000
 8007ea0:	3fd20000 	.word	0x3fd20000
 8007ea4:	00000000 	.word	0x00000000

08007ea8 <__kernel_rem_pio2>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ed2d 8b02 	vpush	{d8}
 8007eb0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007eb4:	f112 0f14 	cmn.w	r2, #20
 8007eb8:	9308      	str	r3, [sp, #32]
 8007eba:	9101      	str	r1, [sp, #4]
 8007ebc:	4bc6      	ldr	r3, [pc, #792]	; (80081d8 <__kernel_rem_pio2+0x330>)
 8007ebe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007ec0:	9009      	str	r0, [sp, #36]	; 0x24
 8007ec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	9b08      	ldr	r3, [sp, #32]
 8007eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ece:	bfa8      	it	ge
 8007ed0:	1ed4      	subge	r4, r2, #3
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	bfb2      	itee	lt
 8007ed6:	2400      	movlt	r4, #0
 8007ed8:	2318      	movge	r3, #24
 8007eda:	fb94 f4f3 	sdivge	r4, r4, r3
 8007ede:	f06f 0317 	mvn.w	r3, #23
 8007ee2:	fb04 3303 	mla	r3, r4, r3, r3
 8007ee6:	eb03 0a02 	add.w	sl, r3, r2
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	9a06      	ldr	r2, [sp, #24]
 8007eee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80081c8 <__kernel_rem_pio2+0x320>
 8007ef2:	eb03 0802 	add.w	r8, r3, r2
 8007ef6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007ef8:	1aa7      	subs	r7, r4, r2
 8007efa:	ae20      	add	r6, sp, #128	; 0x80
 8007efc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007f00:	2500      	movs	r5, #0
 8007f02:	4545      	cmp	r5, r8
 8007f04:	dd18      	ble.n	8007f38 <__kernel_rem_pio2+0x90>
 8007f06:	9b08      	ldr	r3, [sp, #32]
 8007f08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007f0c:	aa20      	add	r2, sp, #128	; 0x80
 8007f0e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80081c8 <__kernel_rem_pio2+0x320>
 8007f12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007f16:	f1c3 0301 	rsb	r3, r3, #1
 8007f1a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	9b07      	ldr	r3, [sp, #28]
 8007f22:	9a04      	ldr	r2, [sp, #16]
 8007f24:	4443      	add	r3, r8
 8007f26:	429a      	cmp	r2, r3
 8007f28:	db2f      	blt.n	8007f8a <__kernel_rem_pio2+0xe2>
 8007f2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f2e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f32:	462f      	mov	r7, r5
 8007f34:	2600      	movs	r6, #0
 8007f36:	e01b      	b.n	8007f70 <__kernel_rem_pio2+0xc8>
 8007f38:	42ef      	cmn	r7, r5
 8007f3a:	d407      	bmi.n	8007f4c <__kernel_rem_pio2+0xa4>
 8007f3c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007f40:	f7f8 fa94 	bl	800046c <__aeabi_i2d>
 8007f44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007f48:	3501      	adds	r5, #1
 8007f4a:	e7da      	b.n	8007f02 <__kernel_rem_pio2+0x5a>
 8007f4c:	ec51 0b18 	vmov	r0, r1, d8
 8007f50:	e7f8      	b.n	8007f44 <__kernel_rem_pio2+0x9c>
 8007f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f56:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f5a:	f7f8 faf1 	bl	8000540 <__aeabi_dmul>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f66:	f7f8 f935 	bl	80001d4 <__adddf3>
 8007f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f6e:	3601      	adds	r6, #1
 8007f70:	9b06      	ldr	r3, [sp, #24]
 8007f72:	429e      	cmp	r6, r3
 8007f74:	f1a7 0708 	sub.w	r7, r7, #8
 8007f78:	ddeb      	ble.n	8007f52 <__kernel_rem_pio2+0xaa>
 8007f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f7e:	3508      	adds	r5, #8
 8007f80:	ecab 7b02 	vstmia	fp!, {d7}
 8007f84:	f108 0801 	add.w	r8, r8, #1
 8007f88:	e7ca      	b.n	8007f20 <__kernel_rem_pio2+0x78>
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	aa0c      	add	r2, sp, #48	; 0x30
 8007f8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f94:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007f96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007f9a:	9c04      	ldr	r4, [sp, #16]
 8007f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f9e:	ab98      	add	r3, sp, #608	; 0x260
 8007fa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fa4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007fa8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007fac:	f8cd b008 	str.w	fp, [sp, #8]
 8007fb0:	4625      	mov	r5, r4
 8007fb2:	2d00      	cmp	r5, #0
 8007fb4:	dc78      	bgt.n	80080a8 <__kernel_rem_pio2+0x200>
 8007fb6:	ec47 6b10 	vmov	d0, r6, r7
 8007fba:	4650      	mov	r0, sl
 8007fbc:	f000 fc04 	bl	80087c8 <scalbn>
 8007fc0:	ec57 6b10 	vmov	r6, r7, d0
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007fca:	ee10 0a10 	vmov	r0, s0
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 fab6 	bl	8000540 <__aeabi_dmul>
 8007fd4:	ec41 0b10 	vmov	d0, r0, r1
 8007fd8:	f000 fb6e 	bl	80086b8 <floor>
 8007fdc:	4b7f      	ldr	r3, [pc, #508]	; (80081dc <__kernel_rem_pio2+0x334>)
 8007fde:	ec51 0b10 	vmov	r0, r1, d0
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f7f8 faac 	bl	8000540 <__aeabi_dmul>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4630      	mov	r0, r6
 8007fee:	4639      	mov	r1, r7
 8007ff0:	f7f8 f8ee 	bl	80001d0 <__aeabi_dsub>
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	f7f8 fd52 	bl	8000aa0 <__aeabi_d2iz>
 8007ffc:	9007      	str	r0, [sp, #28]
 8007ffe:	f7f8 fa35 	bl	800046c <__aeabi_i2d>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	4630      	mov	r0, r6
 8008008:	4639      	mov	r1, r7
 800800a:	f7f8 f8e1 	bl	80001d0 <__aeabi_dsub>
 800800e:	f1ba 0f00 	cmp.w	sl, #0
 8008012:	4606      	mov	r6, r0
 8008014:	460f      	mov	r7, r1
 8008016:	dd70      	ble.n	80080fa <__kernel_rem_pio2+0x252>
 8008018:	1e62      	subs	r2, r4, #1
 800801a:	ab0c      	add	r3, sp, #48	; 0x30
 800801c:	9d07      	ldr	r5, [sp, #28]
 800801e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008022:	f1ca 0118 	rsb	r1, sl, #24
 8008026:	fa40 f301 	asr.w	r3, r0, r1
 800802a:	441d      	add	r5, r3
 800802c:	408b      	lsls	r3, r1
 800802e:	1ac0      	subs	r0, r0, r3
 8008030:	ab0c      	add	r3, sp, #48	; 0x30
 8008032:	9507      	str	r5, [sp, #28]
 8008034:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008038:	f1ca 0317 	rsb	r3, sl, #23
 800803c:	fa40 f303 	asr.w	r3, r0, r3
 8008040:	9302      	str	r3, [sp, #8]
 8008042:	9b02      	ldr	r3, [sp, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd66      	ble.n	8008116 <__kernel_rem_pio2+0x26e>
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	2200      	movs	r2, #0
 800804c:	3301      	adds	r3, #1
 800804e:	9307      	str	r3, [sp, #28]
 8008050:	4615      	mov	r5, r2
 8008052:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008056:	4294      	cmp	r4, r2
 8008058:	f300 8099 	bgt.w	800818e <__kernel_rem_pio2+0x2e6>
 800805c:	f1ba 0f00 	cmp.w	sl, #0
 8008060:	dd07      	ble.n	8008072 <__kernel_rem_pio2+0x1ca>
 8008062:	f1ba 0f01 	cmp.w	sl, #1
 8008066:	f000 80a5 	beq.w	80081b4 <__kernel_rem_pio2+0x30c>
 800806a:	f1ba 0f02 	cmp.w	sl, #2
 800806e:	f000 80c1 	beq.w	80081f4 <__kernel_rem_pio2+0x34c>
 8008072:	9b02      	ldr	r3, [sp, #8]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d14e      	bne.n	8008116 <__kernel_rem_pio2+0x26e>
 8008078:	4632      	mov	r2, r6
 800807a:	463b      	mov	r3, r7
 800807c:	4958      	ldr	r1, [pc, #352]	; (80081e0 <__kernel_rem_pio2+0x338>)
 800807e:	2000      	movs	r0, #0
 8008080:	f7f8 f8a6 	bl	80001d0 <__aeabi_dsub>
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	2d00      	cmp	r5, #0
 800808a:	d044      	beq.n	8008116 <__kernel_rem_pio2+0x26e>
 800808c:	4650      	mov	r0, sl
 800808e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80081d0 <__kernel_rem_pio2+0x328>
 8008092:	f000 fb99 	bl	80087c8 <scalbn>
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	ec53 2b10 	vmov	r2, r3, d0
 800809e:	f7f8 f897 	bl	80001d0 <__aeabi_dsub>
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	e036      	b.n	8008116 <__kernel_rem_pio2+0x26e>
 80080a8:	4b4e      	ldr	r3, [pc, #312]	; (80081e4 <__kernel_rem_pio2+0x33c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 fa46 	bl	8000540 <__aeabi_dmul>
 80080b4:	f7f8 fcf4 	bl	8000aa0 <__aeabi_d2iz>
 80080b8:	f7f8 f9d8 	bl	800046c <__aeabi_i2d>
 80080bc:	4b4a      	ldr	r3, [pc, #296]	; (80081e8 <__kernel_rem_pio2+0x340>)
 80080be:	2200      	movs	r2, #0
 80080c0:	4680      	mov	r8, r0
 80080c2:	4689      	mov	r9, r1
 80080c4:	f7f8 fa3c 	bl	8000540 <__aeabi_dmul>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 f87e 	bl	80001d0 <__aeabi_dsub>
 80080d4:	f7f8 fce4 	bl	8000aa0 <__aeabi_d2iz>
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	f843 0b04 	str.w	r0, [r3], #4
 80080de:	3d01      	subs	r5, #1
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	ab70      	add	r3, sp, #448	; 0x1c0
 80080e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 f870 	bl	80001d4 <__adddf3>
 80080f4:	4606      	mov	r6, r0
 80080f6:	460f      	mov	r7, r1
 80080f8:	e75b      	b.n	8007fb2 <__kernel_rem_pio2+0x10a>
 80080fa:	d105      	bne.n	8008108 <__kernel_rem_pio2+0x260>
 80080fc:	1e63      	subs	r3, r4, #1
 80080fe:	aa0c      	add	r2, sp, #48	; 0x30
 8008100:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008104:	15c3      	asrs	r3, r0, #23
 8008106:	e79b      	b.n	8008040 <__kernel_rem_pio2+0x198>
 8008108:	4b38      	ldr	r3, [pc, #224]	; (80081ec <__kernel_rem_pio2+0x344>)
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 fc9e 	bl	8000a4c <__aeabi_dcmpge>
 8008110:	2800      	cmp	r0, #0
 8008112:	d139      	bne.n	8008188 <__kernel_rem_pio2+0x2e0>
 8008114:	9002      	str	r0, [sp, #8]
 8008116:	2200      	movs	r2, #0
 8008118:	2300      	movs	r3, #0
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 fc77 	bl	8000a10 <__aeabi_dcmpeq>
 8008122:	2800      	cmp	r0, #0
 8008124:	f000 80b4 	beq.w	8008290 <__kernel_rem_pio2+0x3e8>
 8008128:	f104 3bff 	add.w	fp, r4, #4294967295
 800812c:	465b      	mov	r3, fp
 800812e:	2200      	movs	r2, #0
 8008130:	9904      	ldr	r1, [sp, #16]
 8008132:	428b      	cmp	r3, r1
 8008134:	da65      	bge.n	8008202 <__kernel_rem_pio2+0x35a>
 8008136:	2a00      	cmp	r2, #0
 8008138:	d07b      	beq.n	8008232 <__kernel_rem_pio2+0x38a>
 800813a:	ab0c      	add	r3, sp, #48	; 0x30
 800813c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008140:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80a0 	beq.w	800828a <__kernel_rem_pio2+0x3e2>
 800814a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80081d0 <__kernel_rem_pio2+0x328>
 800814e:	4650      	mov	r0, sl
 8008150:	f000 fb3a 	bl	80087c8 <scalbn>
 8008154:	4f23      	ldr	r7, [pc, #140]	; (80081e4 <__kernel_rem_pio2+0x33c>)
 8008156:	ec55 4b10 	vmov	r4, r5, d0
 800815a:	46d8      	mov	r8, fp
 800815c:	2600      	movs	r6, #0
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	f280 80cf 	bge.w	8008304 <__kernel_rem_pio2+0x45c>
 8008166:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80081c8 <__kernel_rem_pio2+0x320>
 800816a:	465f      	mov	r7, fp
 800816c:	f04f 0800 	mov.w	r8, #0
 8008170:	2f00      	cmp	r7, #0
 8008172:	f2c0 80fd 	blt.w	8008370 <__kernel_rem_pio2+0x4c8>
 8008176:	ab70      	add	r3, sp, #448	; 0x1c0
 8008178:	f8df a074 	ldr.w	sl, [pc, #116]	; 80081f0 <__kernel_rem_pio2+0x348>
 800817c:	ec55 4b18 	vmov	r4, r5, d8
 8008180:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008184:	2600      	movs	r6, #0
 8008186:	e0e5      	b.n	8008354 <__kernel_rem_pio2+0x4ac>
 8008188:	2302      	movs	r3, #2
 800818a:	9302      	str	r3, [sp, #8]
 800818c:	e75c      	b.n	8008048 <__kernel_rem_pio2+0x1a0>
 800818e:	f8db 3000 	ldr.w	r3, [fp]
 8008192:	b955      	cbnz	r5, 80081aa <__kernel_rem_pio2+0x302>
 8008194:	b123      	cbz	r3, 80081a0 <__kernel_rem_pio2+0x2f8>
 8008196:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800819a:	f8cb 3000 	str.w	r3, [fp]
 800819e:	2301      	movs	r3, #1
 80081a0:	3201      	adds	r2, #1
 80081a2:	f10b 0b04 	add.w	fp, fp, #4
 80081a6:	461d      	mov	r5, r3
 80081a8:	e755      	b.n	8008056 <__kernel_rem_pio2+0x1ae>
 80081aa:	1acb      	subs	r3, r1, r3
 80081ac:	f8cb 3000 	str.w	r3, [fp]
 80081b0:	462b      	mov	r3, r5
 80081b2:	e7f5      	b.n	80081a0 <__kernel_rem_pio2+0x2f8>
 80081b4:	1e62      	subs	r2, r4, #1
 80081b6:	ab0c      	add	r3, sp, #48	; 0x30
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80081c0:	a90c      	add	r1, sp, #48	; 0x30
 80081c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80081c6:	e754      	b.n	8008072 <__kernel_rem_pio2+0x1ca>
	...
 80081d4:	3ff00000 	.word	0x3ff00000
 80081d8:	08008ae0 	.word	0x08008ae0
 80081dc:	40200000 	.word	0x40200000
 80081e0:	3ff00000 	.word	0x3ff00000
 80081e4:	3e700000 	.word	0x3e700000
 80081e8:	41700000 	.word	0x41700000
 80081ec:	3fe00000 	.word	0x3fe00000
 80081f0:	08008aa0 	.word	0x08008aa0
 80081f4:	1e62      	subs	r2, r4, #1
 80081f6:	ab0c      	add	r3, sp, #48	; 0x30
 80081f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008200:	e7de      	b.n	80081c0 <__kernel_rem_pio2+0x318>
 8008202:	a90c      	add	r1, sp, #48	; 0x30
 8008204:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008208:	3b01      	subs	r3, #1
 800820a:	430a      	orrs	r2, r1
 800820c:	e790      	b.n	8008130 <__kernel_rem_pio2+0x288>
 800820e:	3301      	adds	r3, #1
 8008210:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008214:	2900      	cmp	r1, #0
 8008216:	d0fa      	beq.n	800820e <__kernel_rem_pio2+0x366>
 8008218:	9a08      	ldr	r2, [sp, #32]
 800821a:	18e3      	adds	r3, r4, r3
 800821c:	18a6      	adds	r6, r4, r2
 800821e:	aa20      	add	r2, sp, #128	; 0x80
 8008220:	1c65      	adds	r5, r4, #1
 8008222:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008226:	9302      	str	r3, [sp, #8]
 8008228:	9b02      	ldr	r3, [sp, #8]
 800822a:	42ab      	cmp	r3, r5
 800822c:	da04      	bge.n	8008238 <__kernel_rem_pio2+0x390>
 800822e:	461c      	mov	r4, r3
 8008230:	e6b5      	b.n	8007f9e <__kernel_rem_pio2+0xf6>
 8008232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008234:	2301      	movs	r3, #1
 8008236:	e7eb      	b.n	8008210 <__kernel_rem_pio2+0x368>
 8008238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800823e:	f7f8 f915 	bl	800046c <__aeabi_i2d>
 8008242:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008248:	46b3      	mov	fp, r6
 800824a:	461c      	mov	r4, r3
 800824c:	2700      	movs	r7, #0
 800824e:	f04f 0800 	mov.w	r8, #0
 8008252:	f04f 0900 	mov.w	r9, #0
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	429f      	cmp	r7, r3
 800825a:	dd06      	ble.n	800826a <__kernel_rem_pio2+0x3c2>
 800825c:	ab70      	add	r3, sp, #448	; 0x1c0
 800825e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008262:	e9c3 8900 	strd	r8, r9, [r3]
 8008266:	3501      	adds	r5, #1
 8008268:	e7de      	b.n	8008228 <__kernel_rem_pio2+0x380>
 800826a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800826e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008272:	f7f8 f965 	bl	8000540 <__aeabi_dmul>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4640      	mov	r0, r8
 800827c:	4649      	mov	r1, r9
 800827e:	f7f7 ffa9 	bl	80001d4 <__adddf3>
 8008282:	3701      	adds	r7, #1
 8008284:	4680      	mov	r8, r0
 8008286:	4689      	mov	r9, r1
 8008288:	e7e5      	b.n	8008256 <__kernel_rem_pio2+0x3ae>
 800828a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800828e:	e754      	b.n	800813a <__kernel_rem_pio2+0x292>
 8008290:	ec47 6b10 	vmov	d0, r6, r7
 8008294:	f1ca 0000 	rsb	r0, sl, #0
 8008298:	f000 fa96 	bl	80087c8 <scalbn>
 800829c:	ec57 6b10 	vmov	r6, r7, d0
 80082a0:	4b9f      	ldr	r3, [pc, #636]	; (8008520 <__kernel_rem_pio2+0x678>)
 80082a2:	ee10 0a10 	vmov	r0, s0
 80082a6:	2200      	movs	r2, #0
 80082a8:	4639      	mov	r1, r7
 80082aa:	f7f8 fbcf 	bl	8000a4c <__aeabi_dcmpge>
 80082ae:	b300      	cbz	r0, 80082f2 <__kernel_rem_pio2+0x44a>
 80082b0:	4b9c      	ldr	r3, [pc, #624]	; (8008524 <__kernel_rem_pio2+0x67c>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f8 f942 	bl	8000540 <__aeabi_dmul>
 80082bc:	f7f8 fbf0 	bl	8000aa0 <__aeabi_d2iz>
 80082c0:	4605      	mov	r5, r0
 80082c2:	f7f8 f8d3 	bl	800046c <__aeabi_i2d>
 80082c6:	4b96      	ldr	r3, [pc, #600]	; (8008520 <__kernel_rem_pio2+0x678>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	f7f8 f939 	bl	8000540 <__aeabi_dmul>
 80082ce:	460b      	mov	r3, r1
 80082d0:	4602      	mov	r2, r0
 80082d2:	4639      	mov	r1, r7
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7f7 ff7b 	bl	80001d0 <__aeabi_dsub>
 80082da:	f7f8 fbe1 	bl	8000aa0 <__aeabi_d2iz>
 80082de:	f104 0b01 	add.w	fp, r4, #1
 80082e2:	ab0c      	add	r3, sp, #48	; 0x30
 80082e4:	f10a 0a18 	add.w	sl, sl, #24
 80082e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80082ec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80082f0:	e72b      	b.n	800814a <__kernel_rem_pio2+0x2a2>
 80082f2:	4630      	mov	r0, r6
 80082f4:	4639      	mov	r1, r7
 80082f6:	f7f8 fbd3 	bl	8000aa0 <__aeabi_d2iz>
 80082fa:	ab0c      	add	r3, sp, #48	; 0x30
 80082fc:	46a3      	mov	fp, r4
 80082fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008302:	e722      	b.n	800814a <__kernel_rem_pio2+0x2a2>
 8008304:	ab70      	add	r3, sp, #448	; 0x1c0
 8008306:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800830a:	ab0c      	add	r3, sp, #48	; 0x30
 800830c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008310:	f7f8 f8ac 	bl	800046c <__aeabi_i2d>
 8008314:	4622      	mov	r2, r4
 8008316:	462b      	mov	r3, r5
 8008318:	f7f8 f912 	bl	8000540 <__aeabi_dmul>
 800831c:	4632      	mov	r2, r6
 800831e:	e9c9 0100 	strd	r0, r1, [r9]
 8008322:	463b      	mov	r3, r7
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f8 f90a 	bl	8000540 <__aeabi_dmul>
 800832c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	e713      	b.n	800815e <__kernel_rem_pio2+0x2b6>
 8008336:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800833a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800833e:	f7f8 f8ff 	bl	8000540 <__aeabi_dmul>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f7 ff43 	bl	80001d4 <__adddf3>
 800834e:	3601      	adds	r6, #1
 8008350:	4604      	mov	r4, r0
 8008352:	460d      	mov	r5, r1
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	429e      	cmp	r6, r3
 8008358:	dc01      	bgt.n	800835e <__kernel_rem_pio2+0x4b6>
 800835a:	45b0      	cmp	r8, r6
 800835c:	daeb      	bge.n	8008336 <__kernel_rem_pio2+0x48e>
 800835e:	ab48      	add	r3, sp, #288	; 0x120
 8008360:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008364:	e9c3 4500 	strd	r4, r5, [r3]
 8008368:	3f01      	subs	r7, #1
 800836a:	f108 0801 	add.w	r8, r8, #1
 800836e:	e6ff      	b.n	8008170 <__kernel_rem_pio2+0x2c8>
 8008370:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008372:	2b02      	cmp	r3, #2
 8008374:	dc0b      	bgt.n	800838e <__kernel_rem_pio2+0x4e6>
 8008376:	2b00      	cmp	r3, #0
 8008378:	dc6e      	bgt.n	8008458 <__kernel_rem_pio2+0x5b0>
 800837a:	d045      	beq.n	8008408 <__kernel_rem_pio2+0x560>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	f003 0007 	and.w	r0, r3, #7
 8008382:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008386:	ecbd 8b02 	vpop	{d8}
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008390:	2b03      	cmp	r3, #3
 8008392:	d1f3      	bne.n	800837c <__kernel_rem_pio2+0x4d4>
 8008394:	ab48      	add	r3, sp, #288	; 0x120
 8008396:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800839a:	46d0      	mov	r8, sl
 800839c:	46d9      	mov	r9, fp
 800839e:	f1b9 0f00 	cmp.w	r9, #0
 80083a2:	f1a8 0808 	sub.w	r8, r8, #8
 80083a6:	dc64      	bgt.n	8008472 <__kernel_rem_pio2+0x5ca>
 80083a8:	465c      	mov	r4, fp
 80083aa:	2c01      	cmp	r4, #1
 80083ac:	f1aa 0a08 	sub.w	sl, sl, #8
 80083b0:	dc7e      	bgt.n	80084b0 <__kernel_rem_pio2+0x608>
 80083b2:	2000      	movs	r0, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	f1bb 0f01 	cmp.w	fp, #1
 80083ba:	f300 8097 	bgt.w	80084ec <__kernel_rem_pio2+0x644>
 80083be:	9b02      	ldr	r3, [sp, #8]
 80083c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80083c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 8099 	bne.w	8008500 <__kernel_rem_pio2+0x658>
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	e9c3 5600 	strd	r5, r6, [r3]
 80083d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80083d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80083dc:	e7ce      	b.n	800837c <__kernel_rem_pio2+0x4d4>
 80083de:	ab48      	add	r3, sp, #288	; 0x120
 80083e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f7f7 fef4 	bl	80001d4 <__adddf3>
 80083ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083f0:	f1bb 0f00 	cmp.w	fp, #0
 80083f4:	daf3      	bge.n	80083de <__kernel_rem_pio2+0x536>
 80083f6:	9b02      	ldr	r3, [sp, #8]
 80083f8:	b113      	cbz	r3, 8008400 <__kernel_rem_pio2+0x558>
 80083fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083fe:	4619      	mov	r1, r3
 8008400:	9b01      	ldr	r3, [sp, #4]
 8008402:	e9c3 0100 	strd	r0, r1, [r3]
 8008406:	e7b9      	b.n	800837c <__kernel_rem_pio2+0x4d4>
 8008408:	2000      	movs	r0, #0
 800840a:	2100      	movs	r1, #0
 800840c:	e7f0      	b.n	80083f0 <__kernel_rem_pio2+0x548>
 800840e:	ab48      	add	r3, sp, #288	; 0x120
 8008410:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f7f7 fedc 	bl	80001d4 <__adddf3>
 800841c:	3c01      	subs	r4, #1
 800841e:	2c00      	cmp	r4, #0
 8008420:	daf5      	bge.n	800840e <__kernel_rem_pio2+0x566>
 8008422:	9b02      	ldr	r3, [sp, #8]
 8008424:	b1e3      	cbz	r3, 8008460 <__kernel_rem_pio2+0x5b8>
 8008426:	4602      	mov	r2, r0
 8008428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800842c:	9c01      	ldr	r4, [sp, #4]
 800842e:	e9c4 2300 	strd	r2, r3, [r4]
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800843a:	f7f7 fec9 	bl	80001d0 <__aeabi_dsub>
 800843e:	ad4a      	add	r5, sp, #296	; 0x128
 8008440:	2401      	movs	r4, #1
 8008442:	45a3      	cmp	fp, r4
 8008444:	da0f      	bge.n	8008466 <__kernel_rem_pio2+0x5be>
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	b113      	cbz	r3, 8008450 <__kernel_rem_pio2+0x5a8>
 800844a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800844e:	4619      	mov	r1, r3
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008456:	e791      	b.n	800837c <__kernel_rem_pio2+0x4d4>
 8008458:	465c      	mov	r4, fp
 800845a:	2000      	movs	r0, #0
 800845c:	2100      	movs	r1, #0
 800845e:	e7de      	b.n	800841e <__kernel_rem_pio2+0x576>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	e7e2      	b.n	800842c <__kernel_rem_pio2+0x584>
 8008466:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800846a:	f7f7 feb3 	bl	80001d4 <__adddf3>
 800846e:	3401      	adds	r4, #1
 8008470:	e7e7      	b.n	8008442 <__kernel_rem_pio2+0x59a>
 8008472:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008476:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800847a:	4620      	mov	r0, r4
 800847c:	4632      	mov	r2, r6
 800847e:	463b      	mov	r3, r7
 8008480:	4629      	mov	r1, r5
 8008482:	f7f7 fea7 	bl	80001d4 <__adddf3>
 8008486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f7 fe9d 	bl	80001d0 <__aeabi_dsub>
 8008496:	4632      	mov	r2, r6
 8008498:	463b      	mov	r3, r7
 800849a:	f7f7 fe9b 	bl	80001d4 <__adddf3>
 800849e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80084a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80084a6:	ed88 7b00 	vstr	d7, [r8]
 80084aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80084ae:	e776      	b.n	800839e <__kernel_rem_pio2+0x4f6>
 80084b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80084b4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80084b8:	4640      	mov	r0, r8
 80084ba:	4632      	mov	r2, r6
 80084bc:	463b      	mov	r3, r7
 80084be:	4649      	mov	r1, r9
 80084c0:	f7f7 fe88 	bl	80001d4 <__adddf3>
 80084c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4640      	mov	r0, r8
 80084ce:	4649      	mov	r1, r9
 80084d0:	f7f7 fe7e 	bl	80001d0 <__aeabi_dsub>
 80084d4:	4632      	mov	r2, r6
 80084d6:	463b      	mov	r3, r7
 80084d8:	f7f7 fe7c 	bl	80001d4 <__adddf3>
 80084dc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80084e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084e4:	ed8a 7b00 	vstr	d7, [sl]
 80084e8:	3c01      	subs	r4, #1
 80084ea:	e75e      	b.n	80083aa <__kernel_rem_pio2+0x502>
 80084ec:	ab48      	add	r3, sp, #288	; 0x120
 80084ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fe6d 	bl	80001d4 <__adddf3>
 80084fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084fe:	e75a      	b.n	80083b6 <__kernel_rem_pio2+0x50e>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	9a01      	ldr	r2, [sp, #4]
 8008504:	601d      	str	r5, [r3, #0]
 8008506:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800850a:	605c      	str	r4, [r3, #4]
 800850c:	609f      	str	r7, [r3, #8]
 800850e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008512:	60d3      	str	r3, [r2, #12]
 8008514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008518:	6110      	str	r0, [r2, #16]
 800851a:	6153      	str	r3, [r2, #20]
 800851c:	e72e      	b.n	800837c <__kernel_rem_pio2+0x4d4>
 800851e:	bf00      	nop
 8008520:	41700000 	.word	0x41700000
 8008524:	3e700000 	.word	0x3e700000

08008528 <__kernel_sin>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	ed2d 8b04 	vpush	{d8-d9}
 8008530:	eeb0 8a41 	vmov.f32	s16, s2
 8008534:	eef0 8a61 	vmov.f32	s17, s3
 8008538:	ec55 4b10 	vmov	r4, r5, d0
 800853c:	b083      	sub	sp, #12
 800853e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008542:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008546:	9001      	str	r0, [sp, #4]
 8008548:	da06      	bge.n	8008558 <__kernel_sin+0x30>
 800854a:	ee10 0a10 	vmov	r0, s0
 800854e:	4629      	mov	r1, r5
 8008550:	f7f8 faa6 	bl	8000aa0 <__aeabi_d2iz>
 8008554:	2800      	cmp	r0, #0
 8008556:	d051      	beq.n	80085fc <__kernel_sin+0xd4>
 8008558:	4622      	mov	r2, r4
 800855a:	462b      	mov	r3, r5
 800855c:	4620      	mov	r0, r4
 800855e:	4629      	mov	r1, r5
 8008560:	f7f7 ffee 	bl	8000540 <__aeabi_dmul>
 8008564:	4682      	mov	sl, r0
 8008566:	468b      	mov	fp, r1
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 ffe6 	bl	8000540 <__aeabi_dmul>
 8008574:	a341      	add	r3, pc, #260	; (adr r3, 800867c <__kernel_sin+0x154>)
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	4680      	mov	r8, r0
 800857c:	4689      	mov	r9, r1
 800857e:	4650      	mov	r0, sl
 8008580:	4659      	mov	r1, fp
 8008582:	f7f7 ffdd 	bl	8000540 <__aeabi_dmul>
 8008586:	a33f      	add	r3, pc, #252	; (adr r3, 8008684 <__kernel_sin+0x15c>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f7 fe20 	bl	80001d0 <__aeabi_dsub>
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	f7f7 ffd4 	bl	8000540 <__aeabi_dmul>
 8008598:	a33c      	add	r3, pc, #240	; (adr r3, 800868c <__kernel_sin+0x164>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe19 	bl	80001d4 <__adddf3>
 80085a2:	4652      	mov	r2, sl
 80085a4:	465b      	mov	r3, fp
 80085a6:	f7f7 ffcb 	bl	8000540 <__aeabi_dmul>
 80085aa:	a33a      	add	r3, pc, #232	; (adr r3, 8008694 <__kernel_sin+0x16c>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f7f7 fe0e 	bl	80001d0 <__aeabi_dsub>
 80085b4:	4652      	mov	r2, sl
 80085b6:	465b      	mov	r3, fp
 80085b8:	f7f7 ffc2 	bl	8000540 <__aeabi_dmul>
 80085bc:	a337      	add	r3, pc, #220	; (adr r3, 800869c <__kernel_sin+0x174>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe07 	bl	80001d4 <__adddf3>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	b9eb      	cbnz	r3, 800860a <__kernel_sin+0xe2>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4650      	mov	r0, sl
 80085d4:	4659      	mov	r1, fp
 80085d6:	f7f7 ffb3 	bl	8000540 <__aeabi_dmul>
 80085da:	a325      	add	r3, pc, #148	; (adr r3, 8008670 <__kernel_sin+0x148>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 fdf6 	bl	80001d0 <__aeabi_dsub>
 80085e4:	4642      	mov	r2, r8
 80085e6:	464b      	mov	r3, r9
 80085e8:	f7f7 ffaa 	bl	8000540 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4620      	mov	r0, r4
 80085f2:	4629      	mov	r1, r5
 80085f4:	f7f7 fdee 	bl	80001d4 <__adddf3>
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	ec45 4b10 	vmov	d0, r4, r5
 8008600:	b003      	add	sp, #12
 8008602:	ecbd 8b04 	vpop	{d8-d9}
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860a:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <__kernel_sin+0x150>)
 800860c:	ec51 0b18 	vmov	r0, r1, d8
 8008610:	2200      	movs	r2, #0
 8008612:	f7f7 ff95 	bl	8000540 <__aeabi_dmul>
 8008616:	4632      	mov	r2, r6
 8008618:	ec41 0b19 	vmov	d9, r0, r1
 800861c:	463b      	mov	r3, r7
 800861e:	4640      	mov	r0, r8
 8008620:	4649      	mov	r1, r9
 8008622:	f7f7 ff8d 	bl	8000540 <__aeabi_dmul>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	ec51 0b19 	vmov	r0, r1, d9
 800862e:	f7f7 fdcf 	bl	80001d0 <__aeabi_dsub>
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	f7f7 ff83 	bl	8000540 <__aeabi_dmul>
 800863a:	ec53 2b18 	vmov	r2, r3, d8
 800863e:	f7f7 fdc7 	bl	80001d0 <__aeabi_dsub>
 8008642:	a30b      	add	r3, pc, #44	; (adr r3, 8008670 <__kernel_sin+0x148>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	4606      	mov	r6, r0
 800864a:	460f      	mov	r7, r1
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f7 ff76 	bl	8000540 <__aeabi_dmul>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f7 fdba 	bl	80001d4 <__adddf3>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 fdb2 	bl	80001d0 <__aeabi_dsub>
 800866c:	e7c4      	b.n	80085f8 <__kernel_sin+0xd0>
 800866e:	bf00      	nop
 8008670:	55555549 	.word	0x55555549
 8008674:	3fc55555 	.word	0x3fc55555
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	5acfd57c 	.word	0x5acfd57c
 8008680:	3de5d93a 	.word	0x3de5d93a
 8008684:	8a2b9ceb 	.word	0x8a2b9ceb
 8008688:	3e5ae5e6 	.word	0x3e5ae5e6
 800868c:	57b1fe7d 	.word	0x57b1fe7d
 8008690:	3ec71de3 	.word	0x3ec71de3
 8008694:	19c161d5 	.word	0x19c161d5
 8008698:	3f2a01a0 	.word	0x3f2a01a0
 800869c:	1110f8a6 	.word	0x1110f8a6
 80086a0:	3f811111 	.word	0x3f811111

080086a4 <fabs>:
 80086a4:	ec51 0b10 	vmov	r0, r1, d0
 80086a8:	ee10 2a10 	vmov	r2, s0
 80086ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086b0:	ec43 2b10 	vmov	d0, r2, r3
 80086b4:	4770      	bx	lr
	...

080086b8 <floor>:
 80086b8:	ec51 0b10 	vmov	r0, r1, d0
 80086bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80086c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80086c8:	2e13      	cmp	r6, #19
 80086ca:	ee10 5a10 	vmov	r5, s0
 80086ce:	ee10 8a10 	vmov	r8, s0
 80086d2:	460c      	mov	r4, r1
 80086d4:	dc32      	bgt.n	800873c <floor+0x84>
 80086d6:	2e00      	cmp	r6, #0
 80086d8:	da14      	bge.n	8008704 <floor+0x4c>
 80086da:	a333      	add	r3, pc, #204	; (adr r3, 80087a8 <floor+0xf0>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 fd78 	bl	80001d4 <__adddf3>
 80086e4:	2200      	movs	r2, #0
 80086e6:	2300      	movs	r3, #0
 80086e8:	f7f8 f9ba 	bl	8000a60 <__aeabi_dcmpgt>
 80086ec:	b138      	cbz	r0, 80086fe <floor+0x46>
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	da57      	bge.n	80087a2 <floor+0xea>
 80086f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80086f6:	431d      	orrs	r5, r3
 80086f8:	d001      	beq.n	80086fe <floor+0x46>
 80086fa:	4c2d      	ldr	r4, [pc, #180]	; (80087b0 <floor+0xf8>)
 80086fc:	2500      	movs	r5, #0
 80086fe:	4621      	mov	r1, r4
 8008700:	4628      	mov	r0, r5
 8008702:	e025      	b.n	8008750 <floor+0x98>
 8008704:	4f2b      	ldr	r7, [pc, #172]	; (80087b4 <floor+0xfc>)
 8008706:	4137      	asrs	r7, r6
 8008708:	ea01 0307 	and.w	r3, r1, r7
 800870c:	4303      	orrs	r3, r0
 800870e:	d01f      	beq.n	8008750 <floor+0x98>
 8008710:	a325      	add	r3, pc, #148	; (adr r3, 80087a8 <floor+0xf0>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 fd5d 	bl	80001d4 <__adddf3>
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	f7f8 f99f 	bl	8000a60 <__aeabi_dcmpgt>
 8008722:	2800      	cmp	r0, #0
 8008724:	d0eb      	beq.n	80086fe <floor+0x46>
 8008726:	2c00      	cmp	r4, #0
 8008728:	bfbe      	ittt	lt
 800872a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800872e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008732:	19a4      	addlt	r4, r4, r6
 8008734:	ea24 0407 	bic.w	r4, r4, r7
 8008738:	2500      	movs	r5, #0
 800873a:	e7e0      	b.n	80086fe <floor+0x46>
 800873c:	2e33      	cmp	r6, #51	; 0x33
 800873e:	dd0b      	ble.n	8008758 <floor+0xa0>
 8008740:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008744:	d104      	bne.n	8008750 <floor+0x98>
 8008746:	ee10 2a10 	vmov	r2, s0
 800874a:	460b      	mov	r3, r1
 800874c:	f7f7 fd42 	bl	80001d4 <__adddf3>
 8008750:	ec41 0b10 	vmov	d0, r0, r1
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008758:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	fa23 f707 	lsr.w	r7, r3, r7
 8008764:	4207      	tst	r7, r0
 8008766:	d0f3      	beq.n	8008750 <floor+0x98>
 8008768:	a30f      	add	r3, pc, #60	; (adr r3, 80087a8 <floor+0xf0>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fd31 	bl	80001d4 <__adddf3>
 8008772:	2200      	movs	r2, #0
 8008774:	2300      	movs	r3, #0
 8008776:	f7f8 f973 	bl	8000a60 <__aeabi_dcmpgt>
 800877a:	2800      	cmp	r0, #0
 800877c:	d0bf      	beq.n	80086fe <floor+0x46>
 800877e:	2c00      	cmp	r4, #0
 8008780:	da02      	bge.n	8008788 <floor+0xd0>
 8008782:	2e14      	cmp	r6, #20
 8008784:	d103      	bne.n	800878e <floor+0xd6>
 8008786:	3401      	adds	r4, #1
 8008788:	ea25 0507 	bic.w	r5, r5, r7
 800878c:	e7b7      	b.n	80086fe <floor+0x46>
 800878e:	2301      	movs	r3, #1
 8008790:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008794:	fa03 f606 	lsl.w	r6, r3, r6
 8008798:	4435      	add	r5, r6
 800879a:	4545      	cmp	r5, r8
 800879c:	bf38      	it	cc
 800879e:	18e4      	addcc	r4, r4, r3
 80087a0:	e7f2      	b.n	8008788 <floor+0xd0>
 80087a2:	2500      	movs	r5, #0
 80087a4:	462c      	mov	r4, r5
 80087a6:	e7aa      	b.n	80086fe <floor+0x46>
 80087a8:	8800759c 	.word	0x8800759c
 80087ac:	7e37e43c 	.word	0x7e37e43c
 80087b0:	bff00000 	.word	0xbff00000
 80087b4:	000fffff 	.word	0x000fffff

080087b8 <nan>:
 80087b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087c0 <nan+0x8>
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	00000000 	.word	0x00000000
 80087c4:	7ff80000 	.word	0x7ff80000

080087c8 <scalbn>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	ec55 4b10 	vmov	r4, r5, d0
 80087ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80087d2:	4606      	mov	r6, r0
 80087d4:	462b      	mov	r3, r5
 80087d6:	b99a      	cbnz	r2, 8008800 <scalbn+0x38>
 80087d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80087dc:	4323      	orrs	r3, r4
 80087de:	d036      	beq.n	800884e <scalbn+0x86>
 80087e0:	4b39      	ldr	r3, [pc, #228]	; (80088c8 <scalbn+0x100>)
 80087e2:	4629      	mov	r1, r5
 80087e4:	ee10 0a10 	vmov	r0, s0
 80087e8:	2200      	movs	r2, #0
 80087ea:	f7f7 fea9 	bl	8000540 <__aeabi_dmul>
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <scalbn+0x104>)
 80087f0:	429e      	cmp	r6, r3
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	da10      	bge.n	800881a <scalbn+0x52>
 80087f8:	a32b      	add	r3, pc, #172	; (adr r3, 80088a8 <scalbn+0xe0>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	e03a      	b.n	8008876 <scalbn+0xae>
 8008800:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008804:	428a      	cmp	r2, r1
 8008806:	d10c      	bne.n	8008822 <scalbn+0x5a>
 8008808:	ee10 2a10 	vmov	r2, s0
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fce0 	bl	80001d4 <__adddf3>
 8008814:	4604      	mov	r4, r0
 8008816:	460d      	mov	r5, r1
 8008818:	e019      	b.n	800884e <scalbn+0x86>
 800881a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800881e:	460b      	mov	r3, r1
 8008820:	3a36      	subs	r2, #54	; 0x36
 8008822:	4432      	add	r2, r6
 8008824:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008828:	428a      	cmp	r2, r1
 800882a:	dd08      	ble.n	800883e <scalbn+0x76>
 800882c:	2d00      	cmp	r5, #0
 800882e:	a120      	add	r1, pc, #128	; (adr r1, 80088b0 <scalbn+0xe8>)
 8008830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008834:	da1c      	bge.n	8008870 <scalbn+0xa8>
 8008836:	a120      	add	r1, pc, #128	; (adr r1, 80088b8 <scalbn+0xf0>)
 8008838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883c:	e018      	b.n	8008870 <scalbn+0xa8>
 800883e:	2a00      	cmp	r2, #0
 8008840:	dd08      	ble.n	8008854 <scalbn+0x8c>
 8008842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800884a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800884e:	ec45 4b10 	vmov	d0, r4, r5
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008858:	da19      	bge.n	800888e <scalbn+0xc6>
 800885a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800885e:	429e      	cmp	r6, r3
 8008860:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008864:	dd0a      	ble.n	800887c <scalbn+0xb4>
 8008866:	a112      	add	r1, pc, #72	; (adr r1, 80088b0 <scalbn+0xe8>)
 8008868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e2      	bne.n	8008836 <scalbn+0x6e>
 8008870:	a30f      	add	r3, pc, #60	; (adr r3, 80088b0 <scalbn+0xe8>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fe63 	bl	8000540 <__aeabi_dmul>
 800887a:	e7cb      	b.n	8008814 <scalbn+0x4c>
 800887c:	a10a      	add	r1, pc, #40	; (adr r1, 80088a8 <scalbn+0xe0>)
 800887e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0b8      	beq.n	80087f8 <scalbn+0x30>
 8008886:	a10e      	add	r1, pc, #56	; (adr r1, 80088c0 <scalbn+0xf8>)
 8008888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800888c:	e7b4      	b.n	80087f8 <scalbn+0x30>
 800888e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008892:	3236      	adds	r2, #54	; 0x36
 8008894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008898:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800889c:	4620      	mov	r0, r4
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <scalbn+0x108>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	e7e8      	b.n	8008876 <scalbn+0xae>
 80088a4:	f3af 8000 	nop.w
 80088a8:	c2f8f359 	.word	0xc2f8f359
 80088ac:	01a56e1f 	.word	0x01a56e1f
 80088b0:	8800759c 	.word	0x8800759c
 80088b4:	7e37e43c 	.word	0x7e37e43c
 80088b8:	8800759c 	.word	0x8800759c
 80088bc:	fe37e43c 	.word	0xfe37e43c
 80088c0:	c2f8f359 	.word	0xc2f8f359
 80088c4:	81a56e1f 	.word	0x81a56e1f
 80088c8:	43500000 	.word	0x43500000
 80088cc:	ffff3cb0 	.word	0xffff3cb0
 80088d0:	3c900000 	.word	0x3c900000

080088d4 <_init>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr

080088e0 <_fini>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr
